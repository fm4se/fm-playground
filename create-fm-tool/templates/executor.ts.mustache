import { saveCode } from '@/api/playgroundApi';
import { fmpConfig } from '@/ToolMaps';
import {
  editorValueAtom,
  jotaiStore,
  languageAtom,
  permalinkAtom,
  isExecutingAtom,
  outputAtom,
} from '@/atoms';
import { Permalink } from '@/types';
{{#hasApiEndpoint}}
import axios from 'axios';


async function execute{{toolDisplayName}}(permalink: Permalink) {
  let url = `{{apiEndpoint}}/run/?check=${permalink.check}&p=${permalink.permalink}`;
  try {
    const response = await axios.get(url);
    return response.data;
  } catch (error) {
    throw error;
  }
}
{{/hasApiEndpoint}}

export const execute{{toolDisplayName}}Tool = async () => {
  const editorValue = jotaiStore.get(editorValueAtom);
  const language = jotaiStore.get(languageAtom);
  const permalink = jotaiStore.get(permalinkAtom);
  
  const response = await saveCode(editorValue, language.short, permalink.permalink || null, null);
  if (response) {
    jotaiStore.set(permalinkAtom, response.data);
  } else {
    jotaiStore.set(
      outputAtom,
      `Something went wrong. If the problem persists, open an <a href="${fmpConfig.issues}" target="_blank">issue</a>`
    );
    jotaiStore.set(isExecutingAtom, false);
    return;
  }

  try {
    {{#hasApiEndpoint}}
    const res = await execute{{toolDisplayName}}(response?.data);
    jotaiStore.set(outputAtom, res);
    {{/hasApiEndpoint}}
    {{^hasApiEndpoint}}
    jotaiStore.set(outputAtom, 'Tool execution not implemented yet');
    {{/hasApiEndpoint}}
  } catch (err: any) {
    jotaiStore.set(
      outputAtom,
      `${err.message}. If the problem persists, open an <a href="${fmpConfig.issues}" target="_blank">issue</a>`
    );
  }
  jotaiStore.set(isExecutingAtom, false);
};
