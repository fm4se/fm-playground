{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FM Playground User Guide","text":"<p>Formal Methods (FM) Playground is a web platform for running and experimenting with different formal methods tools. It is designed to be integrated any formal methods tool that can be run without installation on the local machine. The platform is built using modern web technologies and provides a user-friendly interface for interacting with formal methods tools.</p>"},{"location":"#features","title":"Features","text":"<p>The FM Playground offers the following tools by default:</p> <ul> <li>Limboole: A SAT-based tool for Boolean reasoning.</li> <li>SMT: An SMT solver (Z3) for checking the satisfiability of logical formulas.</li> <li>nuXmv: A symbolic model checker for the finite-state and infinite-state systems.</li> <li>Alloy: A declarative modeling language for software systems.</li> <li>Spectra: A synthesis tool for reactive systems.</li> </ul> <p>More Tools</p> <p>The FM Playground is designed to be extensible, allowing users to add their own tools and configurations. If you have a tool that you want to integrate into the FM Playground, follow the guide on how to add a new tool. TODO: Add guide on how to add a new tool.</p>"},{"location":"#overview-and-examples","title":"Overview and Examples","text":"<p>Visit play.formal-methods.net to access the FM Playground. No installation is required - everything runs in your browser!</p> <p>We started a small overview of the features of the FM Playground and how to use it. The video playlist is available on YouTube</p> <p>There also some examples for each tool available in the bottom of the page. You can use these examples to get started with the tools and see how they work.</p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#writing-specification","title":"Writing Specification","text":"<ol> <li>Select a Tool: Click on the tool name in the toolbar</li> <li>Start Typing: The editor provides syntax highlighting automatically</li> <li>Error Detection: Red squiggly lines indicate syntax errors</li> <li>Auto-completion: Use Ctrl+Space for suggestions</li> </ol> <p>LSP Support</p> <p>Not all tools support Language Server Protocol (LSP) features like auto-completion and error detection. We are working on improving this feature for all tools. Currently, Limboole, SMT (in beta), and Spectra support LSP features. </p>"},{"location":"#running-specification","title":"Running Specification","text":"<ol> <li>Click Run: Press the \"RUN\" button</li> <li>View Results: Check the output panel for results</li> <li>Error Handling: Errors are displayed with line numbers</li> <li>Timeout: Long-running processes are automatically terminated (default 60 seconds)</li> </ol>"},{"location":"#sharing-specification","title":"Sharing Specification","text":"<ol> <li>Generate Link: Your specification is automatically saved with a unique permalink</li> <li>Copy URL : Copy the browser URL to share your specification</li> <li>Version History: Each \"RUN\" creates a new version of your specification</li> <li>Forking: Others can modify and save their own versions not affecting your original specification</li> </ol>"},{"location":"#file-management","title":"File Management","text":""},{"location":"#uploading-files","title":"Uploading Files","text":"<ol> <li>Click the  upload button</li> <li>Select a file with the appropriate extension</li> <li>The file content loads into the editor</li> <li>File format is automatically detected</li> </ol>"},{"location":"#downloading-files","title":"Downloading Files","text":"<ol> <li>Click the  download button</li> <li>Choose filename and location (default is <code>&lt;permalink&gt;.&lt;tool_extension&gt;</code>)</li> <li>File is saved with correct extension</li> <li>Preserves all formatting and syntax</li> </ol>"},{"location":"#user-accounts","title":"User Accounts","text":"<p>You DON'T need to create an account to use the FM Playground, but signing in provides additional benefits.</p>"},{"location":"#signing-in","title":"Signing In","text":"<ol> <li>Click \"LOGIN\" in the top right</li> <li>Choose Google or GitHub OAuth</li> <li>Grant necessary permissions</li> <li>Account will be created automatically if it doesn't exist</li> </ol>"},{"location":"#benefits-of-signing-in","title":"Benefits of Signing In","text":"<ul> <li>History: Access all your previous work</li> <li>Search: Find specific specification snippets</li> <li>Backup: Never lose your work</li> </ul>"},{"location":"#viewing-history","title":"Viewing History","text":"<ol> <li>Sign in to your account</li> <li>Click the history icon</li> <li>Browse chronologically</li> <li>Click any item to load it in the editor</li> </ol> <p>Results in History</p> <p>The history only contains the specification you wrote, not the output of the tools. You can run the specification again to see the results.</p>"},{"location":"#searching-specification","title":"Searching Specification","text":"<ol> <li>Use the search box in history</li> <li>Search by content</li> </ol>"},{"location":"#managing-account","title":"Managing Account","text":"<ul> <li>Export: Download all your specification as a JSON file</li> <li>Delete: You can delete your account at any time</li> </ul> <p>Deleting Account</p> <p>Deleting your account will UNLINK all your specification from your account. But the specification will still be available via the permalinks. </p>"},{"location":"CHANGELOG/","title":"Change Log","text":""},{"location":"CHANGELOG/#v2614-2025-08-06","title":"v2.6.14 [2025-08-06]","text":"<ul> <li>\u26a1\ufe0f Updated smt grammar</li> <li>\u267b\ufe0f Updated LSP wrapper configuration modularity</li> </ul>"},{"location":"CHANGELOG/#v2613-2025-07-31","title":"v2.6.13 [2025-07-31]","text":"<ul> <li>\u2728 Added Navigating back on Alloy Instances #23</li> <li>\ud83d\udc1b Fixed #22 - Not all available command options are displayed.</li> </ul>"},{"location":"CHANGELOG/#v2610-12-2025-07-01","title":"v2.6.10-12 [2025-07-01]","text":"<ul> <li>\u267b\ufe0f Migrate repository from se-buw to fm4se</li> <li>\u267b\ufe0f Moved alloy CSS to alloy tool dir</li> <li>\ud83d\udd27 updated Vite config for local dev</li> </ul>"},{"location":"CHANGELOG/#v268-9-2025-06-04","title":"v2.6.8-9 [2025-06-04]","text":"<ul> <li>\ud83d\udc1b Fixed Alloy, tabular instance view not showing #17</li> <li>\ud83d\udc1b Fixed Spectra Syntax Highlighting is not working while LSP is enabled #19</li> <li>\ud83d\udc1b Fixed Line Highlighting is not working in the lsp editor #20</li> </ul>"},{"location":"CHANGELOG/#v267-2025-06-02","title":"v2.6.7 [2025-06-02]","text":"<ul> <li>\ud83d\udc1b Fixed language support is not working from permalink</li> </ul>"},{"location":"CHANGELOG/#v264-6-2025-06-01","title":"v2.6.4-6 [2025-06-01]","text":"<ul> <li>\u2b06\ufe0f Updated python dependencies</li> <li>\u2b06\ufe0f Upgrade flask cors from 5.0.1 to 6.0.0</li> <li>\u2728 Added script to automatically update the versions </li> <li>\ud83d\udc1b Fixed poetry install in docker with --no-root</li> </ul>"},{"location":"CHANGELOG/#v261-3-2025-05-10","title":"v2.6.1-3 [2025-05-10]","text":"<ul> <li>\ud83d\udc1b Fixed Maximum call stack size exceeded in validation</li> <li>\u2728 Added scope provider for spectra workspace</li> <li>\ud83d\uddc3\ufe0f Storing lsp metadata of spectra in the database.</li> </ul>"},{"location":"CHANGELOG/#v260-2025-05-05","title":"v2.6.0 [2025-05-05]","text":"<ul> <li>\u2728 Added Spectra language server support</li> </ul>"},{"location":"CHANGELOG/#v254-2025-04-27","title":"v2.5.4 [2025-04-27]","text":"<ul> <li>\ud83d\udccc Bump Python dependencies</li> <li>\ud83d\udccc Bump npm dependencies</li> </ul>"},{"location":"CHANGELOG/#v253-2025-04-01","title":"v2.5.3 [2025-04-01]","text":"<ul> <li>\ud83d\udd27 Added allowed hosts in the vite config file</li> </ul>"},{"location":"CHANGELOG/#v252-2025-04-01","title":"v2.5.2 [2025-04-01]","text":"<ul> <li>\ud83d\udccc Migrated to vite 6</li> <li>\ud83d\udccc Updated python dependencies</li> </ul>"},{"location":"CHANGELOG/#v251-2025-03-31","title":"v2.5.1 [2025-03-31]","text":"<ul> <li>\u2728 Added materials for spectra</li> <li>\u2728 Added current variant of (spectra) pattern names, keeping old for backwards compatibility</li> </ul>"},{"location":"CHANGELOG/#v250-2025-02-25","title":"v2.5.0 [2025-02-25]","text":"<p>Added</p> <ul> <li>\u2728 Updated smt language support with cross-ref and code completion</li> </ul>"},{"location":"CHANGELOG/#v240-2024-12-16","title":"v2.4.0 [2024-12-16]","text":"<p>Changed</p> <ul> <li>\u2728 Alloy- added support for atoms and skolems when parsing expressions</li> <li>\ud83d\udc1b Alloy- fixed tabular output</li> <li>\ud83d\udc1b Alloy- fixed alloy instance is not updating immediately</li> <li>\ud83d\udc1b Alloy- fixed evaluator cleared up when switching tabs</li> </ul>"},{"location":"CHANGELOG/#v230-2024-12-04","title":"v2.3.0 [2024-12-04]","text":"<p>Changed</p> <ul> <li>\u2728 Added alloy evaluator</li> <li>\ud83c\udfa8 Improved the visualization of alloy text and tabular format</li> <li>\u26a1\ufe0f Switched deprecated method in Java</li> </ul>"},{"location":"CHANGELOG/#v222-2024-12-03","title":"v2.2.2 [2024-12-03]","text":"<p>Changed</p> <ul> <li>\ud83d\udcccBump python dependencies</li> </ul>"},{"location":"CHANGELOG/#v221-2024-11-26","title":"v2.2.1 [2024-11-26]","text":"<p>Changed</p> <p>\u26a1\ufe0fSet alloy memory usage limit; restart if exceeded \u26a1\ufe0fUsing minisat for alloy \ud83d\udc1bHandle label on alloy commands</p>"},{"location":"CHANGELOG/#v220-2024-11-20","title":"v2.2.0 [2024-11-20]","text":"<p>Added</p> <ul> <li>\u2728 Added typo validation in Limboole.</li> <li>\u2728 Storing language support check as metadata</li> </ul> <p>Changed</p> <ul> <li>\ud83d\udc1b Fixed issue with ascii char recognition</li> <li>\ud83d\udc1b Fixed limboole syntax highlighting</li> <li>\u267b\ufe0f Refactored error messages</li> </ul>"},{"location":"CHANGELOG/#v211-2024-11-05","title":"v2.1.1 [2024-11-05]","text":"<p>Changed</p> <ul> <li>\ud83d\udc1b Fixed Alloy default run command ignoring all facts</li> <li>\ud83e\uddea Fixed Alloy-api bkoken test cases</li> <li>\u26a1\ufe0f Removed some unused code</li> <li>\u26a1\ufe0f Fixed some code smells</li> </ul>"},{"location":"CHANGELOG/#v210-2024-11-01","title":"v2.1.0 [2024-11-01]","text":"<p>Added</p> <ul> <li>\u2728 SMT in editor language support (browser worker)</li> <li>\u2728 Feedback form</li> </ul>"},{"location":"CHANGELOG/#v200-2024-10-20","title":"v2.0.0 [2024-10-20]","text":"<p>Added</p> <ul> <li>\u26a1\ufe0f Added caching mechanism for z3, nuXmv, and Spectra with Redis</li> <li>\u2728 New api for getting metadata</li> </ul> <p>Changed</p> <ul> <li>\ud83d\udca5 Separated nuxmv, alloy, and z3 api</li> <li>\ud83d\udca5 Merged VAL and QBF are merged into SAT</li> <li>\ud83d\udd25 Remove tool specific api</li> <li>\ud83d\udd25 Remove check type for permalink lookup</li> <li>\ud83d\udd25 Remove dark mode (temporarily)</li> <li>\u267b\ufe0f Migrated backend to Flask 3 and poetry</li> <li>\u267b\ufe0f Populating tools dropdown from fmp.conf</li> <li>\u267b\ufe0f Fixed wasm fallback api</li> <li>\ud83c\udfa8 Added issue link on error modals</li> <li>\ud83d\udc1bFixed-creating new spec not reseting the editor</li> </ul>"},{"location":"CHANGELOG/#v150-2024-10-07","title":"v1.5.0 [2024-10-07]","text":"<p>Added</p> <ul> <li>\u2728 Limboole in editor language support (browser worker)</li> <li>\u2728 Store playground version for future reference</li> </ul> <p>Changed</p> <ul> <li>\u26a1Migrated from JavaScript to TypeScript</li> <li>\u267b\ufe0fMerged some duplicate API endpoints</li> </ul>"},{"location":"CHANGELOG/#v142-2024-09-28","title":"v1.4.2 [2024-09-28]","text":"<p>What's changed?</p> <ul> <li>\ud83d\udcccBump esbuild from 0.20.2 to 0.21.5</li> <li>\ud83d\udcccBump micromatch from 4.0.5 to 4.0.8</li> <li>\ud83d\udcddAdded new examples for SAT, SMT, and Alloy</li> <li>\ud83d\udcddLinked YouTube playlist on the readme</li> </ul>"},{"location":"CHANGELOG/#v141-2024-08-17","title":"v1.4.1 [2024-08-17]","text":"<p>What's changed?</p> <ul> <li>\ud83d\udc1bFixed #9 - Alloy's subset singnature indication missing in instances</li> <li>\ud83d\udc1bFixed #8 - unexpected behavior on last instance of temporal Alloy models</li> <li>\ud83d\udcccBump axios from 1.6.2 to 1.7.4</li> </ul>"},{"location":"CHANGELOG/#v140-2024-08-10","title":"v1.4.0 [2024-08-10]","text":"<p>What's changed?</p> <ul> <li>Added alloy tabular and text output </li> <li>Bug Fixed- can't parse alloy integer label</li> <li>Fixed- Unicode handling</li> <li>Fixed- Alloy timeout</li> <li>Disabled next instance button while calculating</li> <li>Added rate limiter for alloy</li> <li>Added download ext for spectra</li> <li>Add SQLite option for local development</li> </ul>"},{"location":"CHANGELOG/#v130-2024-07-09","title":"v1.3.0 [2024-07-09]","text":"<p>What's changed?</p> <ul> <li>Removed legacy alloy4fun</li> <li>Added new Alloy API with Spring Boot</li> <li>Integrated Alloy UI into the main playground</li> <li>Fixed #6 Limboole syntax error reporting blocks running</li> <li>Removed DB migration on docker </li> <li>Fixed spectra line highlighting error</li> <li>nuXmv tutorial URL changed</li> <li>Updated workflow for docker build</li> </ul>"},{"location":"CHANGELOG/#v121-2024-06-09","title":"v1.2.1 [2024-06-09]","text":"<p>What's changed?</p> <ul> <li>Introduce new tool - Spectra Synthesizer</li> <li>Line highlighting on the editor on error/core</li> <li>Introduced dark mode</li> <li>Compressing large response body</li> <li>Migrated Z3 to the browser</li> </ul>"},{"location":"CHANGELOG/#v112-2024-01-10","title":"v1.1.2 [2024-01-10]","text":"<p>Fix</p> <ul> <li>Syntax highlighting fails when loading from permalinks 9991aa1c9c83c78fbd1d9849b5b80fd8efd19d19</li> <li>Handle non-ASCII characters on specification</li> <li>nuXmv time-out blocked by Gunicorn</li> <li>Store the specification configuration on refresh/redirect</li> <li>Exit fullscreen mode with ESC key keeps current ref</li> <li>File upload type</li> <li>Run button disable failed when running</li> </ul>"},{"location":"CHANGELOG/#v111-2024-01-05","title":"v1.1.1 [2024-01-05]","text":"<p>Fix</p> <ul> <li>GitHub link breaks on mobile device</li> <li>After loading a spec from the history the output panel keeps the content of previous analyses, and the permalink is not updated</li> <li>Keep the selected history highlighted</li> <li>The search results reset to all specs after loading a spec</li> </ul>"},{"location":"CHANGELOG/#v110-2023-12-28","title":"v1.1.0 [2023-12-28]","text":"<p>What's changed?</p> <ul> <li>Save user theme preference</li> <li>Adjust the height on the fullscreen</li> <li>Codebase minification on deployment</li> <li>Upgrade Alloy-API to the latest maven and java</li> <li>Introduce request limit with flask-limiter</li> </ul> <p>Fix</p> <ul> <li>Limboole parsing error #4</li> <li>Copying empty permalink</li> <li>API response error</li> <li>nuXmv copyright notice</li> </ul>"},{"location":"CHANGELOG/#v100-2023-12-21","title":"v1.0.0 [2023-12-21]","text":"<p>What's changed?</p> <ul> <li>Completely rewritten frontend with React</li> <li>Added login functionality with Google and GitHub</li> <li>Added ability to save specifications</li> <li>Added ability to download history as JSON</li> <li>Search saved history </li> </ul>"},{"location":"CHANGELOG/#v01-2023-12-14","title":"v0.1 [2023-12-14]","text":""},{"location":"developer-guide/","title":"FM Playground Developer Guide","text":"<p>Formal Methods (FM) Playground is a web platform for running and experimenting with different formal methods tools. It is designed to be integrated any formal methods tool that can be run without installation on the local machine. The platform is built using modern web technologies and provides a user-friendly interface for interacting with formal methods tools.</p>"},{"location":"developer-guide/#getting-started","title":"Getting Started","text":"<p>This guide will help you to set up your own instance of the FM Playground and add/modify tools.</p> <p>There are two main approaches to develop your own FM Playground instance, depending on your needs and preferences:</p>"},{"location":"developer-guide/#working-with-tailered-playground","title":"\ud83c\udf74 Working with Tailered Playground","text":"<p>Best for: Developers who want access to all existing tools and prefer a complete codebase as starting point.</p> <p>If you want to start with all existing formal method tools (Alloy, Limboole, nuXmv, SMT/Z3, Spectra) and build upon them, this approach gives you the full codebase to work with.</p> <p>\ud83d\udcd6 Read the detailed guide \u2192</p>"},{"location":"developer-guide/#start-from-scratch","title":"\ud83d\ude80 Start from Scratch","text":"<p>Best for: Developers who want a minimal setup and prefer to add only the tools they need.</p> <p>If you want a clean, minimal starting point and only need specific formal method tools, this approach lets you create a customized playground from the ground up.</p> <p>\ud83d\udcd6 Read the detailed guide \u2192</p>"},{"location":"developer-guide/#adding-custom-tools","title":"\ud83d\udee0\ufe0f Adding Custom Tools","text":"<p>Both approaches support adding custom tools using the <code>fmp-tool</code> CLI. This powerful tool generator helps you create new formal method tools with minimal effort.</p>"},{"location":"developer-guide/#key-features","title":"Key Features","text":"<ul> <li>Interactive Setup: Guided configuration for your tool</li> <li>Template Generation: Automatic creation of all necessary files</li> <li>Integration Support: Built-in ToolMaps.tsx integration</li> <li>Flexible Options: Support for custom input/output components</li> </ul>"},{"location":"developer-guide/#quick-start","title":"Quick Start","text":"<pre><code>npx fmp-tool\n</code></pre> <p>\ud83d\udcd6 Learn more about tool development \u2192</p>"},{"location":"developer-guide/#choose-your-path","title":"\ud83c\udfaf Choose Your Path","text":"Aspect Tailered Playground Empty Playground Setup Time Quick (fork &amp; clone) Medium (guided setup) Initial Tools All tools included Select only what you need Codebase Size Full codebase Minimal, focused Customization Modify existing Build from ground up Learning Curve Steeper (more code) Gentler (less complexity)"},{"location":"developer-guide/#quick-navigation","title":"Quick Navigation","text":"<ul> <li>Tailered Playground \u2192 - Fork and extend the full repository</li> <li>Empty Playground \u2192 - Create a minimal, custom playground  </li> <li>Development Guide \u2192 - Learn about tool development</li> <li>API Reference \u2192 - Technical documentation</li> <li>Main Repository \u2192 - Source code and issues</li> </ul>"},{"location":"developer-guide/empty-playground/","title":"Start from Scratch","text":"<p>This guide covers creating a new FM Playground project using <code>fmp-create</code>. This approach gives you a minimal, customizable setup with only the tools you need.</p>"},{"location":"developer-guide/empty-playground/#overview","title":"Overview","text":"<p>The start-from-scratch approach is ideal when you:</p> <ul> <li>Want a clean, minimal starting point</li> <li>Only need specific formal method tools</li> <li>Prefer to avoid unnecessary dependencies</li> <li>Are building a specialized or domain-specific playground</li> <li>Want to learn the platform architecture step by step</li> </ul>"},{"location":"developer-guide/empty-playground/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Node.js (version 16 or higher) - Download here</li> <li>Python (version 3.8 or higher) - Download here</li> <li>Docker (optional but recommended) - Download here</li> <li>Code Editor - VS Code recommended</li> </ul>"},{"location":"developer-guide/empty-playground/#quick-setup-verification","title":"Quick Setup Verification","text":"<pre><code># Check Node.js version\nnode --version\n# Should show v16.0.0 or higher\n\n# Check Python version\npython --version\n# Should show Python 3.8.0 or higher\n\n# Check Docker (optional)\ndocker --version\n# Should show Docker version info\n</code></pre>"},{"location":"developer-guide/empty-playground/#getting-started","title":"Getting Started","text":""},{"location":"developer-guide/empty-playground/#interactive-setup","title":"Interactive Setup","text":"<pre><code># Create a new FM Playground project\nnpx fmp-create\n</code></pre> <p>This starts an interactive setup process that guides you through all configuration options.</p>"},{"location":"developer-guide/empty-playground/#1-project-name","title":"1. Project Name","text":"<pre><code>? What is your project name? (my-fm-playground)\n</code></pre> <p>Guidelines:</p> <ul> <li>Use lowercase letters, numbers, hyphens, and underscores only</li> <li>Examples: <code>my-fm-playground</code>, <code>logic-solver</code>, <code>verification-tools</code></li> <li>This will be your project folder name</li> </ul>"},{"location":"developer-guide/empty-playground/#2-tool-selection","title":"2. Tool Selection","text":"<pre><code>? Which formal method tools would you like to include? \n  (Leave empty for a minimal setup)\n\u276f\u25ef Alloy - A declarative modeling language for software systems\n \u25ef Limboole - A SAT-based tool for Boolean reasoning  \n \u25ef nuXmv - A symbolic model checker for finite and infinite-state systems\n \u25ef SMT (Z3) - A SMT solver for satisfiability modulo theories\n \u25ef Spectra - A specification language for reactive systems\n</code></pre> <p>Available Tools:</p> Tool Description Use Cases Language Alloy Declarative modeling language System modeling, constraint solving Java Limboole SAT-based Boolean reasoning Propositional logic, satisfiability Python nuXmv Symbolic model checker Temporal logic, verification Python SMT (Z3) SMT solver Mathematical theories, constraint solving Python Spectra Reactive systems GR(1) synthesis, reactive systems Python <p>Selection Tips:</p> <ul> <li>Use Space to select/deselect tools</li> <li>Use Arrow keys to navigate</li> <li>Select none for minimal setup (you can add tools later)</li> <li>Select all if you want the full experience</li> </ul>"},{"location":"developer-guide/empty-playground/#3-dependency-installation","title":"3. Dependency Installation","text":"<pre><code>? Would you like to install dependencies? (Y/n)\n</code></pre> <ul> <li>Yes (recommended): Automatically installs all npm dependencies</li> <li>No: You'll need to run <code>npm install</code> manually later</li> </ul>"},{"location":"developer-guide/empty-playground/#example-sessions","title":"Example Sessions","text":""},{"location":"developer-guide/empty-playground/#minimal-setup-no-tools","title":"Minimal Setup (No Tools)","text":"<pre><code>$ npx fmp-create\n\n\ud83d\ude80 Create FM Playground\nSet up a new Formal Methods playground project\n\n? What is your project name? my-minimal-playground\n? Which formal method tools would you like to include? \n  (Leave empty for a minimal setup) (none selected)\n? Would you like to install dependencies? Yes\n\n\u2714 Creating FM Playground project...\n\u2714 Dependencies installed successfully!\n\n\u2705 FM Playground project created successfully!\n\nTo get started:\n\n  cd my-minimal-playground/frontend\n  npm run dev\n\nNo tools selected - minimal playground setup created.\nYou can add tools later using the `npx fmp-tool` command.\n\nHappy formal method modeling! \ud83c\udf89\n</code></pre>"},{"location":"developer-guide/empty-playground/#full-setup-all-tools","title":"Full Setup (All Tools)","text":"<pre><code>$ npx fmp-create\n\n\ud83d\ude80 Create FM Playground\nSet up a new Formal Methods playground project\n\n? What is your project name? my-full-playground\n? Which formal method tools would you like to include?\n\u276f\u25c9 Alloy - A declarative modeling language for software systems\n \u25c9 Limboole - A SAT-based tool for Boolean reasoning\n \u25c9 nuXmv - A symbolic model checker for finite and infinite-state systems\n \u25c9 SMT (Z3) - A SMT solver for satisfiability modulo theories\n \u25c9 Spectra - A specification language for reactive systems\n? Would you like to install dependencies? Yes\n\n\u2714 Creating FM Playground project...\n\u2714 Dependencies installed successfully!\n\n\u2705 FM Playground project created successfully!\n\nTo get started:\n\n  cd my-full-playground/frontend\n  npm run dev\n\nSelected tools:\n  \u2022 Alloy - A declarative modeling language for software systems\n  \u2022 Limboole - A SAT-based tool for Boolean reasoning\n  \u2022 nuXmv - A symbolic model checker for finite and infinite-state systems\n  \u2022 SMT (Z3) - A SMT solver for satisfiability modulo theories\n  \u2022 Spectra - A specification language for reactive systems\n\nHappy formal method modeling! \ud83c\udf89\n</code></pre>"},{"location":"developer-guide/empty-playground/#what-gets-created","title":"What Gets Created","text":"<p>Based on your selections, <code>fmp-create</code> will generate:</p>"},{"location":"developer-guide/empty-playground/#always-created","title":"Always Created","text":"<ul> <li>Frontend: React TypeScript application</li> <li>Backend: Python Flask application</li> <li>Docker Configuration: docker-compose.yml</li> <li>Documentation: README.md with setup instructions</li> </ul>"},{"location":"developer-guide/empty-playground/#tool-specific-based-on-selection","title":"Tool-Specific (Based on Selection)","text":"<ul> <li>alloy-api/: Java Gradle service (if Alloy selected)</li> <li>limboole-api/: Python FastAPI service (if Limboole selected)</li> <li>nuxmv-api/: Python FastAPI service (if nuXmv selected)</li> <li>z3-api/: Python FastAPI service (if SMT selected)</li> <li>spectra-api/: Python FastAPI service (if Spectra selected)</li> </ul>"},{"location":"developer-guide/empty-playground/#frontend-integration","title":"Frontend Integration","text":"<ul> <li>Tool Components: Only for selected tools</li> <li>ToolMaps Configuration: Customized for your selection</li> <li>Monaco Language Support: For selected tool languages</li> <li>API Client Code: For selected tool endpoints</li> </ul>"},{"location":"developer-guide/empty-playground/#common-issues","title":"\u26a0\ufe0f Common Issues","text":""},{"location":"developer-guide/empty-playground/#1-directory-already-exists","title":"1. Directory Already Exists","text":"<pre><code>Error: Directory 'my-fm-playground' already exists\n</code></pre> <p>Solution: <pre><code># Remove existing directory\nrm -rf my-fm-playground\n\n# Or choose a different name\nnpx fmp-create\n</code></pre></p>"},{"location":"developer-guide/empty-playground/#2-permission-errors","title":"2. Permission Errors","text":"<pre><code>Error: EACCES: permission denied\n</code></pre> <p>Solution: <pre><code># Fix npm permissions (macOS/Linux)\nsudo chown -R $(whoami) ~/.npm\n\n# Or use different cache\nnpx --cache /tmp/npx-cache fmp-create\n</code></pre></p>"},{"location":"developer-guide/empty-playground/#3-network-issues","title":"3. Network Issues","text":"<pre><code>Error: Failed to download templates\n</code></pre> <p>Solution: <pre><code># Check internet connection\n# Try with different registry\nnpx --registry https://registry.npmjs.org/ fmp-create\n</code></pre></p>"},{"location":"developer-guide/empty-playground/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>After project creation:</p> <ol> <li>Understand Project Structure \u2192</li> </ol>"},{"location":"developer-guide/empty-playground/project-structure/","title":"Project Structure Guide","text":"<p>This guide explains the structure of your FM Playground project created with <code>fmp-create</code>.</p>"},{"location":"developer-guide/empty-playground/project-structure/#overview","title":"Overview","text":"<p>Your project follows a microservices architecture with separate services for frontend, backend, and each formal method tool.</p> <pre><code>my-fm-playground/\n\u251c\u2500\u2500 frontend/          # React TypeScript application\n\u251c\u2500\u2500 backend/           # Python Flask/FastAPI server  \n\u251c\u2500\u2500 [tool-name]-api/   # Tool-specific microservices\n\u251c\u2500\u2500 compose.yml        # Docker Compose configuration\n\u2514\u2500\u2500 README.md          # Project documentation\n</code></pre>"},{"location":"developer-guide/empty-playground/project-structure/#frontend-structure","title":"Frontend Structure","text":"<p>The frontend structure is similar to </p> <pre><code>frontend/\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 api/            # API client functions\n\u2502   \u2502   \u251c\u2500\u2500 components/     # Reusable UI components\n\u2502   \u2502   \u251c\u2500\u2500 contexts/       # React contexts for global state\n\u2502   \u2502   \u251c\u2500\u2500 types/          # TypeScript type definitions\n\u2502   \u2502   \u251c\u2500\u2500 atoms.tsx       # Jotai state management\n\u2502   \u2502   \u251c\u2500\u2500 ToolMaps.tsx    # Tool registration and config\n\u2502   \u2502   \u2514\u2500\u2500 App.tsx         # Main application component\n\u251c\u2500\u2500 tools/                  # Tool implementations\n\u2502   \u251c\u2500\u2500 common/             # Shared utilities\n\u2502   \u2514\u2500\u2500 [tools]/            # Based on selection\n\u251c\u2500\u2500 public/                 # Static assets\n\u2502\u2500\u2500 index.html              # HTML template\n\u2502\u2500\u2500 .env.example            # Environment variables example\n\u2502\u2500\u2500 vite.config.ts          # Vite build configuration\n\u2502\u2500\u2500 package.json            # Frontend dependencies\n\u2502\u2500\u2500 tsconfig.json           # TypeScript configuration\n\u2502\u2500\u2500 Dockerfile              # Container configuration\n</code></pre>"},{"location":"developer-guide/empty-playground/project-structure/#key-frontend-files","title":"Key Frontend Files","text":"<ul> <li><code>src/ToolMaps.tsx</code> Central configuration for all tools. If you selected only Alloy and Limboole, it would look like this:</li> </ul> <pre><code>export const fmpConfig: FmpConfig = {\n  title: 'FM Playground',\n  repository: 'https://github.com/fm4se/fm-playground',\n  issues: 'https://github.com/fm4se/fm-playground/issues',\n  tools: {\n    als: { name: 'Alloy', extension: 'als', shortName: 'ALS' },\n    // ... other tools\n  },\n};\n</code></pre> <ul> <li><code>src/atoms.tsx</code> Global state management with Jotai:</li> </ul> <pre><code>export const editorValueAtom = atom('');\nexport const languageAtom = atom('alloy');\nexport const outputAtom = atom('');\nexport const isExecutingAtom = atom(false);\n</code></pre> <ul> <li><code>tools/[tool-name]/</code> Each tool has its own directory with:<ul> <li>Executor: Core execution logic</li> <li>TextMate Grammar: Syntax highlighting</li> <li>Components: Optional UI components</li> </ul> </li> </ul> <p>Note</p> <p>The <code>backend</code> and <code>{tool}-api</code> structures are same as described in the Tailered Playground Structure guide.</p>"},{"location":"developer-guide/empty-playground/project-structure/#service-communication","title":"Service Communication","text":""},{"location":"developer-guide/empty-playground/project-structure/#frontend-backend","title":"Frontend \u2194 Backend","text":"<p>The frontend communicates with the backend using Axios for API requests. For example, to save specifications:</p> <pre><code>// frontend/src/api/playgroundApi.ts\nexport async function saveCode(\n    code: string,\n    check: string,\n    parent: string | null,\n    metadata: Record&lt;string, any&gt; | null\n) {\n    let url = `${API_URL}/save`;\n    const md = {\n        ...metadata,\n        'fmp-version': FMP_VERSION,\n    };\n    let meta = JSON.stringify(md);\n    const response = await axiosAuth.post(url, { code, check, parent, meta });\n    if (response.status === 200) {\n        return response;\n    }\n}\n</code></pre> <p>This function sends a POST request to the backend to save the specification, check type, parent ID, and metadata. The backend save the specifications and returns the permalink. Then this permalink is sent to the tool API for execution. The tool API will fetch the specification from the backend and execute it and return the result.</p>"},{"location":"developer-guide/empty-playground/project-structure/#backend-tool-apis","title":"Backend \u2194 Tool APIs","text":"<p><pre><code>// frontend/tools/nuxmv/nuxmvExecutor.ts\nasync function executeNuxmv(permalink: Permalink) {\n    let url = `/nuxmv/xmv/run/?check=${permalink.check}&amp;p=${permalink.permalink}`;\n    try {\n        const response = await axios.get(url);\n        return response.data;\n    } catch (error) {\n        throw error;\n    }\n}\n</code></pre> This function calls the nuXmv API to execute a specification. It constructs the URL with the permalink and check type, then sends a GET request to the tool API.</p> <p>Note</p> <p>In the above example, the url is relative to the frontend server. This is because the frontend is configured to proxy requests in the <code>vite.config.ts</code> file. For example: </p> <pre><code>proxy: {\n  '/nuxmv': {\n    target: 'http://localhost:8082', // nuXmv API server\n    changeOrigin: true,\n    secure: false,\n    rewrite: (path) =&gt; path.replace(/^\\/nuxmv/, ''),\n  },\n}\n</code></pre>"},{"location":"developer-guide/empty-playground/project-structure/#next-steps","title":"Next Steps","text":"<p>Now that you understand the structure:</p> <ol> <li>Add New Tools \u2192 - Extend the playground with custom tools</li> <li>Deploy \u2192 - Test changes and build for production</li> </ol>"},{"location":"developer-guide/tailered-playground/","title":"Working with Existing Project","text":"<p>This guide covers setting up your FM Playground by forking the existing repository. This approach gives you access to all existing tools and the complete codebase.</p>"},{"location":"developer-guide/tailered-playground/#overview","title":"Overview","text":"<p>The existing project approach is ideal when you:</p> <ul> <li>Want all formal method tools (Alloy, Limboole, nuXmv, SMT/Z3, Spectra) currently available on the FM Playground</li> <li>Need a comprehensive starting point with full features</li> <li>Plan to contribute back to the main project</li> <li>Want to learn from existing tool implementations</li> <li>Prefer to customize existing tools rather than build from scratch</li> </ul>"},{"location":"developer-guide/tailered-playground/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Node.js (version 20 or higher) - Download here</li> <li>Git - Download here</li> <li>GitHub Account - Sign up here</li> <li>Code Editor - VS Code recommended</li> </ul>"},{"location":"developer-guide/tailered-playground/#verify-your-setup","title":"Verify Your Setup","text":"<pre><code># Check Node.js version\nnode --version\n# Should show version 20.x.x or higher\n\n# Check npm version  \nnpm --version\n# Should show version 10.x.x or higher\n\n# Check Git\ngit --version\n# Should show git version\n</code></pre>"},{"location":"developer-guide/tailered-playground/#step-1-fork-the-repository","title":"Step 1: Fork the Repository","text":"<ol> <li> <p>Navigate to the main repository</p> <ul> <li>https://github.com/fm4se/fm-playground</li> </ul> </li> <li> <p>Fork the repository</p> <ul> <li>Click the \"Fork\" button in the top-right corner</li> <li>Choose your GitHub account as the destination</li> <li>Keep the repository name as <code>fm-playground</code> or customize it</li> <li>Ensure \"Copy the main branch only\" is checked</li> <li>Click \"Create fork\"</li> </ul> </li> <li> <p>Verify your fork</p> </li> </ol> <p>You should now see the repository at <code>https://github.com/YOUR_USERNAME/fm-playground</code></p>"},{"location":"developer-guide/tailered-playground/#step-2-clone-your-fork","title":"Step 2: Clone Your Fork","text":"<pre><code># Clone your forked repository\ngit clone https://github.com/YOUR_USERNAME/fm-playground.git\n\n# Navigate to the project directory\ncd fm-playground\n\n# Add the original repository as upstream (for future updates)\ngit remote add upstream https://github.com/fm4se/fm-playground.git\n\n# Verify your remotes\ngit remote -v\n# Should show:\n# origin    https://github.com/YOUR_USERNAME/fm-playground.git (fetch)\n# origin    https://github.com/YOUR_USERNAME/fm-playground.git (push)\n# upstream  https://github.com/fm4se/fm-playground.git (fetch)\n# upstream  https://github.com/fm4se/fm-playground.git (push)\n</code></pre>"},{"location":"developer-guide/tailered-playground/#step-3-environment-variables","title":"Step 3: Environment Variables","text":"<p>The FM Playground uses environment variables for configuration. Each service (frontend, backend, and tools) has its own <code>.env</code> file. You will need to set up these files to run the project locally. An example <code>.env</code> file is provided for each service named <code>.env.example</code>. You can copy these files and update them with your specific configuration.</p> <pre><code># In the project root directory\ncp .env.example .env\n\n# Navigate to frontend directory and copy the example env file and update it\ncd frontend\ncp .env.example .env\n\n# Navigate to backend directory and copy the example env file and update it\ncd ../backend\ncp .env.example .env\n\n# Navigate to each tool directory and copy the example env file and update it\ncd limboole-api\ncp .env.example .env\n# ... repeat for other tools \n\n# Note: Use copy command appropriate for your OS \n#     (e.g., `copy` on Windows, `cp` on Linux/Mac)\n</code></pre>"},{"location":"developer-guide/tailered-playground/#frontend-env-example","title":"Frontend <code>.env</code> example","text":"<pre><code># API URL for the FM Playground backend\nVITE_FMP_API_URL=http://localhost:8000/api\n\n# Version of the FM Playground. This is used for docker images.\nVITE_FMP_VERSION=1.5.0\n</code></pre>"},{"location":"developer-guide/tailered-playground/#backend-env-example","title":"Backend <code>.env</code> example","text":"<pre><code># Frontend URL for the FM Playground\nFRONTEND_URL=\"http://localhost:5173/\" \n\n# API URL for the FM Playground backend\nVITE_FMP_API_URL=http://localhost:8000/api\n\n# Database configuration\n# Note: If you are using PostgreSQL, ensure you have it running and the credentials match\n# If you prefer SQLite, set USE_SQLITE=True\nUSE_SQLITE=True\n# PostgreSQL configuration\nDB_USERNAME=postgres\nDB_PASSWORD=postgres\nDB_NAME=postgres\nDB_HOST=postgres\nDB_PORT=5432\n\n# Secret key for Flask sessions\n# This should be a strong random key for production\nAPP_SECKET_KEY=\"secret-key\"\n# Flask environment (development or production)\nFLASK_ENV=development\n\n# OAuth configuration\n# These are used for Google and GitHub authentication\n# You can create OAuth applications on Google and GitHub to get these credentials\nGOOGLE_CLIENT_ID=\"google-client-id\"\nGOOGLE_CLIENT_SECRET=\"google-client-secret\"\nGITHUB_CLIENT_ID=\"github-client-id\"\nGITHUB_CLIENT_SECRET=\"github-client-secret\"\n</code></pre>"},{"location":"developer-guide/tailered-playground/#tool-env-example","title":"Tool <code>.env</code> example","text":"<p>Each tool may have its own <code>.env</code> file with specific configurations. Two primary variables are common in python-based tools:</p> <p><pre><code># API URL for the FM Playground \nAPI_URL = \"https://play.formal-methods.net/\"\n# Redis URL for caching and task management\nREDIS_URL = \"redis://localhost:6379/0\"\n</code></pre> Other tools may have additional configurations specific to their requirements. Check the <code>.env.example</code> file in each tool's directory for details.</p>"},{"location":"developer-guide/tailered-playground/#step-3-install-dependencies","title":"Step 3: Install Dependencies","text":"<p>The FM Playground consists of both frontend and backend components:</p>"},{"location":"developer-guide/tailered-playground/#frontend-setup","title":"Frontend Setup","text":"<pre><code># Navigate to frontend directory\ncd frontend\n\n# Install dependencies\nnpm install\n</code></pre>"},{"location":"developer-guide/tailered-playground/#backend-setup","title":"Backend Setup","text":"<pre><code># Navigate to backend directory (from project root)\ncd backend\n\n# Install poetry environment (if not already installed)\npoetry install --no-root \n</code></pre>"},{"location":"developer-guide/tailered-playground/#tool-specific-setup","title":"Tool Specific Setup","text":"<p>Each tool runs on its own backend service. Different tools may have different dependencies or setup requirements.</p>"},{"location":"developer-guide/tailered-playground/#alloy","title":"Alloy","text":"<p>Alloy uses a Java backend. Ensure you have Java 17 or higher installed. To install Alloy dependencies, run:</p> <pre><code># Navigate to Alloy tool directory\ncd alloy-api\n\n# Install Alloy dependencies and build the project\n./gradlew clean build -x test\n</code></pre>"},{"location":"developer-guide/tailered-playground/#limboole","title":"Limboole","text":"<p>In the FM Playground, Limboole is running as a WebAssembly module. You can run it directly in the browser without additional setup. Though, for the completeness of the setup, you can also run it as a backend service. We are using FastAPI for the Limboole API.</p> <pre><code># Navigate to Limboole tool directory\ncd limboole-api\n# Install Limboole dependencies\npoetry install --no-root\n</code></pre> <p>Note</p> <p>The <code>limboole-api</code> directory contains both the WebAssembly module and the FastAPI backend service. The WebAssembly module is used by default, but you can switch to the backend service if needed. You need to install the <code>limboole</code> binary and place it in the <code>lib/</code> directory if you want to run the backend service.</p>"},{"location":"developer-guide/tailered-playground/#nuxmv","title":"nuXmv","text":"<p>nuXmv is running as a backend service using FastAPI. </p> <pre><code># Navigate to nuXmv tool directory\ncd nuxmv-api\n# Install nuXmv dependencies\npoetry install --no-root\n\n# Copy the nuXmv binary to the tool directory\n./install_dependencies.sh\n# This will download the nuXmv binary and place it in the correct location\n</code></pre> <p>Note</p> <p>The <code>install_dependencies.sh</code> script downloads the linux binary of nuXmv. If you are on a different OS, you may need to modify this script or manually download the appropriate binary and place it in the <code>lib/</code> directory.</p>"},{"location":"developer-guide/tailered-playground/#smtz3","title":"SMT/Z3","text":"<p>In the FM Playground, SMT/Z3 is running a WebAssembly module. It also has a backend service using FastAPI. In case the WebAssembly module fails, it falls back to the backend service.</p> <pre><code># Navigate to SMT/Z3 tool directory\ncd z3-api\n# Install SMT/Z3 dependencies\npoetry install --no-root\n</code></pre> <p>Note</p> <p>The <code>z3-api</code> directory contains both the WebAssembly module and the FastAPI backend service. The WebAssembly module is used by default, but you can switch to the backend service if needed. You need to install the <code>z3</code> binary if you want to run the backend service.</p>"},{"location":"developer-guide/tailered-playground/#spectra","title":"Spectra","text":"<p>Spectra is running as a backend service using FastAPI. </p> <pre><code># Navigate to Spectra tool directory\ncd spectra-api\n# Install Spectra dependencies\npoetry install --no-root  \n# This will set up the Python environment and install necessary packages for Spectra\n</code></pre>"},{"location":"developer-guide/tailered-playground/#step-4-start-development-environment","title":"Step 4: Start Development Environment","text":"<pre><code># From the project root, you can start both frontend and backend\n\n# Terminal 1: Start frontend\ncd frontend\nnpm run dev\n# Frontend will be available at http://localhost:5173\n\n# Terminal 2: Start backend (in a new terminal)\ncd backend  \npython app.py\n# Backend API will be available at http://localhost:8000\n</code></pre>"},{"location":"developer-guide/tailered-playground/#tool-specific-backend-services","title":"Tool-Specific Backend Services","text":"<p>You can start each tool's backend service in separate terminals:</p> <p>Note</p> <p>Each tool's backend service runs independently. You don't need to run all of them unless you want to test all tools simultaneously.</p> <pre><code># Start Alloy backend\ncd alloy-api\n./gradlew bootRun\n# Alloy backend will be available at http://localhost:8080\n\n# Start Limboole backend\ncd limboole-api\nfastapi run main.py --port 8081\n\n# Start nuXmv backend\ncd nuxmv-api\nfastapi run main.py --port 8082\n\n# Start SMT/Z3 backend\ncd z3-api\nfastapi run main.py --port 8083\n\n# Start Spectra backend\ncd spectra-api\nfastapi run main.py --port 8084\n</code></pre>"},{"location":"developer-guide/tailered-playground/#step-5-verify-your-setup","title":"Step 5: Verify Your Setup","text":"<ol> <li>Check Frontend</li> </ol> <p>Open http://localhost:5173 in your browser. You should see:    - The FM Playground interface    - All the tools listed in the top (Alloy, Limboole, nuXmv, SMT, Spectra)</p> <ol> <li> <p>Test a Tool</p> </li> <li> <p>Select \"Limboole\" from the sidebar</p> </li> <li>Enter a simple boolean formula: <code>(a &amp; b) | c</code></li> <li>Click \"Run\" to test the tool execution</li> <li>Verify you get output</li> </ol> <p>You have successfully set up your FM Playground with all existing tools! You can now start developing new tools, modifying existing ones, or contributing back to the main project.</p>"},{"location":"developer-guide/tailered-playground/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>Now that you have the basic setup running, you can:</p> <ol> <li>Explore the Project Structure \u2192 - Understand the codebase organization</li> <li>Add New Tools \u2192 - Extend the playground with custom tools</li> <li>Deploy \u2192 - Test changes and build for production</li> </ol>"},{"location":"developer-guide/tailered-playground/project-structure/","title":"Project Structure Overview","text":"<p>This guide explains the organization and architecture of the FM Playground codebase to help you understand how components work together.</p>"},{"location":"developer-guide/tailered-playground/project-structure/#complete-project-structure","title":"Complete Project Structure","text":"<p>Your forked FM Playground project contains:</p> <pre><code>fm-playground/\n\u251c\u2500\u2500 frontend/                   # React TypeScript application\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 api/                # API client functions\n\u2502   \u2502   \u251c\u2500\u2500 components/         # Reusable UI components\n\u2502   \u2502   \u251c\u2500\u2500 contexts/           # React contexts for global state\n\u2502   \u2502   \u251c\u2500\u2500 types/              # TypeScript type definitions\n\u2502   \u2502   \u251c\u2500\u2500 atoms.tsx           # Jotai state management\n\u2502   \u2502   \u251c\u2500\u2500 ToolMaps.tsx        # Tool registration and config\n\u2502   \u2502   \u2514\u2500\u2500 App.tsx             # Main application component\n\u2502   \u251c\u2500\u2500 tools/                  # Tool-specific implementations\n\u2502   \u2502   \u251c\u2500\u2500 alloy/              # Alloy tool implementation\n\u2502   \u2502   \u251c\u2500\u2500 limboole/           # Limboole tool implementation\n\u2502   \u2502   \u251c\u2500\u2500 smt/                # SMT/Z3 tool implementation\n\u2502   \u2502   \u251c\u2500\u2500 nuxmv/              # nuXmv tool implementation\n\u2502   \u2502   \u251c\u2500\u2500 spectra/            # Spectra tool implementation\n\u2502   \u2502   \u2514\u2500\u2500 common/             # Shared utilities\n\u2502   \u251c\u2500\u2500 public/                 # Static assets\n\u2502   \u251c\u2500\u2500 .env.example            # Environment variables example\n\u2502   \u251c\u2500\u2500 vite.config.ts          # Vite build configuration\n\u2502   \u251c\u2500\u2500 package.json            # Frontend dependencies\n\u2502   \u2514\u2500\u2500 tsconfig.json           # TypeScript configuration\n\u2502   \u2514\u2500\u2500 Dockerfile              # Container configuration\n\u251c\u2500\u2500 backend/                    # Python Flask server\n\u2502   \u251c\u2500\u2500 db/                     # Database models and queries\n\u2502   \u2502   \u251c\u2500\u2500 models.py           # SQLAlchemy models\n\u2502   \u2502   \u2514\u2500\u2500 db_query.py         # Database query functions\n\u2502   \u251c\u2500\u2500 routes/                 # API routes\n\u2502   \u2502   \u251c\u2500\u2500 authentication.py   # OAuth and session management\n\u2502   \u2502   \u2514\u2500\u2500 playground.py       # Core API endpoints\n\u2502   \u251c\u2500\u2500 utils/                  # Utility functions\n\u2502   \u251c\u2500\u2500 migrations/             # Database migrations\n\u2502   \u251c\u2500\u2500 app.py                  # Main application entry point\n\u2502   \u251c\u2500\u2500 config.py               # Application configuration\n\u2502   \u251c\u2500\u2500 .env.example            # Environment variables example\n\u2502   \u2514\u2500\u2500 pyproject.toml          # Python dependencies (poetry)\n\u251c\u2500\u2500 alloy-api/                  # Alloy backend service (Java)\n\u2502   \u251c\u2500\u2500 src/                    # Java source code\n\u2502   \u251c\u2500\u2500 lib/                    # Alloy JAR files\n\u2502   \u251c\u2500\u2500 build.gradle            # Gradle build configuration\n\u2502   \u2514\u2500\u2500 Dockerfile              # Container configuration\n\u251c\u2500\u2500 limboole-api/               # Limboole backend service (Python)\n\u2502   \u251c\u2500\u2500 limboole.py             # Limboole execution logic\n\u2502   \u251c\u2500\u2500 main.py                 # FastAPI application\n\u2502   \u251c\u2500\u2500 tests/                  # Unit tests\n\u2502   \u251c\u2500\u2500 lib/                    # Limboole binaries\n\u2502   \u251c\u2500\u2500 pyproject.toml          # Poetry configuration\n\u2502   \u2514\u2500\u2500 Dockerfile              # Container configuration\n\u251c\u2500\u2500 nuxmv-api/                  # nuXmv backend service (Python)\n\u2502   \u251c\u2500\u2500 nuxmv.py                # nuXmv execution logic\n\u2502   \u251c\u2500\u2500 main.py                 # FastAPI application\n\u2502   \u251c\u2500\u2500 tests/                  # Unit tests\n\u2502   \u251c\u2500\u2500 lib/                    # nuXmv binaries\n\u2502   \u251c\u2500\u2500 pyproject.toml          # Poetry configuration\n\u2502   \u2514\u2500\u2500 Dockerfile              # Container configuration\n\u251c\u2500\u2500 z3-api/                     # SMT/Z3 backend service (Python)\n\u2502   \u251c\u2500\u2500 z3.py                   # Z3 execution logic\n\u2502   \u251c\u2500\u2500 main.py                 # FastAPI application\n\u2502   \u251c\u2500\u2500 tests/                  # Unit tests\n\u2502   \u251c\u2500\u2500 pyproject.toml          # Poetry configuration\n\u2502   \u2514\u2500\u2500 Dockerfile              # Container configuration\n\u251c\u2500\u2500 spectra-api/                # Spectra backend service (Python)\n\u2502   \u251c\u2500\u2500 spectra.py              # Spectra execution logic\n\u2502   \u251c\u2500\u2500 main.py                 # FastAPI application\n\u2502   \u251c\u2500\u2500 tests/                  # Unit tests\n\u2502   \u251c\u2500\u2500 lib/                    # Spectra binaries\n\u2502   \u251c\u2500\u2500 pyproject.toml          # Poetry configuration\n\u2502   \u2514\u2500\u2500 Dockerfile              # Container configuration\n\u251c\u2500\u2500 .github/                    # GitHub Actions workflows\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u2514\u2500\u2500 ci.yml              # Continuous integration\n\u251c\u2500\u2500 docs/                       # Documentation (this site!)\n\u251c\u2500\u2500 compose.yml                 # Docker Compose configuration\n\u251c\u2500\u2500 .env.example                # Global environment variables\n\u251c\u2500\u2500 .gitignore                  # Git ignore patterns\n\u251c\u2500\u2500 .pre-commit-config.yaml     # Pre-commit hooks configuration\n\u251c\u2500\u2500 python-setup.toml           # Python project metadata\n\u251c\u2500\u2500 update_versions.py          # Version management script\n\u251c\u2500\u2500 CHANGELOG.md                # Release notes\n\u251c\u2500\u2500 LICENSE                     # MIT License\n\u2514\u2500\u2500 README.md                   # Project documentation\n</code></pre>"},{"location":"developer-guide/tailered-playground/project-structure/#architecture-overview","title":"Architecture Overview","text":""},{"location":"developer-guide/tailered-playground/project-structure/#data-flow-diagram","title":"Data Flow Diagram","text":""},{"location":"developer-guide/tailered-playground/project-structure/#frontend-architecture","title":"Frontend Architecture","text":"<p>The frontend is a React TypeScript application built with Vite:</p> <pre><code>Frontend (React + TypeScript)\n\u251c\u2500\u2500 Monaco Editor (Code editing)\n\u251c\u2500\u2500 Material-UI (UI components)\n\u251c\u2500\u2500 Jotai (State management)\n\u251c\u2500\u2500 React Router (Navigation)\n\u2514\u2500\u2500 Tool-specific components\n</code></pre>"},{"location":"developer-guide/tailered-playground/project-structure/#key-files","title":"Key Files","text":"<ul> <li><code>src/api/playgroundApi.ts</code> - API client functions for interacting with the backend. This file contains functions for fetching, saving, authenticating, and managing user sessions.</li> <li><code>src/components/Editor.tsx</code> - Monaco code editor wrapper for React. </li> <li> <p><code>src/components/LspEditor.tsx</code> - This is another wrapper around the Monaco Editor by TypeFox that integrates with Language Server Protocol (LSP) for enhanced code editing features.</p> </li> <li> <p><code>src/ToolMaps.tsx</code> - Central tool configuration and registration. This file maps each tool to its configuration, including API endpoints, file extensions, and language support. <pre><code>// ToolMaps.tsx\nexport const fmpConfig: FmpConfig = {\n  title: 'FM Playground',\n  repository: 'https://github.com/fm4se/fm-playground',\n  issues: 'https://github.com/fm4se/fm-playground/issues',\n  tools: {\n    als: { name: 'Alloy', extension: 'als', shortName: 'ALS' },\n    xmv: { name: 'nuXmv', extension: '.xmv', shortName: 'XMV' },\n    ... // Other tools\n  },\n};\n</code></pre></p> </li> <li> <p><code>src/atoms.tsx</code> - Global state management with Jotai. This file defines global state atoms for managing the current tool, code content, and execution results e.g.:</p> <ul> <li><code>languageAtom</code> - Currently selected tool</li> <li><code>editorValueAtom</code> - Current code content</li> <li><code>outputAtom</code> - Execution results</li> <li>You can add more atoms as needed for additional state management.</li> </ul> </li> <li><code>tools/common/lspWrapperConfig.ts</code> - Configuration for the LSP wrapper, including language server settings and capabilities. For example, this file contains the configuration for the SMT language server, including its capabilities and supported languages.</li> </ul> <pre><code>//lspWrapperConfig.ts\n// Load the worker ports for SMT\nconst smtExtensionFilesOrContents = new Map&lt;string, string | URL&gt;();\nsmtExtensionFilesOrContents.set(`/smt-configuration.json`, smtLanguageConfig);\nsmtExtensionFilesOrContents.set(`/smt-grammar.json`, responseSmtTm);\n\n// Create message channels for each worker\nconst smtChannel = new MessageChannel();\nsmtWorkerPort.postMessage({ port: smtChannel.port2 }, [smtChannel.port2]);\n\n// Create message readers and writers for each channel\nconst smtReader = new BrowserMessageReader(smtChannel.port1);\nconst smtWriter = new BrowserMessageWriter(smtChannel.port1);\n\nreturn {\n  ...,\n  languageClientConfigs: {\n    smt: {\n        languageId: 'smt',\n        connection: {\n            options: {\n                $type: 'WorkerDirect',\n                worker: smtWorkerPort,\n                messagePort: smtChannel.port1,\n            },\n            messageTransports: { reader: smtReader, writer: smtWriter },\n        },\n    },\n  }\n}\n</code></pre> <ul> <li><code>vite.config.ts</code> - Vite build configuration for the frontend application, including plugins and optimization settings. There is a proxy configuration for API calls to the backend services, allowing you to access the tool APIs without CORS. This comes in handy when deploying the application in a containerized environment, where the frontend and backend services are running on different ports or domains.</li> </ul> <pre><code>// vite.config.ts\nproxy: {\n  '/nuxmv': {\n      target: 'http://fmp-nuxmv-api:8080',\n      changeOrigin: true,\n      secure: false,\n      rewrite: (path) =&gt; path.replace(/^\\/nuxmv/, ''),\n  },\n  '/smt': {\n      target: 'http://fmp-z3-api:8080',\n      changeOrigin: true,\n      secure: false,\n      rewrite: (path) =&gt; path.replace(/^\\/smt/, ''),\n  },\n  '/alloy': {\n      target: 'http://fmp-alloy-api:8080',\n      changeOrigin: true,\n      secure: false,\n      rewrite: (path) =&gt; path.replace(/^\\/alloy/, ''),\n  },\n  '/spectra': {\n      target: 'http://fmp-spectra-api:8080',\n      changeOrigin: true,\n      secure: false,\n      rewrite: (path) =&gt; path.replace(/^\\/spectra/, ''),\n  },\n},\n</code></pre>"},{"location":"developer-guide/tailered-playground/project-structure/#backend-architecture","title":"Backend Architecture","text":"<p>The backend follows a microservices architecture:</p> <pre><code>Backend Services\n\u251c\u2500\u2500 Main Backend (Flask)          # Session, auth, data management\n\u251c\u2500\u2500 Z3 API (FastAPI)              # SMT solver\n\u251c\u2500\u2500 Limboole API (FastAPI)        # SAT solver\n\u251c\u2500\u2500 nuXmv API (FastAPI)           # Model checker\n\u251c\u2500\u2500 Spectra API (FastAPI)         # Reactive synthesis\n\u2514\u2500\u2500 Alloy API (Spring Boot)       # Relational modeling\n</code></pre>"},{"location":"developer-guide/tailered-playground/project-structure/#key-files_1","title":"Key Files","text":"<ul> <li><code>app.py</code> - Main Flask application entry point. </li> <li><code>config.py</code> - Application configuration, including logging, rate limiting, database and OAuth settings</li> <li><code>routes/authentication.py</code> - OAuth login, session management</li> <li><code>routes/playground.py</code> - Core API endpoints for saving/loading code, user history etc. Look at the API documentation (#TODO) for more details on the available endpoints and their usage.</li> </ul>"},{"location":"developer-guide/tailered-playground/project-structure/#tool-specific-backend-architecture","title":"Tool-Specific Backend Architecture","text":"<p>Each tool runs as a separate microservice, allowing independent scaling and development. The backend services are implemented using FastAPI for Python-based tools and Spring Boot for the Alloy API.</p>"},{"location":"developer-guide/tailered-playground/project-structure/#alloy-api-java","title":"alloy-api (Java)","text":""},{"location":"developer-guide/tailered-playground/project-structure/#key-files_2","title":"Key Files","text":"<ul> <li><code>src/main/java/.../AlloyInstanceController.java</code> - All the API endpoints for Alloy, including model parsing, execution, and result retrieval. Additionally, a timeout mechanism is implemented to handle long-running Alloy executions.</li> </ul>"},{"location":"developer-guide/tailered-playground/project-structure/#python-based-apis-limboole-nuxmv-smt-spectra","title":"Python-based APIs (Limboole, nuXmv, SMT, Spectra)","text":"<p>The limboole-api, nuXmv-api, z3-api and spectra-api are implemented using FastAPI. They provide endpoints for executing the Limboole tool, managing input files, and retrieving results. These services execute the respective tool binaries in a subprocess and return the results via HTTP.</p>"},{"location":"developer-guide/tailered-playground/project-structure/#key-files_3","title":"Key Files","text":"<ul> <li> <p><code>main.py</code> - FastAPI application entry point, defining API routes and handling requests. Additionally, it includes a redis cache for storing results. For example the nuXmv API- <pre><code>def run_nuxmv(code: str) -&gt; str:\n  if is_redis_available():\n    @cache.cache()\n    def cached_run_nuxmv(code: str) -&gt; str:\n      return process_commands(code)\n    try:\n      return cached_run_nuxmv(code)\n    except Exception:\n      raise HTTPException(status_code=500, detail=\"Error running nuXmv cli\")\n  else:\n    try:\n      return process_commands(code)\n    except Exception:\n      raise HTTPException(status_code=500, detail=\"Error running nuXmv cli\")\n</code></pre></p> </li> <li> <p><code>{tool}.py</code> - Tool-specific logic for executing the tool and processing results. For example, the <code>nuxmv.py</code> file contains the logic for executing the nuXmv tool, parsing the output, and returning the results in a structured format. <pre><code># nuxmv.py\ndef run_nuxmv(code: str) -&gt; str:\n  tmp_file = tempfile.NamedTemporaryFile(mode='w', delete=False)\n  tmp_file.write(code.strip())  \n  tmp_file.close()\n\n  command = [NU_XMV_PATH, \"-dynamic\", tmp_file.name] \n  try:\n    result = subprocess.run(command, capture_output=True, text=True, timeout=60)\n    os.remove(tmp_file.name)\n    if result.returncode != 0:\n      return prettify_error(result.stderr)\n    return prettify_output(result.stdout)+ prettify_error(result.stderr)\n  except subprocess.TimeoutExpired:\n    os.remove(tmp_file.name)\n    return f\"&lt;i style='color: red;'&gt;Timeout: Process timed out after 60 seconds.&lt;/i&gt;\"\n</code></pre></p> </li> <li> <p><code>lib/</code> - Tool binaries and dependencies. This directory contains the tool binaries, such as the Limboole binary, nuXmv binary, and Z3 solver, which are required for executing the respective tools. These binaries are not included in the repository (except Spectra) but can be downloaded from the respective tool websites and placed in this directory.</p> </li> </ul>"},{"location":"developer-guide/tailered-playground/project-structure/#next-steps","title":"\ud83d\udd17 Next Steps","text":"<p>Now that you understand the project structure and architecture, you can:</p> <ol> <li>Add New Tools \u2192 - Extend the playground with custom tools</li> <li>Deploy \u2192 - Test changes and build for production</li> </ol>"},{"location":"development/adding-tools/","title":"Adding New Tools","text":"<p>FM Playground is designed to be extensible, allowing you to add new formal methods tools easily. This guide walks you through the process of integrating a new tool into the platform.</p>"},{"location":"development/adding-tools/#overview","title":"Overview","text":"<p>Each tool in FM Playground consists of:</p> <ul> <li>API Service: A containerized backend service that handles tool execution</li> </ul> <p>Web Assembly (WASM) Tools</p> <p>If your tool has a WebAssembly (WASM) bindings, you can skip the backend service step. WASM tools can be executed directly in the browser without a separate backend. See the WASM Tools Guide for more details.</p> <ul> <li>Frontend Integration: UI components for tool interaction</li> <li>Configuration: Tool metadata and Docker orchestration</li> </ul>"},{"location":"development/adding-tools/#architecture-pattern","title":"Architecture Pattern","text":"<p>Integrating a new tool consists of two main steps:</p> <ol> <li> <p>Frontend Integration: Add the tool to the frontend, allowing users to interact with it through the UI.</p> </li> <li> <p>Backend Service: Create a backend service that executes the tool and expose APIs for interaction. You can develop a new service or use existing APIs running anywhere that can be accessed by the frontend.</p> </li> </ol>"},{"location":"development/adding-tools/#step-1-choose-your-tool","title":"Step 1: Choose Your Tool","text":"<p>For this example, we will integrate nuXmv, since it is already supported in FM Playground and the simplest to set up. However, the same principles apply to any tool you wish to add.</p>"},{"location":"development/adding-tools/#prerequisites","title":"Prerequisites","text":"<p>Before adding a tool, ensure:</p> <ul> <li>The tool can be automated/scripted e.g. via command line or API</li> <li>You understand its input/output formats</li> <li>Licensing allows redistribution (if including binaries)</li> </ul>"},{"location":"development/adding-tools/#step-2-frontend-integration","title":"Step 2: Frontend Integration","text":"<p>First, we will integrate the tool into the FM Playground frontend. The frontend is where users will interact with your tool through the web interface.</p>"},{"location":"development/adding-tools/#overview_1","title":"Overview","text":"<p>The easiest way to add a new tool is by using <code>fmp-tool</code> CLI. <code>fmp-tool</code> is a command-line interface (CLI) that generates boilerplate code for new formal method tools. It creates all necessary files and provides integration instructions to add your tool to the FM Playground.</p>"},{"location":"development/adding-tools/#create-a-new-tool","title":"Create a New Tool","text":"<pre><code># Go to the frontend directory\ncd frontend\n# Create a new tool configuration\nnpx fmp-tool\n</code></pre> <p>Warning</p> <p>You need to run this command in the <code>frontend</code> directory. Otherwise, the configuration will not be created correctly.</p> <p>This command will prompt you for the tool name, description, and other metadata. It will generate a new directory under <code>frontend/tools/</code> with the necessary files.</p> <pre><code>$ npx fmp-tool\n\n\ud83d\udee0\ufe0f  FM Tool Generator\nCreating a new formal methods tool for fm-playground\n\n? What is the name of your tool? (e.g., nuxmv, z3, alloy) nuxmv\n? Display name for the tool: (nuxmv) nuXmv\nool ID (uppercase, used in maps): (NUXMV) NUXMV\n? File extension for the language: (nuxmv) xmv\n? Does this tool require an API endpoint? (Y/n) Y\n? API endpoint path: (/nuxmv) /xmv\n? Output component type: (Use arrow keys)\n\u276f TextualOutput \n  CustomOutput \n? Create additional input component (for options)? (y/N) N\n? Create additional output component (for extra UI elements)? (y/N) Y\n\n\ud83d\udccb Configuration:\nTool Name: nuxmv\nTool ID: NUXMV\nFile Extension: xmv\nTarget Path: ./tools\n\n? Proceed with creating the tool? (Y/n) Y\nLooking for ToolMaps.tsx at default path: src/ToolMaps.tsx\n\u2705 Successfully updated ToolMaps.tsx with nuxmv tool\n\n\u2705 Tool created successfully!\n\n\ud83d\udcdd Next steps:\n1. Update ToolMaps.tsx to register your new tool (see TOOLMAPS_INTEGRATION.md)\n2. Add language configuration to the monaco editor setup if needed\n3. Implement the API endpoint if needed\n4. Customize the generated files to fit your tool's requirements\n</code></pre>"},{"location":"development/adding-tools/#configuration-options","title":"Configuration Options","text":""},{"location":"development/adding-tools/#tool-name","title":"Tool Name","text":"<ul> <li>Purpose: Internal identifier for your tool</li> <li>Format: Lowercase, alphanumeric, underscores allowed</li> <li>Examples: <code>prolog</code>, <code>coq</code>, <code>lean</code>, <code>isabelle</code></li> <li>Used for: File names, directory names, internal references</li> </ul>"},{"location":"development/adding-tools/#display-name","title":"Display Name","text":"<ul> <li>Purpose: User-facing name shown in the interface</li> <li>Format: Any readable string</li> <li>Examples: <code>Prolog Interpreter</code>, <code>Coq Proof Assistant</code>, <code>Lean 4</code></li> <li>Used for: UI labels, component names</li> </ul>"},{"location":"development/adding-tools/#tool-id","title":"Tool ID","text":"<ul> <li>Purpose: Uppercase identifier for tool mappings</li> <li>Format: Uppercase letters, underscores allowed</li> <li>Examples: <code>PROLOG</code>, <code>COQ</code>, <code>LEAN_4</code></li> <li>Used for: ToolMaps.tsx keys, internal configurations, permalink <code>check</code> values, database entries </li> </ul>"},{"location":"development/adding-tools/#file-extension","title":"File Extension","text":"<ul> <li>Purpose: File extension for your tool's language</li> <li>Format: Lowercase, no dot prefix</li> <li>Examples: <code>pl</code>, <code>v</code>, <code>lean</code>, <code>thy</code></li> <li>Used for: Monaco editor language association, file operations</li> </ul>"},{"location":"development/adding-tools/#api-endpoint","title":"API Endpoint","text":"<ul> <li>Purpose: Backend endpoint for tool execution</li> <li>Default: <code>/{tool-name}</code></li> <li>Examples: <code>/prolog</code>, <code>/coq/verify</code>, <code>/lean/check</code></li> <li>Used for: Frontend-backend communication</li> </ul> <p>Note</p> <p>The <code>fmp-tool</code> CLI will create a default API endpoint for you. If your tool requires a custom API, you can modify the generated code later.</p>"},{"location":"development/adding-tools/#output-component-type","title":"Output Component Type","text":"<ul> <li>TextualOutput: For tools that produce plain text output</li> <li>CustomOutput: Advanced formatting with custom components, e.g., graphs, tables, etc.</li> </ul>"},{"location":"development/adding-tools/#additional-components","title":"Additional Components","text":"<ul> <li>Input Component: For tool-specific options and parameters</li> <li>Output Component: For specialized result visualization</li> </ul>"},{"location":"development/adding-tools/#generated-file-structure","title":"Generated File Structure","text":"<p>After running <code>fmp-tool</code>, you'll get:</p> <pre><code>frontend/src/tools/your-tool/\n\u251c\u2500\u2500 nuxmvExecutor.ts           # Core execution logic\n\u251c\u2500\u2500 nuxmvTextMateGrammar.ts    # Syntax highlighting\n\u2514\u2500\u2500 nuxmvOutput.tsx            # Output component (optional)\n</code></pre>"},{"location":"development/adding-tools/#understanding-generated-files","title":"Understanding Generated Files","text":""},{"location":"development/adding-tools/#tool-executor","title":"Tool Executor","text":"<p>This file contains the logic to execute your tool. It typically includes an API call to your backend service, handling the tool's input and output. And export a function that can be called from the frontend to execute the tool.</p> nuxmvExecutor.ts<pre><code>async function executenuxmv(permalink: Permalink) {\n  let url = `/nuxmv/run/?check=${permalink.check}&amp;p=${permalink.permalink}`;\n  const response = await axios.get(url);\n  return response.data;\n}\n\nexport const executenuxmvTool = async () =&gt; {\n  // Get the contents of the editor, selected language, and permalink\n  const editorValue = jotaiStore.get(editorValueAtom);\n  const language = jotaiStore.get(languageAtom);\n  const permalink = jotaiStore.get(permalinkAtom);\n\n  // Save the code to the database\n  // This will return the permalink object with the permalink and check\n  const response = await saveCode(editorValue, language.short, permalink.permalink || null, null);\n  if (response) {\n    jotaiStore.set(permalinkAtom, response.data);\n  } else {\n    jotaiStore.set(\n      outputAtom,\n      `error handling ...`\n    );\n    jotaiStore.set(isExecutingAtom, false);\n    return;\n  }\n\n  // With the returned permalink, we can now execute the tool\n  try {\n    const res = await executenuxmv(response?.data);\n    jotaiStore.set(outputAtom, res);\n  } catch (err: any) {\n    jotaiStore.set(\n      outputAtom,\n      `error handling ...`\n    );\n  }\n  jotaiStore.set(isExecutingAtom, false);\n};\n</code></pre> <ul> <li> <p>Line 2: We define a proxy in the <code>vite.config.ts</code> file to redirect requests to the backend service. This allows us to call the API without worrying about CORS issues. You can modify the URL to point to your backend service if it's hosted elsewhere.</p> </li> <li> <p>Lines 9-11: The <code>executenuxmvTool</code> function retrieves the current editor value, language, and permalink from the state. It then saves the code to the database and executes the tool using the permalink.</p> </li> <li> <p>Line 15: Makes an API call to the backend service to save the specification and get the gereated permalink. This permalink is then used to execute the tool.</p> </li> <li> <p>Line 29: Calling the <code>executenuxmv</code> function with the permalink to execute the tool and retrieve the results.</p> </li> </ul>"},{"location":"development/adding-tools/#textmate-grammar","title":"TextMate Grammar","text":"<p>This file defines the syntax highlighting rules for your tool's language using TextMate grammar. It allows the Monaco editor to provide proper syntax highlighting when users write code in your tool's language.</p> <p>You can refer to the Monaco Editor documentation for details on how to define your language's syntax.</p> nuxmvTextMateGrammar.ts<pre><code>// Language configuration for Monaco Editor\nexport const nuxmvConf: languages.LanguageConfiguration = {\n  brackets: [\n    ['{', '}'],\n    ... // other brackets\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    ... // other pairs\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    ... // other pairs\n  ]\n};\n\n// TextMate grammar for syntax highlighting\nexport const nuxmvLang: languages.IMonarchLanguage = {\n  keywords: ['DEFINE','E', 'EBF', 'EBG', 'EF', 'EG','F'],\n  operators: [':', '=', '-&gt;', '&lt;-&gt;', '\u2200', '\u2203'],\n  symbols: /[=&gt;&lt;!~?:&amp;|+\\-*\\/\\^%]+/,\n\n  tokenizer: {\n    root: [\n      [/[a-zA-Z_$][\\w$]*/, {\n        cases: {\n          '@keywords': 'keyword',\n          '@default': 'identifier'\n        }\n      }],\n      [/\\d+/, 'number'],\n      [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n      [/\"/, 'string', '@string']\n    ],\n    // ... more tokenization rules\n  }\n};\n</code></pre> <ul> <li>Line 2: Defines the language configuration for Monaco Editor, including brackets and auto-closing pairs.</li> <li>Line 18: Defines the TextMate grammar for syntax highlighting, including keywords, operators, and tokenization rules.</li> </ul>"},{"location":"development/adding-tools/#output-component","title":"Output Component","text":"<p>For <code>? Output component type:</code>, if you selected <code>CustomOutput</code>, instead of a simple text output, a new file <code>nuxmvOutput.tsx</code> will be created. This file can contain custom React components to display the output of your tool in a more user-friendly way.</p>"},{"location":"development/adding-tools/#additional-input-and-output-components","title":"Additional Input and Output Components","text":"<p>If you selected <code>Y</code> for creating an additional input and/or output component, a new file <code>nuxmvInput.tsx</code>and/or <code>nuxmvOutput.tsx</code> will be created. These files can contain custom React components to handle tool-specific input options and display results in a structured way.</p> <p>For example, we choose to create an additional output component, <code>nuxmvOutput.tsx</code> might look like this: nuxmvOutput.tsx<pre><code>const nuxmvOutput: React.FC = () =&gt; {\n  return (\n    &lt;MDBContainer className=\"p-3\"&gt;\n      &lt;MDBRow&gt;\n        &lt;MDBCol md=\"12\"&gt;\n          &lt;div className=\"border rounded p-3 bg-light\"&gt;\n            &lt;h6 className=\"mb-2\"&gt;nuxmv Information&lt;/h6&gt;\n          &lt;/div&gt;\n        &lt;/MDBCol&gt;\n      &lt;/MDBRow&gt;\n    &lt;/MDBContainer&gt;\n  );\n};\nexport default nuxmvOutput;\n</code></pre></p>"},{"location":"development/adding-tools/#toolmapstsx-integration","title":"ToolMaps.tsx Integration","text":"<p>The <code>ToolMaps.tsx</code> file serves as the central registry that connects all tool components and configurations within the FM Playground frontend. When you generate a new tool using the <code>fmp-tool</code> CLI, this file is automatically updated to include your tool's configuration. Understanding this integration is crucial for customizing tool behavior and troubleshooting integration issues.</p> <p>The <code>fmp-tool</code> CLI automatically updates the <code>ToolMaps.tsx</code> file with the new tool configuration, but it's important to understand what each mapping does:</p> ToolMaps.tsx<pre><code>import TextualOutput from '@/components/Playground/TextualOutput';\nimport { nuxmvConf, nuxmvLang } from '@/../tools/nuxmv/nuxmvTextMateGrammar';\nimport { executenuxmvTool } from '@/../tools/nuxmv/nuxmvExecutor';\nimport nuxmvOutput from '@/../tools/nuxmv/nuxmvOutput';\nimport type { FmpConfig } from '@/types';\n\nexport const additionalInputAreaUiMap: Record&lt;string, React.FC&lt;any&gt;&gt; = {};\nexport const additonalOutputAreaUiMap: Record&lt;string, React.FC&lt;any&gt;&gt; = {\n  XMV: nuxmvOutput,\n};\nexport const toolExecutionMap: Record&lt;string, () =&gt; void&gt; = {\n  XMV: executenuxmvTool,\n};\nexport const toolOutputMap: Record&lt;string, React.FC&lt;any&gt;&gt; = {\n  XMV: TextualOutput,\n};\n\nexport const languageConfigMap: Record&lt;string, { tokenProvider: any; configuration: any }&gt; = {\n  XMV: { tokenProvider: nuxmvLang, configuration: nuxmvConf },\n};\n\n// Configuration for LSP (Language Server Protocol) support by tool\nexport const lspSupportMap: Record&lt;string, boolean&gt; = {\n  XMV: false,\n};\n\nexport const fmpConfig: FmpConfig = {\n  title: 'FM Playground',\n  repository: 'https://github.com/se-buw/fm-playground',\n  issues: 'https://github.com/se-buw/fm-playground/issues',\n  tools: {\n    nuxmv: { name: 'nuxmv', extension: 'XMV', shortName: 'XMV' },\n  },\n};\n</code></pre>"},{"location":"development/adding-tools/#understanding-the-mapping-objects","title":"Understanding the Mapping Objects","text":"<p>1. <code>additionalInputAreaUiMap</code></p> <ul> <li>Purpose: Maps tool IDs to custom input components that appear below the code editor</li> <li>Usage: For tools requiring specific configuration options, parameter inputs, or command-line flags</li> <li>Example: Alloy's command selection, Spectra's CLI options</li> <li>When to use: When your tool needs user-configurable parameters before execution</li> </ul> <p>2. <code>additonalOutputAreaUiMap</code></p> <ul> <li>Purpose: Maps tool IDs to additional UI components that appear in the output area</li> <li>Usage: For supplementary information, tool credits, copyright notices, or interactive result exploration</li> <li>Example: nuXmv's copyright notice, Alloy's instance navigation controls</li> <li>When to use: When you need to display non-result information alongside tool output</li> </ul> <p>3. <code>toolExecutionMap</code></p> <ul> <li>Purpose: Maps tool IDs to their execution functions</li> <li>Critical: This is the core mapping that enables tool execution</li> <li>Function signature: <code>() =&gt; void</code> - typically async functions that handle the complete execution flow</li> <li>Responsibility: Manages editor content saving, API calls, result handling, and error management</li> </ul> <p>4. <code>toolOutputMap</code></p> <ul> <li>Purpose: Maps tool IDs to their primary output rendering components</li> <li>Default: <code>TextualOutput</code> for simple text-based results</li> <li>Custom options: <code>AlloyOutput</code> for graph visualization, custom components for structured data</li> <li>When to customize: When tool results require special formatting, visualization, or interaction</li> </ul> <p>5. <code>languageConfigMap</code></p> <ul> <li>Purpose: Configures Monaco Editor language support for each tool</li> <li> <p>Components: </p> <ul> <li><code>tokenProvider</code>: Defines syntax highlighting rules (TextMate grammar)</li> <li><code>configuration</code>: Sets language behavior (brackets, auto-completion, indentation)</li> </ul> </li> <li> <p>Impact: Directly affects the code editing experience and syntax highlighting quality</p> </li> </ul> <p>6. <code>lspSupportMap</code></p> <ul> <li>Purpose: Indicates whether a tool supports Language Server Protocol features</li> <li>Features enabled: Real-time error checking, intelligent auto-completion, semantic highlighting</li> <li>Current support: Limboole, SMT (partial), Spectra</li> <li>Development: New tools can implement LSP for enhanced editing experience</li> </ul> <p>7. <code>fmpConfig</code></p> <ul> <li>Purpose: Central configuration object defining all available tools</li> <li> <p>Structure: Each tool entry contains:</p> <ul> <li><code>name</code>: Internal identifier for the tool</li> <li><code>extension</code>: File extension and language identifier for Monaco Editor</li> <li><code>shortName</code>: Uppercase identifier used in all mapping objects</li> </ul> </li> <li> <p>Consistency: The <code>shortName</code> must match across all mapping objects for proper tool registration</p> </li> </ul>"},{"location":"development/adding-tools/#manual-configuration","title":"Manual Configuration","text":"<p>While <code>fmp-tool</code> automates most of the integration, you may need to manually adjust configurations for advanced features:</p> ToolMaps.tsx<pre><code>// Adding custom input component\nexport const additionalInputAreaUiMap: Record&lt;string, React.FC&lt;any&gt;&gt; = {\n  NUXMV: NuxmvModelOptions, // Custom component for model checking options\n};\n\n// Enabling LSP support (requires separate LSP server implementation)\nexport const lspSupportMap: Record&lt;string, boolean&gt; = {\n  NUXMV: true, // Enable after implementing LSP server\n};\n\n// Using custom output renderer\nexport const toolOutputMap: Record&lt;string, React.FC&lt;any&gt;&gt; = {\n  NUXMV: NuxmvGraphOutput, // Custom component for counterexample visualization\n};\n</code></pre>"},{"location":"development/adding-tools/#troubleshooting-integration","title":"Troubleshooting Integration","text":"<p>Common Issues:</p> <ol> <li>Tool not appearing in interface: Check that the tool is properly added to <code>fmpConfig.tools</code></li> <li>Execution not working: Verify <code>toolExecutionMap</code> contains the correct function reference</li> <li>Syntax highlighting missing: Ensure <code>languageConfigMap</code> includes both <code>tokenProvider</code> and <code>configuration</code></li> <li>Custom components not loading: Check import statements and component exports</li> </ol> <p>Validation Steps:</p> <ol> <li>Verify all imports resolve correctly</li> <li>Ensure tool ID consistency across all mappings</li> <li>Test that execution function is properly exported</li> <li>Confirm language grammar is syntactically correct</li> </ol> <p>This mapping system provides a clean separation between tool logic and platform integration, enabling the FM Playground to support diverse formal methods tools while maintaining a consistent user experience.</p>"},{"location":"development/adding-tools/#step-3-create-the-api-service","title":"Step 3: Create the API Service","text":"<p>We will create a new FastAPI service that wraps the nuXmv tool, allowing it to be executed via HTTP requests.</p> <p>Note</p> <p>If you have an existing API for the tool, you can skip this step and directly integrate it into the frontend.</p> <p>We will utilize poetry to manage our Python dependencies and create a FastAPI service that will execute the nuXmv tool.</p> <pre><code># Install Poetry if not already installed\npoetry new nuxmv-api\n</code></pre> <p>This will create a new directory <code>nuxmv-api</code> with the following structure:</p> <pre><code>nuxmv-api/\n\u251c\u2500\u2500 nuxmv_api/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 README.md\n</code></pre> <p>Now, we will add the necessary dependencies and implement the service.</p>"},{"location":"development/adding-tools/#update-pyprojecttoml","title":"Update <code>pyproject.toml</code>","text":"<pre><code>[tool.poetry.dependencies]\npython = \"^3.10\" # Adjust based on your Python version\nfastapi = {extras = [\"standard\"], version = \"^0.115.2\"}\nhttpx = \"^0.27.0\"\npytest = \"^8.3.2\"\npytest-asyncio = \"^0.23.8\"\nrequests = \"^2.32.3\"\nuvicorn = \"^0.30.5\"\nredis = \"^5.0.8\"\npython-dotenv = \"^1.0.1\"\npython-redis-cache = \"^4.0.1\"\n</code></pre> <p>Install the dependencies:</p> <pre><code>cd nuxmv-api\npoetry install\n</code></pre>"},{"location":"development/adding-tools/#download-nuxmv","title":"Download nuXmv","text":"<p>Create a <code>lib/</code> directory in the <code>nuxmv-api</code> folder to store the nuXmv binary:</p> <pre><code>mkdir nuxmv_api/lib\n</code></pre> <p>Download the nuXmv binary and place the executables in the <code>nuxmv_api/lib/</code> directory. Ensure the binary is executable:</p> <pre><code>chmod +x nuxmv_api/lib/nuxmv\n</code></pre>"},{"location":"development/adding-tools/#create-the-fastapi-service","title":"Create the FastAPI Service","text":"<p>Create <code>nuxmv_api/main.py</code>:</p> <pre><code># nuxmv_api/main.py\n# ... \napp = FastAPI()\n\n# Route to run nuXmv\n@app.get(\"/xmv/run/\", response_model=None)\ndef code(check: str, p: str):\n    code = get_code_by_permalink(check, p)\n    try:\n        return run_nuxmv(code)\n    except Exception:\n        raise HTTPException(status_code=500, detail=\"Error running code\")\n</code></pre> <p>This service will expose an endpoint <code>/xmv/run/</code> that accepts a <code>check</code> and <code>p</code> parameter, retrieves the code associated with those parameters, and runs the nuXmv tool on it. For the sake of this example, we will assume that <code>get_code_by_permalink</code> is a function that retrieves the code based on the provided parameters. For a complete implementation, see the nuXmv API</p>"},{"location":"development/adding-tools/#implement-the-tool-execution-logic","title":"Implement the Tool Execution Logic","text":"<p>Create <code>nuxmv_api/nuxmv.py</code>:</p> <p><pre><code>def run_nuxmv(code: str) -&gt; str:\n    tmp_file = tempfile.NamedTemporaryFile(mode=\"w\", delete=False)\n    tmp_file.write(code.strip())\n    tmp_file.close()\n\n    NU_XMV_PATH = os.path.join(os.path.dirname(__file__), \"lib\", \"nuxmv\")\n    command = [NU_XMV_PATH, \"-dynamic\", tmp_file.name]\n    try:\n        result = subprocess.run(command, capture_output=True, text=True, timeout=60)\n        os.remove(tmp_file.name)\n        if result.returncode != 0:\n            return prettify_error(result.stderr)\n        return prettify_output(result.stdout) + prettify_error(result.stderr)\n    except subprocess.TimeoutExpired:\n        os.remove(tmp_file.name)\n        return \"&lt;i style='color: red;'&gt;Timeout: Process timed out after 60 seconds.&lt;/i&gt;\"\n</code></pre> This function creates a temporary file with the provided code, runs the nuXmv tool on it, and returns the output. It handles errors and timeouts gracefully.</p> <p>Warning</p> <p>This is an example implementation with minimal effort to keep it simple. In a production environment, you should handle security, input validation, and error handling more robustly. Our primary focus is on demonstrating the integration pattern in the FM Playground.</p>"},{"location":"development/adding-tools/#best-practices","title":"Best Practices","text":""},{"location":"development/adding-tools/#security","title":"Security","text":"<ul> <li>Timeout Execution: Always set timeouts for tool execution</li> <li>Resource Limits: Use Docker resource constraints</li> <li>Input Validation: Sanitize user inputs</li> <li>Sandboxing: Run tools in isolated containers</li> </ul>"},{"location":"development/adding-tools/#performance","title":"Performance","text":"<ul> <li>Caching: Cache tool binaries and dependencies</li> <li>Parallel Execution: Design for concurrent requests</li> <li>Resource Management: Clean up temporary files</li> </ul>"},{"location":"development/adding-tools/#related-documentation","title":"Related Documentation","text":"<ul> <li>Development Guide - Advanced development patterns</li> <li>API Reference - Backend API documentation</li> <li>Contributing Guide - Contributing your tool back to the project</li> </ul>"},{"location":"development/api-reference/","title":"API Reference","text":"<p>This document provides detailed information about the FM Playground API endpoints, request/response formats, and usage examples based on the actual implementation.</p>"},{"location":"development/api-reference/#base-urls","title":"Base URLs","text":"<pre><code>Backend API (Production): https://play.formal-methods.net/api\nBackend API (Development): http://localhost:8000/api\n\nTool APIs (Development):\n- Z3 API: http://localhost:8001\n- Limboole API: http://localhost:8002  \n- nuXmv API: http://localhost:8003\n- Spectra API: http://localhost:8004\n- Alloy API: http://localhost:8005\n</code></pre>"},{"location":"development/api-reference/#authentication","title":"Authentication","text":"<p>The FM Playground uses session-based authentication with OAuth2 providers.</p>"},{"location":"development/api-reference/#oauth2-authentication","title":"OAuth2 Authentication","text":""},{"location":"development/api-reference/#login-endpoints","title":"Login Endpoints","text":"<p><pre><code>GET /api/login/google\nGET /api/login/github\n</code></pre> Redirects to OAuth provider for authentication.</p>"},{"location":"development/api-reference/#oauth-callback","title":"OAuth Callback","text":"<p><pre><code>GET /api/auth/google\nGET /api/auth/github\n</code></pre> OAuth callback endpoints that process the authentication response.</p>"},{"location":"development/api-reference/#session-management","title":"Session Management","text":""},{"location":"development/api-reference/#check-session-status","title":"Check Session Status","text":"<pre><code>GET /api/check_session\n</code></pre> <p>Response (200 OK): <pre><code>{\n  \"message\": \"Found user\",\n  \"id\": \"google_123456789\",\n  \"email\": \"user@example.com\"\n}\n</code></pre></p> <p>Response (401 Unauthorized): <pre><code>{\n  \"error\": \"401 Unauthorized\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#get-current-user-profile","title":"Get Current User Profile","text":"<pre><code>GET /api/@me\n</code></pre> <p>Response (200 OK): <pre><code>{\n  \"message\": \"Found user\",\n  \"id\": \"github_987654321\",\n  \"email\": \"user@example.com\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#logout","title":"Logout","text":"<pre><code>GET /api/logout\n</code></pre> <p>Response (200 OK): <pre><code>{\n  \"message\": \"Logged out successfully\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#core-backend-api-endpoints","title":"Core Backend API Endpoints","text":""},{"location":"development/api-reference/#specification-management","title":"Specification Management","text":""},{"location":"development/api-reference/#save-specification","title":"Save Specification","text":"<pre><code>POST /api/save\nContent-Type: application/json\n\n{\n  \"code\": \"string\",           // The source Specification\n  \"check\": \"string\",          // Tool type (SAT, SMT, XMV, SPECTRA, ALS)\n  \"parent\": \"string|null\",    // Parent permalink for versioning\n  \"meta\": \"object|null\"       // Additional metadata\n}\n</code></pre>"},{"location":"development/api-reference/#get-specification-by-permalink","title":"Get Specification by Permalink","text":"<pre><code>GET /api/permalink/?p={permalink}\n</code></pre> <p>Parameters: - <code>p</code> (required): The permalink identifier</p> <p>Response (200 OK): <pre><code>{\n  \"code\": \"(assert (&gt; x 0))\\n(check-sat)\"\n}\n</code></pre></p> <p>Response (404 Not Found): Returns 404 if permalink doesn't exist.</p>"},{"location":"development/api-reference/#user-history-management","title":"User History Management","text":""},{"location":"development/api-reference/#get-user-history","title":"Get User History","text":"<pre><code>GET /api/histories?page={page}\n</code></pre> <p>Parameters: - <code>page</code> (optional): Page number (default: 1)</p> <p>Authentication: Required</p> <p>Response (200 OK): <pre><code>{\n  \"history\": [\n    {\n      \"id\": 123,\n      \"permalink\": \"happy-bright-dog-moon\",\n      \"check_type\": \"SMT\",\n      \"time\": \"2024-01-15T10:30:00Z\",\n      \"meta\": null\n    }\n  ],\n  \"has_more_data\": true\n}\n</code></pre></p> <p>Response (401 Unauthorized): <pre><code>{\n  \"result\": \"fail\",\n  \"message\": \"You are not logged in.\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#unlink-history-item","title":"Unlink History Item","text":"<pre><code>PUT /api/unlink-history\nContent-Type: application/json\n\n{\n  \"id\": 123\n}\n</code></pre> <p>Authentication: Required</p> <p>Response (200 OK): <pre><code>{\n  \"result\": \"success\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#get-specification-by-data-id","title":"Get Specification by Data ID","text":"<pre><code>GET /api/code/{data_id}\n</code></pre> <p>Authentication: Required</p> <p>Response (200 OK): <pre><code>{\n  \"result\": \"success\",\n  \"code\": \"(assert (&gt; x 0))\",\n  \"check\": \"SMT\",\n  \"permalink\": \"happy-bright-dog-moon\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#search-user-history","title":"Search User History","text":"<pre><code>GET /api/search?q={query}\n</code></pre> <p>Parameters: - <code>q</code> (required): Search query</p> <p>Authentication: Required</p> <p>Response (200 OK): <pre><code>{\n  \"history\": [\n    {\n      \"id\": 123,\n      \"permalink\": \"happy-bright-dog-moon\",\n      \"check_type\": \"SMT\",\n      \"time\": \"2024-01-15T10:30:00Z\"\n    }\n  ],\n  \"has_more_data\": false\n}\n</code></pre></p>"},{"location":"development/api-reference/#get-history-by-permalink","title":"Get History by Permalink","text":"<pre><code>GET /api/history/{permalink}\n</code></pre> <p>Authentication: Required</p> <p>Response (200 OK): <pre><code>{\n  \"history\": {\n    \"id\": 123,\n    \"permalink\": \"happy-bright-dog-moon\",\n    \"check_type\": \"SMT\",\n    \"time\": \"2024-01-15T10:30:00Z\",\n    \"meta\": null\n  }\n}\n</code></pre></p>"},{"location":"development/api-reference/#user-data-management","title":"User Data Management","text":""},{"location":"development/api-reference/#download-user-data","title":"Download User Data","text":"<pre><code>GET /api/download-user-data\n</code></pre> <p>Authentication: Required</p> <p>Response (200 OK): <pre><code>{\n  \"email\": \"user@example.com\",\n  \"data\": [\n    {\n      \"id\": 123,\n      \"permalink\": \"happy-bright-dog-moon\",\n      \"code\": \"(assert (&gt; x 0))\",\n      \"check_type\": \"SMT\",\n      \"time\": \"2024-01-15T10:30:00Z\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"development/api-reference/#delete-user-profile","title":"Delete User Profile","text":"<pre><code>DELETE /api/delete-profile\n</code></pre> <p>Authentication: Required</p> <p>Response (200 OK): <pre><code>{\n  \"result\": \"success\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#metadata-and-feedback","title":"Metadata and Feedback","text":""},{"location":"development/api-reference/#get-metadata","title":"Get Metadata","text":"<pre><code>GET /api/metadata?check={check_type}&amp;p={permalink}\n</code></pre> <p>Parameters: - <code>check</code> (required): Tool type (SAT, SMT, XMV, SPECTRA, ALS) - <code>p</code> (required): Permalink identifier</p> <p>Response (200 OK): <pre><code>{\n  \"permalink\": \"happy-bright-dog-moon\",\n  \"check_type\": \"SMT\",\n  \"created_at\": \"2024-01-15T10:30:00Z\",\n  \"meta\": null\n}\n</code></pre></p>"},{"location":"development/api-reference/#submit-feedback","title":"Submit Feedback","text":"<pre><code>POST /api/feedback\nContent-Type: application/json\n\n{\n  \"rating\": 5,\n  \"comment\": \"Great tool!\"\n}\n</code></pre> <p>Response (200 OK): <pre><code>{\n  \"result\": \"success\"\n}\n</code></pre></p> <p>Response (413 Payload Too Large): <pre><code>{\n  \"result\": \"The comment is too large.\"\n}\n</code></pre></p> <p>API versioning follows semantic versioning principles with backward compatibility maintained.</p>"},{"location":"development/deployment/","title":"Deployment Guide","text":"<p>This guide shows you how to deploy the FM Playground for development and production environments.</p>"},{"location":"development/deployment/#prerequisites","title":"Prerequisites","text":"<p>If you haven't already setup the project, please follow the setup guide of either the Tailered or Empty playground.</p>"},{"location":"development/deployment/#quick-start","title":"Quick Start","text":""},{"location":"development/deployment/#create-environment-configuration","title":"Create Environment Configuration","text":"<p>Create a <code>.env</code> file in the project root:</p> <pre><code># Database Configuration\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=postgres\nPOSTGRES_DB=postgres\nDATABASE_URL=postgresql://postgres:postgres@postgres:5432/postgres\n\n# Flask Configuration\nFLASK_ENV=development\nSECRET_KEY=your-secret-key-here\nJWT_SECRET_KEY=your-jwt-secret-here\n\n# Redis Configuration\nREDIS_URL=redis://redis:6379/0\n\n# API Configuration\nAPI_URL=http://fmp-backend:8000/\n\n# Frontend Configuration\nVITE_FMP_API_URL=http://127.0.0.1:8000/api\n</code></pre>"},{"location":"development/deployment/#create-docker-network","title":"Create Docker Network","text":"<pre><code>docker network create my_network\n</code></pre>"},{"location":"development/deployment/#start-the-application","title":"Start the Application","text":"<pre><code># Start all services\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f\n\n# Check service status\ndocker-compose ps\n</code></pre>"},{"location":"development/deployment/#access-the-application","title":"Access the Application","text":"<ul> <li>Frontend: http://localhost:5173</li> <li>Backend API: http://localhost:8000</li> <li>PgAdmin: http://localhost:5050 (admin tools)</li> <li>RedisInsight: http://localhost:5540 (Redis management)</li> </ul>"},{"location":"development/deployment/#service-architecture","title":"Service Architecture","text":""},{"location":"development/deployment/#core-services","title":"Core Services","text":""},{"location":"development/deployment/#frontend-fmp-frontend","title":"Frontend (<code>fmp-frontend</code>)","text":"<pre><code>frontend:\n  build: \n    context: ./frontend\n    args:\n      VITE_FMP_API_URL: http://127.0.0.1:8000/api\n  container_name: fmp-frontend\n  ports:\n    - \"5173:5173\"\n</code></pre> <ul> <li>Purpose: Serves the web application</li> <li>Technology: Vite + React + TypeScript</li> <li>Port: 5173</li> </ul>"},{"location":"development/deployment/#backend-fmp-backend","title":"Backend (<code>fmp-backend</code>)","text":"<pre><code>backend:\n  build:\n    context: ./backend\n  container_name: fmp-backend\n  ports:\n    - \"8000:8000\"\n  depends_on:\n    postgres:\n      condition: service_healthy\n</code></pre> <ul> <li>Purpose: Main API server and business logic</li> <li>Technology: Flask/FastAPI + Python</li> <li>Port: 8000</li> <li>Dependencies: PostgreSQL database</li> </ul>"},{"location":"development/deployment/#database-fmp-db","title":"Database (<code>fmp-db</code>)","text":"<p><pre><code>postgres:\n  image: postgres:15.4\n  container_name: fmp-db\n  environment:\n    POSTGRES_USER: postgres\n    POSTGRES_PASSWORD: postgres\n    POSTGRES_DB: postgres\n  volumes:\n    - postgres_data:/var/lib/postgresql/data\n  healthcheck:\n    test: [ \"CMD-SHELL\", \"pg_isready -U postgres\" ]\n    interval: 5s\n    timeout: 5s\n    retries: 5\n</code></pre> - Purpose: Primary data storage - Technology: PostgreSQL 15.4 - Data: Persistent volume for data storage - Health Check: Ensures database is ready before starting dependent services</p>"},{"location":"development/deployment/#tool-services","title":"Tool Services","text":""},{"location":"development/deployment/#z3-smt-solver-fmp-z3-api","title":"Z3 SMT Solver (<code>fmp-z3-api</code>)","text":"<pre><code>z3:\n  build:\n    context: ./z3-api\n  container_name: fmp-z3-api\n  environment:\n    REDIS_URL: redis://redis:6379/0\n</code></pre> <ul> <li>Purpose: Z3 SMT solver integration</li> <li>Technology: Python + Z3 bindings</li> <li>Dependencies: Redis for caching</li> </ul>"},{"location":"development/deployment/#nuxmv-model-checker-fmp-nuxmv-api","title":"nuXmv Model Checker (<code>fmp-nuxmv-api</code>)","text":"<pre><code>nuxmv:\n  build:\n    context: ./nuxmv-api\n  container_name: fmp-nuxmv-api\n  environment:\n    REDIS_URL: redis://redis:6379/0\n</code></pre> <ul> <li>Purpose: nuXmv temporal logic model checking</li> <li>Technology: Python + nuXmv binary</li> <li>Dependencies: Redis for caching</li> </ul>"},{"location":"development/deployment/#alloy-analyzer-fmp-alloy-api","title":"Alloy Analyzer (<code>fmp-alloy-api</code>)","text":"<pre><code>alloy:\n  build:\n    context: ./alloy-api\n  container_name: fmp-alloy-api\n</code></pre> <ul> <li>Purpose: Alloy structural modeling and analysis</li> <li>Technology: Java + Alloy library</li> <li>Features: Model finding and instance generation</li> </ul>"},{"location":"development/deployment/#spectra-synthesis-fmp-spectra-api","title":"Spectra Synthesis (<code>fmp-spectra-api</code>)","text":"<pre><code>spectra:\n  build:\n    context: ./spectra-api\n  container_name: fmp-spectra-api\n  environment:\n    REDIS_URL: redis://redis:6379/0\n</code></pre> <ul> <li>Purpose: Spectra reactive synthesis</li> <li>Technology: Python + Spectra tools</li> <li>Dependencies: Redis for caching</li> </ul>"},{"location":"development/deployment/#supporting-services","title":"Supporting Services","text":""},{"location":"development/deployment/#redis-cache-fmp-redis","title":"Redis Cache (<code>fmp-redis</code>)","text":"<pre><code>redis:\n  image: redis:alpine\n  container_name: fmp-redis\n  ports:\n    - \"6379:6379\"\n</code></pre> <ul> <li>Purpose: Session storage and API caching</li> <li>Technology: Redis Alpine</li> <li>Port: 6379</li> </ul>"},{"location":"development/deployment/#admin-tools","title":"Admin Tools","text":"<p>PgAdmin (<code>fmp-pgadmin</code>) <pre><code>pgadmin:\n  image: dpage/pgadmin4:latest\n  container_name: fmp-pgadmin\n  environment:\n    PGADMIN_DEFAULT_EMAIL: soaib@soaib.me\n    PGADMIN_DEFAULT_PASSWORD: Soaib@123\n  ports:\n    - \"5050:80\"\n</code></pre></p> <ul> <li>Purpose: PostgreSQL database administration</li> <li>Access: http://localhost:5050</li> <li>Credentials: Set in environment variables</li> </ul> <p>RedisInsight (<code>fmp-redisinsight</code>) <pre><code>redisinsight:\n  image: redis/redisinsight:latest\n  container_name: fmp-redisinsight\n  ports:\n    - \"5540:5540\"\n</code></pre></p> <ul> <li>Purpose: Redis monitoring and management</li> <li>Access: http://localhost:5540</li> </ul>"},{"location":"development/deployment/#development-deployment","title":"Development Deployment","text":""},{"location":"development/deployment/#local-development","title":"Local Development","text":"<pre><code># Start core services only\ndocker-compose up frontend backend postgres redis -d\n\n# Start specific tool services as needed\ndocker-compose up z3 alloy -d\n\n# Hot reload for frontend development\ncd frontend\nnpm run dev\n\n# Backend development with auto-reload\ncd backend\npip install -r requirements.txt\npython app.py \n</code></pre>"},{"location":"development/deployment/#development-with-sqlite","title":"Development with SQLite","text":"<p>For simpler development setup, you can use SQLite instead of PostgreSQL:</p> <ol> <li> <p>Update <code>.env</code>: <pre><code>DATABASE_URL=sqlite:///./instance/fmp.db\n</code></pre></p> </li> <li> <p>Remove PostgreSQL dependency from <code>compose.yml</code>: <pre><code>backend:\n  build:\n    context: ./backend\n  container_name: fmp-backend\n  # Remove depends_on section\n</code></pre></p> </li> <li> <p>Start without PostgreSQL: <pre><code>docker-compose up frontend backend redis z3 alloy -d\n</code></pre></p> </li> </ol>"},{"location":"development/deployment/#production-deployment","title":"Production Deployment","text":""},{"location":"development/deployment/#environment-configuration","title":"Environment Configuration","text":"<p>Create a production <code>.env</code> file:</p> <pre><code># Production Database\nPOSTGRES_USER=fmp_prod_user\nPOSTGRES_PASSWORD=secure_password_here\nPOSTGRES_DB=fmp_production\nDATABASE_URL=postgresql://fmp_prod_user:secure_password_here@postgres:5432/fmp_production\n\n# Production Flask Settings\nFLASK_ENV=production\nSECRET_KEY=very-secure-secret-key\nJWT_SECRET_KEY=very-secure-jwt-key\n\n# Redis Configuration\nREDIS_URL=redis://redis:6379/0\n\n# API Configuration\nAPI_URL=https://your-domain.com/api/\n\n# Frontend Configuration\nVITE_FMP_API_URL=https://your-domain.com/api\n</code></pre>"},{"location":"development/deployment/#production-deployment-steps","title":"Production Deployment Steps","text":"<ol> <li> <p>Secure the Environment <pre><code># Generate secure keys\nopenssl rand -base64 32  # For SECRET_KEY\nopenssl rand -base64 32  # For JWT_SECRET_KEY\n\n# Update .env with secure values\n</code></pre></p> </li> <li> <p>Build and Deploy <pre><code># Pull latest code\ngit pull origin main\n\n# Build all images\ndocker-compose build\n\n# Start production services\ndocker-compose up -d\n\n# Verify all services are healthy\ndocker-compose ps\ndocker-compose logs --tail=50\n</code></pre></p> </li> </ol>"},{"location":"development/deployment/#reverse-proxy-configuration","title":"Reverse Proxy Configuration","text":"<p>For production, use a reverse proxy like Nginx:</p> <pre><code># /etc/nginx/sites-available/fm-playground\nserver {\n    listen 80;\n    server_name your-domain.com;\n\n    # Frontend\n    location / {\n        proxy_pass http://localhost:5173;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    # Backend API\n    location /api/ {\n        proxy_pass http://localhost:8000/api/;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    # WebSocket support for language servers\n    location /ws/ {\n        proxy_pass http://localhost:8000/ws/;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"development/deployment/#backup-and-recovery","title":"Backup and Recovery","text":"<p>Database Backup</p> <p>Volume Backup</p> <p>Scaling Tool Services <pre><code># Scale tool APIs for high load\ndocker-compose up --scale z3=3 --scale alloy=2 -d\n</code></pre></p> <p>\u2190 Back to Development Guide</p>"},{"location":"development/external-language-servers/","title":"External Language Server Integration","text":"<p>This guide covers integrating existing Language Server Protocol (LSP) implementations into FM Playground. This approach is ideal when you have an existing language server or want to use a language server implemented in another language.</p>"},{"location":"development/external-language-servers/#overview","title":"Overview","text":"<p>External language servers run as separate processes and communicate with the frontend via:</p> <ul> <li>WebSocket connections - Most common approach</li> <li>HTTP APIs - For stateless interactions</li> <li>stdin/stdout - Via a proxy service</li> </ul>"},{"location":"development/external-language-servers/#when-to-use-external-language-servers","title":"When to Use External Language Servers","text":"<ul> <li>You have an existing LSP implementation</li> <li>The language server is implemented in another language (Python, Rust, Java, etc.)</li> <li>You want to leverage existing tools and ecosystems</li> <li>The language server requires system resources or libraries not available in browsers</li> </ul>"},{"location":"development/external-language-servers/#integration-approaches","title":"Integration Approaches","text":"<ul> <li> <p>Direct WebSocket Connection: For language servers that natively support WebSocket connections.</p> </li> <li> <p>WebSocket Proxy: For language servers that use stdin/stdout, with a proxy service handling WebSocket \u2194 stdio conversion.</p> </li> <li> <p>HTTP API Integration: For RESTful language services that don't implement full LSP.</p> </li> </ul>"},{"location":"development/external-language-servers/#real-world-example-smt-lib-with-dolmen-lsp","title":"Real-World Example: SMT-LIB with Dolmen LSP","text":"<p>FM Playground includes a production example of external language server integration. The SMT-LIB language support uses Dolmen LSP, an external language server, connected via WebSocket.</p> <p>Dolmen provides a library and a binary to parse, typecheck, and evaluate SMT-LIB scripts with other languages used in automated deduction. </p>"},{"location":"development/external-language-servers/#dolmen-lsp-websocket-proxy","title":"Dolmen LSP WebSocket Proxy","text":"<p>The Dolmen LSP integration demonstrates a complete WebSocket proxy implementation that bridges the gap between a native LSP server (implemented in OCaml) and web-based clients. This proxy handles the protocol translation between WebSocket messages and the LSP's stdin/stdout communication.</p>"},{"location":"development/external-language-servers/#architecture-overview","title":"Architecture Overview","text":"<p>The proxy consists of three main components:</p> <ol> <li>Docker Container: Provides an isolated environment with OCaml, Dolmen LSP, and Python dependencies</li> <li>FastAPI WebSocket Server: Handles incoming WebSocket connections from the frontend</li> <li>LSP Process Manager: Manages the dolmenls subprocess and message routing</li> </ol>"},{"location":"development/external-language-servers/#docker-environment-setup","title":"Docker Environment Setup","text":"<pre><code>FROM ocaml/opam:alpine-3.18-ocaml-5.0\n\n# Install system dependencies including build tools and Python\nRUN apk update &amp;&amp; apk add --no-cache \\\n    build-base curl git python3 py3-pip nodejs npm\n\n# Install Dolmen LSP via opam\nUSER opam\nRUN opam init --disable-sandboxing -y\nRUN opam install dolmen_lsp -y\n\n# Install Python API dependencies\nUSER root\nRUN pip3 install fastapi uvicorn websockets\n\n# Setup application\nWORKDIR /app\nCOPY main.py dolmen_lsp_proxy.py /app/\nUSER opam\nENV PATH=\"/home/opam/.opam/5.0/bin:$PATH\"\nEXPOSE 8003\nCMD [\"python3\", \"main.py\"]\n</code></pre>"},{"location":"development/external-language-servers/#key-features","title":"Key Features","text":"<p>Process Management <pre><code>async def start_dolmen_lsp(self):\n    self.dolmen_process = await asyncio.create_subprocess_exec(\n        'dolmenls',\n        stdin=asyncio.subprocess.PIPE,\n        stdout=asyncio.subprocess.PIPE,\n        stderr=asyncio.subprocess.PIPE\n    )\n    asyncio.create_task(self.read_dolmen_output())\n</code></pre></p> <p>Protocol Translation The proxy handles LSP message format conversion:</p> <ul> <li>Incoming: WebSocket JSON \u2192 LSP Content-Length format</li> <li>Outgoing: LSP Content-Length format \u2192 WebSocket JSON</li> </ul> <pre><code>async def send_to_dolmen(self, message: Dict[str, Any]):\n    message_str = json.dumps(message)\n    content = f\"Content-Length: {len(message_str)}\\r\\n\\r\\n{message_str}\"\n    self.dolmen_process.stdin.write(content.encode('utf-8'))\n    await self.dolmen_process.stdin.drain()\n</code></pre> <p>Message Broadcasting Supports multiple concurrent WebSocket clients: <pre><code>async def broadcast_to_clients(self, message: Dict[str, Any]):\n    for client_id, websocket in self.clients.items():\n        try:\n            if hasattr(websocket, 'send_text'):\n                await websocket.send_text(json.dumps(message))\n            else:\n                await websocket.send(json.dumps(message))\n        except Exception as e:\n            # Handle disconnected clients\n            disconnected_clients.append(client_id)\n</code></pre></p>"},{"location":"development/external-language-servers/#dolmen-lsp-websocket-client","title":"Dolmen LSP WebSocket Client","text":"<p>Now that we have the server-side proxy, we need a client-side implementation to connect to it from FM Playground. Upon running the docker container, the client can connect to the WebSocket server and communicate with the Dolmen LSP.</p> <pre><code>// frontend/tools/common/dolmenWebSocketClient.ts\nexport class DolmenWebSocketWorker {\n    private websocket: WebSocket;\n    private isConnected = false;\n    private pendingMessages: any[] = [];\n    private connectedPort: MessagePort | null = null;\n\n    constructor(url: string = 'ws://localhost:5173/dolmen-lsp') {\n        this.websocket = new WebSocket(url);\n        this.setupWebSocket();\n    }\n\n    private setupWebSocket() {\n        this.websocket.onopen = () =&gt; {\n            this.isConnected = true;\n            // Send queued messages\n            this.pendingMessages.forEach(msg =&gt; {\n                this.websocket.send(JSON.stringify(msg));\n            });\n            this.pendingMessages = [];\n        };\n\n        this.websocket.onmessage = (event) =&gt; {\n            const message = JSON.parse(event.data);\n            if (this.connectedPort) {\n                this.connectedPort.postMessage(message);\n            }\n        };\n    }\n\n    postMessage(data: any, transfer?: Transferable[]) {\n        if (data.port &amp;&amp; transfer &amp;&amp; transfer[0] === data.port) {\n            this.connectedPort = data.port;\n\n            data.port.onmessage = (event: MessageEvent) =&gt; {\n                if (this.isConnected) {\n                    this.websocket.send(JSON.stringify(event.data));\n                } else {\n                    this.pendingMessages.push(event.data);\n                }\n            };\n\n            data.port.start();\n        }\n    }\n}\n</code></pre>"},{"location":"development/external-language-servers/#key-patterns","title":"Key Patterns","text":"<ol> <li>Worker Simulation: The class mimics a Web Worker interface while using WebSocket underneath</li> <li>Message Queuing: Messages are queued when disconnected and sent when connected</li> <li>Port-based Communication: Uses MessagePort for Monaco Editor compatibility</li> <li>Error Handling: Graceful handling of connection issues</li> </ol>"},{"location":"development/external-language-servers/#_1","title":"External LSP Integration","text":""},{"location":"development/external-language-servers/#integration","title":"Integration","text":"<pre><code>// In lspWrapperConfig.ts\nconst dolmenWorker = createDolmenWebSocketWorker('ws://localhost:5173/dolmen-lsp');\nconst dolmenChannel = new MessageChannel();\ndolmenWorker.postMessage({ port: dolmenChannel.port2 }, [dolmenChannel.port2]);\n\n// Configure language client\nlanguageClientConfigs: {\n    smt: {\n        languageId: 'smt',\n        connection: {\n            options: {\n                $type: 'WorkerDirect',\n                worker: dolmenWorker as any,\n                messagePort: dolmenChannel.port1,\n            },\n            messageTransports: { reader: dolmenReader, writer: dolmenWriter },\n        },\n    },\n}\n</code></pre> <p>For the lspWrapperConfig configuration, you can refer to the Langium-based Language Servers guide for more details on how to set up the language client.</p> <p>This example serves as a complete working reference for external language server integration. Since LSP is a standardized protocol, the same patterns can be applied to other language servers with minimal adjustments. The key is to ensure the WebSocket communication adheres to the LSP message format and that the client-side implementation can handle the specific language server's capabilities and features.</p>"},{"location":"development/external-language-servers/#resources","title":"Resources","text":"<ul> <li>Language Server Protocol Specification</li> <li>WebSocket API Documentation</li> <li>Monaco Language Client</li> </ul> <p>\u2190 Back to Language Server Integration</p>"},{"location":"development/langium-language-servers/","title":"Langium-based Language Server Implementation","text":"<p>This guide walks you through implementing a new language server using the Langium framework for FM Playground.</p>"},{"location":"development/langium-language-servers/#overview","title":"Overview","text":"<p>Langium is a TypeScript-based framework for building domain-specific languages with full Language Server Protocol (LSP) support. It generates type-safe ASTs and provides extensive customization options for language features.</p>"},{"location":"development/langium-language-servers/#getting-started","title":"Getting Started","text":"<p>Follow the steps from the Langium documentation to set up your development environment. Ensure you have Node.js and npm installed. Then create a new Langium project outside the FM Playground project directory.</p> <p>Scaffolding a Langium project, offers an interactive CLI to create a new language project. Based on your selection, it can generate different parts you want to include in your language server, such as VS Code extension, CLI, Web worker, etc. For FM Playground, we will focus on the Web worker. You can include all of the options, later we will copy the relevant files to the FM Playground project.</p>"},{"location":"development/langium-language-servers/#generate-artifacts","title":"Generate artifacts","text":"<p>Following all the steps in the Langium documentation, you will have a new directory with the following structure:</p> my-langium-project<pre><code>my-langium-project/\n\u251c\u2500\u2500 ...                             # Other generated files\n\u251c\u2500\u2500 src/                            # Source files\n\u2502   \u251c\u2500\u2500 ...                         # Other language files\n\u2502   \u251c\u2500\u2500 language/                   # Language-specific files\n\u2502   \u2502   \u251c\u2500\u2500 generated/              # Generated files\n\u2502   \u2502   \u251c\u2500\u2500 my-language.langium     # Language grammar\n\u2502   \u2502   \u251c\u2500\u2500 my-language-module.ts   # Dependency injection\n\u2502   \u2502   \u251c\u2500\u2500 ...                     # Other language files e.g., validators,\n\u251c\u2500\u2500 syntaxes/                       # TextMate grammar files\n\u2502   \u2514\u2500\u2500 my-language.tmLanguage.json # Syntax highlighting rules\n\u251c\u2500\u2500 langium-config.json             # Langium configuration\n\u251c\u2500\u2500 language-configuration.json     # Language features configuration\n\u2514\u2500\u2500 ...                             # Other files\n</code></pre>"},{"location":"development/langium-language-servers/#integrating-with-fm-playground","title":"Integrating with FM Playground","text":"<p>Now that you have a basic Langium project, we will integrate it into FM Playground.</p>"},{"location":"development/langium-language-servers/#step-1-copy-files-to-fm-playground","title":"Step 1: Copy Files to FM Playground","text":"<ul> <li>Create a new directory in <code>frontend/tools/your-language/langium/</code> (replace <code>your-language</code> with your language name).</li> <li>Copy the <code>*config*.json</code> files (line 12,13) from your Langium project to <code>frontend/tools/your-language/langium/config/</code>.</li> <li>Copy the <code>language</code> (line 4) directory to <code>frontend/tools/your-language/langium/ls/</code>. (including generated files)</li> <li>Copy the <code>syntaxes</code> (line 10) directory to <code>frontend/tools/your-language/langium/syntaxes/</code>.</li> </ul>"},{"location":"development/langium-language-servers/#step-2-create-worker","title":"Step 2: Create Worker","text":"<ul> <li>Create a new directory <code>frontend/tools/your-language/langium/worker/</code>. This will contain the worker setup for your language server.</li> <li>Now, create three files in the <code>worker</code> directory:</li> <li><code>your-language-server.ts</code>: This will be the main worker file.</li> <li><code>your-language-server-port.ts</code>: This will handle the port-based worker setup.</li> <li><code>your-language-server-start.ts</code>: This will contain the startup logic for your language server.</li> </ul> <p>Now, implement the worker files as follows:</p> your-language-server.ts<pre><code>/// &lt;reference lib=\"WebWorker\" /&gt;\nimport { start } from \"./your-language-server-start.js\";\ndeclare const self: DedicatedWorkerGlobalScope;\nstart(self, \"your-language-server\");\n</code></pre> <p>This file initializes the worker and starts the language server.</p> your-language-server-port.ts<pre><code>/// &lt;reference lib=\"WebWorker\" /&gt;\nimport { start } from \"./your-language-server-start.js\";\ndeclare const self: DedicatedWorkerGlobalScope;\nself.onmessage = async (event: MessageEvent) =&gt; {\n  const data = event.data;\n  console.log(event.data);\n  if (data.port !== undefined) {\n    start(data.port, \"your-language-server-port\");\n    setTimeout(() =&gt; {\n      self.postMessage(\"started\");\n    }, 1000);\n  }\n};\n</code></pre> <p>This file listens for messages from the main thread and starts the language server with the provided port.</p> your-language-server-start.ts<pre><code>/// &lt;reference lib=\"WebWorker\" /&gt;\n\nimport { EmptyFileSystem } from \"langium\";\nimport { startLanguageServer } from \"langium/lsp\";\nimport {\n  BrowserMessageReader,\n  BrowserMessageWriter,\n  createConnection,\n} from \"vscode-languageserver/browser.js\";\nimport { createYourLanguageServices } from \"../ls/your-language-module.js\";\nexport const start = (\n  port: MessagePort | DedicatedWorkerGlobalScope,\n  name: string\n) =&gt; {\n  console.log(`Starting ${name}...`);\n  /* browser specific setup code */\n  const messageReader = new BrowserMessageReader(port);\n  const messageWriter = new BrowserMessageWriter(port);\n  const connection = createConnection(messageReader, messageWriter);\n  // Inject the shared services and language-specific services\n  const { shared } = createYourLanguageServices({\n    connection,\n    ...EmptyFileSystem,\n  });\n  // Start the language server with the shared services\n  startLanguageServer(shared);\n};\n</code></pre> <p>This file sets up the language server connection and starts the server with the shared services.</p>"},{"location":"development/langium-language-servers/#step-3-configure-monaco-editor","title":"Step 3: Configure Monaco Editor","text":"<p>Now, we need to configure the Monaco Editor to use the new language server. The common configuration file for Monaco Editor is <code>frontend/tools/common/lspWrapperConfig.ts</code>.</p> <ul> <li>Import the necessary files at the top of the file:</li> </ul> lspWrapperConfig.ts<pre><code>// Your tool specific imports\nimport workerPortUrlYourLanguage from \"@/../tools/your-language/langium/worker/your-language-server-port?worker&amp;url\";\nimport yourLanguageLanguageConfig from \"@/../tools/your-language/langium/config/language-configuration.json?raw\";\nimport responseYourlanguageTm from \"@/../tools/your-language/langium/syntaxes/your-language.tmLanguage.json?raw\";\n</code></pre> <ul> <li>Add the worker factory function to load your language worker:</li> </ul> lspWrapperConfig.ts<pre><code>const loadYourLanguageWorkerPort = () =&gt; {\n  return new Worker(workerPortUrlYourLanguage, {\n    type: \"module\",\n    name: \"YourLanguage Server Port\",\n  });\n};\n</code></pre> <ul> <li>In the <code>createLangiumGlobalConfig</code> function, add your language configuration:</li> </ul> lspWrapperConfig.ts<pre><code>...\n// Load the worker ports for your language\nconst yourLanguageExtensionFilesOrContents = new Map&lt;string, string | URL&gt;();\nyourLanguageExtensionFilesOrContents.set(\n    `/your-language-configuration.json`,\n    yourLanguageLanguageConfig\n);\nyourLanguageExtensionFilesOrContents.set(\n    `/your-language-grammar.json`,\n    responseYourLanguageTm\n);\n\n// Load worker\n...\nconst yourLanguageWorkerPort = loadYourLanguageWorkerPort();\n\n// Create message channel\nconst yourLanguageChannel = new MessageChannel();\nyourLanguageWorkerPort.postMessage(\n    { port: yourLanguageChannel.port2 },\n    [yourLanguageChannel.port2]\n);\n\n// Create message readers and writers for each channel\nconst yourLanguageReader = new BrowserMessageReader(\n    yourLanguageChannel.port1\n);\nconst yourLanguageWriter = new BrowserMessageWriter(\n    yourLanguageChannel.port1\n);\n\nreturn {\n    id: 42,\n    ... // existing config\n    editorAppConfig: {\n      extensions:[{\n        config: {\n          name: 'your-language-example',\n          publisher: 'your-publisher',\n          version: '1.0.0',\n          engine: {\n            vscode: '*',\n          },\n          contributes: {\n            languages: [\n              {\n                id: 'your-language',\n                extensions: ['.yourlang'],\n                aliases: ['YourLanguage', 'your-language'],\n                configuration: `./your-language-configuration.json`,\n              },\n            ],\n            grammars: [\n              {\n                language: 'your-language',\n                scopeName: 'source.yourlanguage',\n                path: `./your-language-grammar.json`,\n              },\n            ],\n          },\n        },\n        filesOrContents: yourLanguageExtensionFilesOrContents,\n      },\n        ... // existing extensions\n      ],\n    },\n    languageClientConfigs: {\n      yourLanguage: {\n        languageId: 'your-language',\n        connection: {\n          options: {\n            $type: 'WorkerDirect',\n            worker: loadYourLanguageWorkerPort,\n            messagePort: yourLanguageChannel.port1,\n          },\n          messageTransports: { \n            reader: yourLanguageReader, \n            writer: yourLanguageWriter\n          },\n      },\n      ... // existing language clients\n      },\n  },\n}\n</code></pre> <p>This configuration code demonstrates the complete integration of a Langium-based language server into FM Playground's Monaco Editor. Let's break down each section:</p>"},{"location":"development/langium-language-servers/#1-extension-files-mapping","title":"1. Extension Files Mapping","text":"<pre><code>const yourLanguageExtensionFilesOrContents = new Map&lt;string, string | URL&gt;();\nyourLanguageExtensionFilesOrContents.set(\n    `/your-language-configuration.json`,\n    yourLanguageLanguageConfig\n);\nyourLanguageExtensionFilesOrContents.set(\n    `/your-language-grammar.json`,\n    responseYourLanguageTm\n);\n</code></pre> <p>This creates a virtual file system for Monaco Editor, mapping file paths to their content: - Language configuration: Defines editor behaviors like bracket matching, auto-closing pairs, and comment styles - TextMate grammar: Provides syntax highlighting rules that colorize your language's tokens</p>"},{"location":"development/langium-language-servers/#2-worker-initialization","title":"2. Worker Initialization","text":"<pre><code>const yourLanguageWorkerPort = loadYourLanguageWorkerPort();\n</code></pre> <p>Creates a new Web Worker instance running your language server. Web Workers are crucial because they: - Run language processing in a separate thread - Prevent UI blocking during heavy parsing/validation - Isolate language server crashes from the main application</p>"},{"location":"development/langium-language-servers/#3-inter-thread-communication-setup","title":"3. Inter-thread Communication Setup","text":"<pre><code>const yourLanguageChannel = new MessageChannel();\nyourLanguageWorkerPort.postMessage(\n    { port: yourLanguageChannel.port2 },\n    [yourLanguageChannel.port2]\n);\n</code></pre> <p>Establishes a bidirectional communication pipe: - MessageChannel: Creates two connected ports for communication - Port transfer: Sends one end to the worker, keeping the other in the main thread - Structured messaging: Enables reliable, type-safe communication between threads</p>"},{"location":"development/langium-language-servers/#4-language-server-protocol-transport-layer","title":"4. Language Server Protocol Transport Layer","text":"<pre><code>const yourLanguageReader = new BrowserMessageReader(yourLanguageChannel.port1);\nconst yourLanguageWriter = new BrowserMessageWriter(yourLanguageChannel.port1);\n</code></pre> <p>Creates LSP-compliant message transports: - Reader: Processes incoming LSP messages from the language server - Writer: Sends LSP requests/notifications to the language server - Protocol compliance: Ensures compatibility with standard LSP implementations</p>"},{"location":"development/langium-language-servers/#5-vs-code-extension-simulation","title":"5. VS Code Extension Simulation","text":"<pre><code>editorAppConfig: {\n  extensions:[{\n    config: {\n      name: 'your-language-example',\n      publisher: 'your-publisher',\n      version: '1.0.0',\n      engine: { vscode: '*' },\n      contributes: {\n        languages: [...],\n        grammars: [...]\n      }\n    },\n    filesOrContents: yourLanguageExtensionFilesOrContents,\n  }]\n}\n</code></pre> <p>Mimics a VS Code extension's <code>package.json</code> structure: - Metadata: Extension identification and versioning - Language contribution: Registers file extensions, aliases, and configuration - Grammar contribution: Associates the language with its TextMate grammar - File mapping: Links virtual files to their content</p>"},{"location":"development/langium-language-servers/#6-language-client-configuration","title":"6. Language Client Configuration","text":"<pre><code>languageClientConfigs: {\n  yourLanguage: {\n    languageId: 'your-language',\n    connection: {\n      options: {\n        $type: 'WorkerDirect',\n        worker: loadYourLanguageWorkerPort,\n        messagePort: yourLanguageChannel.port1,\n      },\n      messageTransports: { \n        reader: yourLanguageReader, \n        writer: yourLanguageWriter\n      },\n    },\n  },\n}\n</code></pre> <p>Configures the LSP client for your language: - Language identification: Maps to the language ID in the extension config - Connection type: Specifies direct worker communication - Worker factory: Function to create new worker instances when needed - Message handling: Links the reader/writer pair for LSP communication</p>"},{"location":"development/langium-language-servers/#resources","title":"Resources","text":"<ul> <li>Langium Documentation</li> </ul> <p>\u2190 Back to Language Server Integration</p>"},{"location":"development/language-servers/","title":"Language Server Integration","text":"<p>FM Playground supports integration of Language Server Protocol (LSP) based language servers to provide rich editing features like syntax highlighting, autocompletion, error diagnostics, and more. This guide covers two approaches:</p> <ol> <li>Langium-based Language Servers - For creating a new domain-specific language (DSL) using the Langium framework. It allows you to define your own language grammar, services, and tooling.</li> <li>External Language Servers - For integrating existing LSP implementations that are already available as services. This allows you to leverage existing language servers without needing to implement them from scratch.</li> </ol>"},{"location":"development/language-servers/#overview","title":"Overview","text":"<p>Language servers in FM Playground provide:</p> <ul> <li>Syntax Highlighting: Using TextMate grammars</li> <li>Error Diagnostics: Real-time syntax and semantic error reporting  </li> <li>Auto-completion: Context-aware code suggestions</li> <li>Code Actions: Quick fixes and refactoring suggestions</li> <li>Hover Information: Documentation and type information on hover</li> <li>Semantic Highlighting: Advanced syntax coloring based on language semantics</li> <li>And more: Depending on the language server capabilities</li> </ul>"},{"location":"development/language-servers/#communication-patterns","title":"Communication Patterns","text":"<ol> <li>Browser Workers: For Langium-based servers running in the browser</li> <li>WebSocket Connections: For external language servers running as services</li> <li>Message Channels: For bridging between Monaco Editor and workers/WebSockets</li> </ol>"},{"location":"development/language-servers/#examples-in-fm-playground","title":"Examples in FM Playground","text":""},{"location":"development/language-servers/#langium-based-examples","title":"Langium-based Examples","text":"Language Location Features Limboole <code>frontend/tools/limboole/langium/</code> Boolean formulas, validation, code actions Spectra <code>frontend/tools/spectra/langium/</code> Temporal logic, scoping, workspace management"},{"location":"development/language-servers/#external-lsp-examples","title":"External LSP Examples","text":"Language Location Features SMT feature/dolmen-lsp branch Full SMT-LIB syntax support, external solver integration"},{"location":"development/language-servers/#continue-reading","title":"Continue reading:","text":"<ul> <li>Langium Language Server Implementation \u2192</li> <li>External Language Server Integration \u2192</li> </ul>"},{"location":"development/language-servers/#resources","title":"Resources","text":"<ul> <li>Langium Documentation</li> <li>Language Server Protocol Specification</li> <li>Monaco Editor API</li> <li>TextMate Grammar Guide</li> </ul>"}]}