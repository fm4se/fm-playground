{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FM Playground User Guide","text":"<p>Formal Methods (FM) Playground is a web platform for running and experimenting with different formal methods tools. It is designed to be integrated any formal methods tool that can be run without installation on the local machine. The platform is built using modern web technologies and provides a user-friendly interface for interacting with formal methods tools.</p>"},{"location":"#features","title":"Features","text":"<p>The FM Playground offers the following tools by default:</p> <ul> <li>Limboole: A SAT-based tool for Boolean reasoning.</li> <li>SMT: An SMT solver (Z3) for checking the satisfiability of logical formulas.</li> <li>nuXmv: A symbolic model checker for the finite-state and infinite-state systems.</li> <li>Alloy: A declarative modeling language for software systems.</li> <li>Spectra: A synthesis tool for reactive systems.</li> </ul> <p>More Tools</p> <p>The FM Playground is designed to be extensible, allowing users to add their own tools and configurations. If you have a tool that you want to integrate into the FM Playground, follow the guide on how to add a new tool. TODO: Add guide on how to add a new tool.</p>"},{"location":"#overview-and-examples","title":"Overview and Examples","text":"<p>Visit play.formal-methods.net to access the FM Playground. No installation is required - everything runs in your browser!</p> <p>We started a small overview of the features of the FM Playground and how to use it. The video playlist is available on YouTube</p> <p>There also some examples for each tool available in the bottom of the page. You can use these examples to get started with the tools and see how they work.</p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#writing-specification","title":"Writing Specification","text":"<ol> <li>Select a Tool: Click on the tool name in the toolbar</li> <li>Start Typing: The editor provides syntax highlighting automatically</li> <li>Error Detection: Red squiggly lines indicate syntax errors</li> <li>Auto-completion: Use Ctrl+Space for suggestions</li> </ol> <p>LSP Support</p> <p>Not all tools support Language Server Protocol (LSP) features like auto-completion and error detection. We are working on improving this feature for all tools. Currently, Limboole, SMT (in beta), and Spectra support LSP features. </p>"},{"location":"#running-specification","title":"Running Specification","text":"<ol> <li>Click Run: Press the \"RUN\" button</li> <li>View Results: Check the output panel for results</li> <li>Error Handling: Errors are displayed with line numbers</li> <li>Timeout: Long-running processes are automatically terminated (default 60 seconds)</li> </ol>"},{"location":"#sharing-specification","title":"Sharing Specification","text":"<ol> <li>Generate Link: Your specification is automatically saved with a unique permalink</li> <li>Copy URL : Copy the browser URL to share your specification</li> <li>Version History: Each \"RUN\" creates a new version of your specification</li> <li>Forking: Others can modify and save their own versions not affecting your original specification</li> </ol>"},{"location":"#file-management","title":"File Management","text":""},{"location":"#uploading-files","title":"Uploading Files","text":"<ol> <li>Click the  upload button</li> <li>Select a file with the appropriate extension</li> <li>The file content loads into the editor</li> <li>File format is automatically detected</li> </ol>"},{"location":"#downloading-files","title":"Downloading Files","text":"<ol> <li>Click the  download button</li> <li>Choose filename and location (default is <code>&lt;permalink&gt;.&lt;tool_extension&gt;</code>)</li> <li>File is saved with correct extension</li> <li>Preserves all formatting and syntax</li> </ol>"},{"location":"#user-accounts","title":"User Accounts","text":"<p>You DON'T need to create an account to use the FM Playground, but signing in provides additional benefits.</p>"},{"location":"#signing-in","title":"Signing In","text":"<ol> <li>Click \"LOGIN\" in the top right</li> <li>Choose Google or GitHub OAuth</li> <li>Grant necessary permissions</li> <li>Account will be created automatically if it doesn't exist</li> </ol>"},{"location":"#benefits-of-signing-in","title":"Benefits of Signing In","text":"<ul> <li>History: Access all your previous work</li> <li>Search: Find specific specification snippets</li> <li>Backup: Never lose your work</li> </ul>"},{"location":"#viewing-history","title":"Viewing History","text":"<ol> <li>Sign in to your account</li> <li>Click the history icon</li> <li>Browse chronologically</li> <li>Click any item to load it in the editor</li> </ol> <p>Results in History</p> <p>The history only contains the specification you wrote, not the output of the tools. You can run the specification again to see the results.</p>"},{"location":"#searching-specification","title":"Searching Specification","text":"<ol> <li>Use the search box in history</li> <li>Search by content</li> </ol>"},{"location":"#managing-account","title":"Managing Account","text":"<ul> <li>Export: Download all your specification as a JSON file</li> <li>Delete: You can delete your account at any time</li> </ul> <p>Deleting Account</p> <p>Deleting your account will UNLINK all your specification from your account. But the specification will still be available via the permalinks. </p>"},{"location":"CHANGELOG/","title":"Change Log","text":""},{"location":"CHANGELOG/#v268-9-2025-06-04","title":"v2.6.8-9 [2025-06-04]","text":"<ul> <li>\ud83d\udc1bFixed Alloy, tabular instance view not showing #17</li> <li>\ud83d\udc1bFixed Spectra Syntax Highlighting is not working while LSP is enabled #19</li> <li>\ud83d\udc1bFixed Line Highlighting is not working in the lsp editor #20</li> </ul>"},{"location":"CHANGELOG/#v267-2025-06-02","title":"v2.6.7 [2025-06-02]","text":"<ul> <li>\ud83d\udc1bFixed language support is not working from permalink </li> </ul>"},{"location":"CHANGELOG/#v264-6-2025-06-01","title":"v2.6.4-6 [2025-06-01]","text":"<ul> <li>\u2b06\ufe0f Updated python dependencies</li> <li>\u2b06\ufe0f Upgrade flask cors from 5.0.1 to 6.0.0</li> <li>\u2728 Added script to automatically update the versions </li> <li>\ud83d\udc1b Fixed poetry install in docker with --no-root</li> </ul>"},{"location":"CHANGELOG/#v261-3-2025-05-10","title":"v2.6.1-3 [2025-05-10]","text":"<ul> <li>\ud83d\udc1b Fixed Maximum call stack size exceeded in validation</li> <li>\u2728 Added scope provider for spectra workspace</li> <li>\ud83d\uddc3\ufe0f Storing lsp metadata of spectra in the database.</li> </ul>"},{"location":"CHANGELOG/#v260-2025-05-05","title":"v2.6.0 [2025-05-05]","text":"<ul> <li>\u2728 Added Spectra language server support</li> </ul>"},{"location":"CHANGELOG/#v254-2025-04-27","title":"v2.5.4 [2025-04-27]","text":"<ul> <li>\ud83d\udccc Bump Python dependencies</li> <li>\ud83d\udccc Bump npm dependencies</li> </ul>"},{"location":"CHANGELOG/#v253-2025-04-01","title":"v2.5.3 [2025-04-01]","text":"<ul> <li>\ud83d\udd27 Added allowed hosts in the vite config file</li> </ul>"},{"location":"CHANGELOG/#v252-2025-04-01","title":"v2.5.2 [2025-04-01]","text":"<ul> <li>\ud83d\udccc Migrated to vite 6</li> <li>\ud83d\udccc Updated python dependencies</li> </ul>"},{"location":"CHANGELOG/#v251-2025-03-31","title":"v2.5.1 [2025-03-31]","text":"<ul> <li>\u2728 Added materials for spectra</li> <li>\u2728 Added current variant of (spectra) pattern names, keeping old for backwards compatibility</li> </ul>"},{"location":"CHANGELOG/#v250-2025-02-25","title":"v2.5.0 [2025-02-25]","text":"<p>Added</p> <ul> <li>\u2728 Updated smt language support with cross-ref and code completion</li> </ul>"},{"location":"CHANGELOG/#v240-2024-12-16","title":"v2.4.0 [2024-12-16]","text":"<p>Changed</p> <ul> <li>\u2728 Alloy- added support for atoms and skolems when parsing expressions</li> <li>\ud83d\udc1b Alloy- fixed tabular output</li> <li>\ud83d\udc1b Alloy- fixed alloy instance is not updating immediately</li> <li>\ud83d\udc1b Alloy- fixed evaluator cleared up when switching tabs</li> </ul>"},{"location":"CHANGELOG/#v230-2024-12-04","title":"v2.3.0 [2024-12-04]","text":"<p>Changed</p> <ul> <li>\u2728 Added alloy evaluator</li> <li>\ud83c\udfa8 Improved the visualization of alloy text and tabular format</li> <li>\u26a1\ufe0f Switched deprecated method in Java</li> </ul>"},{"location":"CHANGELOG/#v222-2024-12-03","title":"v2.2.2 [2024-12-03]","text":"<p>Changed</p> <ul> <li>\ud83d\udcccBump python dependencies</li> </ul>"},{"location":"CHANGELOG/#v221-2024-11-26","title":"v2.2.1 [2024-11-26]","text":"<p>Changed</p> <p>\u26a1\ufe0fSet alloy memory usage limit; restart if exceeded \u26a1\ufe0fUsing minisat for alloy \ud83d\udc1bHandle label on alloy commands</p>"},{"location":"CHANGELOG/#v220-2024-11-20","title":"v2.2.0 [2024-11-20]","text":"<p>Added</p> <ul> <li>\u2728 Added typo validation in Limboole.</li> <li>\u2728 Storing language support check as metadata</li> </ul> <p>Changed</p> <ul> <li>\ud83d\udc1b Fixed issue with ascii char recognition</li> <li>\ud83d\udc1b Fixed limboole syntax highlighting</li> <li>\u267b\ufe0f Refactored error messages</li> </ul>"},{"location":"CHANGELOG/#v211-2024-11-05","title":"v2.1.1 [2024-11-05]","text":"<p>Changed</p> <ul> <li>\ud83d\udc1b Fixed Alloy default run command ignoring all facts</li> <li>\ud83e\uddea Fixed Alloy-api bkoken test cases</li> <li>\u26a1\ufe0f Removed some unused code</li> <li>\u26a1\ufe0f Fixed some code smells</li> </ul>"},{"location":"CHANGELOG/#v210-2024-11-01","title":"v2.1.0 [2024-11-01]","text":"<p>Added</p> <ul> <li>\u2728 SMT in editor language support (browser worker)</li> <li>\u2728 Feedback form</li> </ul>"},{"location":"CHANGELOG/#v200-2024-10-20","title":"v2.0.0 [2024-10-20]","text":"<p>Added</p> <ul> <li>\u26a1\ufe0f Added caching mechanism for z3, nuXmv, and Spectra with Redis</li> <li>\u2728 New api for getting metadata</li> </ul> <p>Changed</p> <ul> <li>\ud83d\udca5 Separated nuxmv, alloy, and z3 api</li> <li>\ud83d\udca5 Merged VAL and QBF are merged into SAT</li> <li>\ud83d\udd25 Remove tool specific api</li> <li>\ud83d\udd25 Remove check type for permalink lookup</li> <li>\ud83d\udd25 Remove dark mode (temporarily)</li> <li>\u267b\ufe0f Migrated backend to Flask 3 and poetry</li> <li>\u267b\ufe0f Populating tools dropdown from fmp.conf</li> <li>\u267b\ufe0f Fixed wasm fallback api</li> <li>\ud83c\udfa8 Added issue link on error modals</li> <li>\ud83d\udc1bFixed-creating new spec not reseting the editor</li> </ul>"},{"location":"CHANGELOG/#v150-2024-10-07","title":"v1.5.0 [2024-10-07]","text":"<p>Added</p> <ul> <li>\u2728 Limboole in editor language support (browser worker)</li> <li>\u2728 Store playground version for future reference</li> </ul> <p>Changed</p> <ul> <li>\u26a1Migrated from JavaScript to TypeScript</li> <li>\u267b\ufe0fMerged some duplicate API endpoints</li> </ul>"},{"location":"CHANGELOG/#v142-2024-09-28","title":"v1.4.2 [2024-09-28]","text":"<p>What's changed?</p> <ul> <li>\ud83d\udcccBump esbuild from 0.20.2 to 0.21.5</li> <li>\ud83d\udcccBump micromatch from 4.0.5 to 4.0.8</li> <li>\ud83d\udcddAdded new examples for SAT, SMT, and Alloy</li> <li>\ud83d\udcddLinked YouTube playlist on the readme</li> </ul>"},{"location":"CHANGELOG/#v141-2024-08-17","title":"v1.4.1 [2024-08-17]","text":"<p>What's changed?</p> <ul> <li>\ud83d\udc1bFixed #9 - Alloy's subset singnature indication missing in instances</li> <li>\ud83d\udc1bFixed #8 - unexpected behavior on last instance of temporal Alloy models</li> <li>\ud83d\udcccBump axios from 1.6.2 to 1.7.4</li> </ul>"},{"location":"CHANGELOG/#v140-2024-08-10","title":"v1.4.0 [2024-08-10]","text":"<p>What's changed?</p> <ul> <li>Added alloy tabular and text output </li> <li>Bug Fixed- can't parse alloy integer label</li> <li>Fixed- Unicode handling</li> <li>Fixed- Alloy timeout</li> <li>Disabled next instance button while calculating</li> <li>Added rate limiter for alloy</li> <li>Added download ext for spectra</li> <li>Add SQLite option for local development</li> </ul>"},{"location":"CHANGELOG/#v130-2024-07-09","title":"v1.3.0 [2024-07-09]","text":"<p>What's changed?</p> <ul> <li>Removed legacy alloy4fun</li> <li>Added new Alloy API with Spring Boot</li> <li>Integrated Alloy UI into the main playground</li> <li>Fixed #6 Limboole syntax error reporting blocks running</li> <li>Removed DB migration on docker </li> <li>Fixed spectra line highlighting error</li> <li>nuXmv tutorial URL changed</li> <li>Updated workflow for docker build</li> </ul>"},{"location":"CHANGELOG/#v121-2024-06-09","title":"v1.2.1 [2024-06-09]","text":"<p>What's changed?</p> <ul> <li>Introduce new tool - Spectra Synthesizer</li> <li>Line highlighting on the editor on error/core</li> <li>Introduced dark mode</li> <li>Compressing large response body</li> <li>Migrated Z3 to the browser</li> </ul>"},{"location":"CHANGELOG/#v112-2024-01-10","title":"v1.1.2 [2024-01-10]","text":"<p>Fix</p> <ul> <li>Syntax highlighting fails when loading from permalinks 9991aa1c9c83c78fbd1d9849b5b80fd8efd19d19</li> <li>Handle non-ASCII characters on specification</li> <li>nuXmv time-out blocked by Gunicorn</li> <li>Store the specification configuration on refresh/redirect</li> <li>Exit fullscreen mode with ESC key keeps current ref</li> <li>File upload type</li> <li>Run button disable failed when running</li> </ul>"},{"location":"CHANGELOG/#v111-2024-01-05","title":"v1.1.1 [2024-01-05]","text":"<p>Fix</p> <ul> <li>GitHub link breaks on mobile device</li> <li>After loading a spec from the history the output panel keeps the content of previous analyses, and the permalink is not updated</li> <li>Keep the selected history highlighted</li> <li>The search results reset to all specs after loading a spec</li> </ul>"},{"location":"CHANGELOG/#v110-2023-12-28","title":"v1.1.0 [2023-12-28]","text":"<p>What's changed?</p> <ul> <li>Save user theme preference</li> <li>Adjust the height on the fullscreen</li> <li>Codebase minification on deployment</li> <li>Upgrade Alloy-API to the latest maven and java</li> <li>Introduce request limit with flask-limiter</li> </ul> <p>Fix</p> <ul> <li>Limboole parsing error #4</li> <li>Copying empty permalink</li> <li>API response error</li> <li>nuXmv copyright notice</li> </ul>"},{"location":"CHANGELOG/#v100-2023-12-21","title":"v1.0.0 [2023-12-21]","text":"<p>What's changed?</p> <ul> <li>Completely rewritten frontend with React</li> <li>Added login functionality with Google and GitHub</li> <li>Added ability to save specifications</li> <li>Added ability to download history as JSON</li> <li>Search saved history </li> </ul>"},{"location":"CHANGELOG/#v01-2023-12-14","title":"v0.1 [2023-12-14]","text":""},{"location":"developer-guide/","title":"FM Playground Developer Guide","text":"<p>Formal Methods (FM) Playground is a web platform for running and experimenting with different formal methods tools. It is designed to be integrated any formal methods tool that can be run without installation on the local machine. The platform is built using modern web technologies and provides a user-friendly interface for interacting with formal methods tools.</p>"},{"location":"developer-guide/#getting-started","title":"Getting Started","text":"<p>This guide will help you to set up your own instance of the FM Playground and add/modify tools.</p> <p>There are two main approaches to develop your own FM Playground instance, depending on your needs and preferences:</p>"},{"location":"developer-guide/#working-with-existing-project","title":"\ud83c\udf74 Working with Existing Project","text":"<p>Best for: Developers who want access to all existing tools and prefer a complete codebase as starting point.</p> <p>If you want to start with all existing formal method tools (Alloy, Limboole, nuXmv, SMT/Z3, Spectra) and build upon them, this approach gives you the full codebase to work with.</p> <p>\ud83d\udcd6 Read the detailed guide \u2192</p>"},{"location":"developer-guide/#start-from-scratch","title":"\ud83d\ude80 Start from Scratch","text":"<p>Best for: Developers who want a minimal setup and prefer to add only the tools they need.</p> <p>If you want a clean, minimal starting point and only need specific formal method tools, this approach lets you create a customized playground from the ground up.</p> <p>\ud83d\udcd6 Read the detailed guide \u2192</p>"},{"location":"developer-guide/#adding-custom-tools","title":"\ud83d\udee0\ufe0f Adding Custom Tools","text":"<p>Both approaches support adding custom tools using the <code>fmp-tool</code> CLI. This powerful tool generator helps you create new formal method tools with minimal effort.</p>"},{"location":"developer-guide/#key-features","title":"Key Features","text":"<ul> <li>Interactive Setup: Guided configuration for your tool</li> <li>Template Generation: Automatic creation of all necessary files</li> <li>Integration Support: Built-in ToolMaps.tsx integration</li> <li>Flexible Options: Support for custom input/output components</li> </ul>"},{"location":"developer-guide/#quick-start","title":"Quick Start","text":"<pre><code>npx fmp-tool\n</code></pre> <p>\ud83d\udcd6 Learn more about tool development \u2192</p>"},{"location":"developer-guide/#choose-your-path","title":"\ud83c\udfaf Choose Your Path","text":"Aspect Existing Project Start from Scratch Setup Time Quick (fork &amp; clone) Medium (guided setup) Initial Tools All tools included Select only what you need Codebase Size Full codebase Minimal, focused Customization Modify existing Build from ground up Learning Curve Steeper (more code) Gentler (less complexity)"},{"location":"developer-guide/#quick-navigation","title":"Quick Navigation","text":"<ul> <li>Existing Project Setup \u2192 - Fork and extend the full repository</li> <li>Start from Scratch \u2192 - Create a minimal, custom playground  </li> <li>Development Guide \u2192 - Learn about tool development</li> <li>API Reference \u2192 - Technical documentation</li> <li>Main Repository \u2192 - Source code and issues</li> </ul>"},{"location":"developer-guide/existing-project/","title":"Working with Existing Project","text":"<p>This guide covers setting up your FM Playground by forking the existing repository. This approach gives you access to all existing tools and the complete codebase.</p>"},{"location":"developer-guide/existing-project/#overview","title":"\ud83c\udfaf Overview","text":"<p>The existing project approach is ideal when you:</p> <ul> <li>Want all formal method tools (Alloy, Limboole, nuXmv, SMT/Z3, Spectra) currently available on the FM Playground</li> <li>Need a comprehensive starting point with full features</li> <li>Plan to contribute back to the main project</li> <li>Want to learn from existing tool implementations</li> <li>Prefer to customize existing tools rather than build from scratch</li> </ul>"},{"location":"developer-guide/existing-project/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Node.js (version 20 or higher) - Download here</li> <li>Git - Download here</li> <li>GitHub Account - Sign up here</li> <li>Code Editor - VS Code recommended</li> </ul>"},{"location":"developer-guide/existing-project/#verify-your-setup","title":"Verify Your Setup","text":"<pre><code># Check Node.js version\nnode --version\n# Should show version 20.x.x or higher\n\n# Check npm version  \nnpm --version\n# Should show version 10.x.x or higher\n\n# Check Git\ngit --version\n# Should show git version\n</code></pre>"},{"location":"developer-guide/existing-project/#step-1-fork-the-repository","title":"\ud83c\udf74 Step 1: Fork the Repository","text":"<ol> <li> <p>Navigate to the main repository</p> <ul> <li>https://github.com/fm4se/fm-playground</li> </ul> </li> <li> <p>Fork the repository</p> <ul> <li>Click the \"Fork\" button in the top-right corner</li> <li>Choose your GitHub account as the destination</li> <li>Keep the repository name as <code>fm-playground</code> or customize it</li> <li>Ensure \"Copy the main branch only\" is checked</li> <li>Click \"Create fork\"</li> </ul> </li> <li> <p>Verify your fork</p> </li> </ol> <p>You should now see the repository at <code>https://github.com/YOUR_USERNAME/fm-playground</code></p>"},{"location":"developer-guide/existing-project/#step-2-clone-your-fork","title":"\ud83d\udce5 Step 2: Clone Your Fork","text":"<pre><code># Clone your forked repository\ngit clone https://github.com/YOUR_USERNAME/fm-playground.git\n\n# Navigate to the project directory\ncd fm-playground\n\n# Add the original repository as upstream (for future updates)\ngit remote add upstream https://github.com/fm4se/fm-playground.git\n\n# Verify your remotes\ngit remote -v\n# Should show:\n# origin    https://github.com/YOUR_USERNAME/fm-playground.git (fetch)\n# origin    https://github.com/YOUR_USERNAME/fm-playground.git (push)\n# upstream  https://github.com/fm4se/fm-playground.git (fetch)\n# upstream  https://github.com/fm4se/fm-playground.git (push)\n</code></pre>"},{"location":"developer-guide/existing-project/#step-3-environment-variables","title":"Step 3: Environment Variables","text":"<p>The FM Playground uses environment variables for configuration. There are two environment files- one in the frontend and one in the backend. Make a copy of the <code>.env.example</code> files in both directories and rename them to <code>.env</code>. Update the values as needed.</p> <pre><code># Navigate to frontend directory\ncd frontend\n# Copy the example env file\ncp .env.example .env\n# Update the .env file with your configuration\n\n# Navigate to backend directory\ncd ../backend\n# Copy the example env file\ncp .env.example .env\n# Update the .env file with your configuration\n</code></pre>"},{"location":"developer-guide/existing-project/#step-3-install-dependencies","title":"\ud83d\udd27 Step 3: Install Dependencies","text":"<p>The FM Playground consists of both frontend and backend components:</p>"},{"location":"developer-guide/existing-project/#frontend-setup","title":"Frontend Setup","text":"<pre><code># Navigate to frontend directory\ncd frontend\n\n# Install dependencies\nnpm install\n\n# This will install all required packages including:\n# - React and TypeScript\n# - Monaco Editor for code editing\n# - Vite for development server\n# - Material-UI components\n# - Tool-specific dependencies\n</code></pre>"},{"location":"developer-guide/existing-project/#backend-setup","title":"Backend Setup","text":"<pre><code># Navigate to backend directory (from project root)\ncd backend\n\n# Install poetry environment (if not already installed)\npoetry install --no-root  \n# This will set up the Python environment and install:\n</code></pre>"},{"location":"developer-guide/existing-project/#tool-specific-setup","title":"Tool Specific Setup","text":"<p>Each tool runs on its own backend service. Different tools may have different dependencies or setup requirements.</p>"},{"location":"developer-guide/existing-project/#alloy","title":"Alloy","text":"<p>Alloy uses a Java backend. Ensure you have Java 17 or higher installed. To install Alloy dependencies, run:</p> <pre><code># Navigate to Alloy tool directory\ncd alloy-api\n\n# Install Alloy dependencies and build the project\n./gradlew clean build -x test\n# This will compile the Alloy backend and prepare it for use\n</code></pre>"},{"location":"developer-guide/existing-project/#limboole","title":"Limboole","text":"<p>In the FM Playground, Limboole is running as a WebAssembly module. You can run it directly in the browser without additional setup. Though, for the completeness of the setup, you can also run it as a backend service. We are using FastAPI for the Limboole API.</p> <pre><code># Navigate to Limboole tool directory\ncd limboole-api\n# Install Limboole dependencies\npoetry install --no-root  \n# This will set up the Python environment and install necessary packages for Limboole\n</code></pre>"},{"location":"developer-guide/existing-project/#nuxmv","title":"nuXmv","text":"<p>nuXmv is running as a backend service using FastAPI. </p> <pre><code># Navigate to nuXmv tool directory\ncd nuxmv-api\n# Install nuXmv dependencies\npoetry install --no-root  \n# This will set up the Python environment and install necessary packages for nuXmv\n</code></pre>"},{"location":"developer-guide/existing-project/#smtz3","title":"SMT/Z3","text":"<p>In the FM Playground, SMT/Z3 is running a WebAssembly module. It also has a backend service using FastAPI. In case the WebAssembly module fails, it falls back to the backend service.</p> <pre><code># Navigate to SMT/Z3 tool directory\ncd z3-api\n# Install SMT/Z3 dependencies\npoetry install --no-root  \n# This will set up the Python environment and install necessary packages for SMT/Z3\n</code></pre>"},{"location":"developer-guide/existing-project/#spectra","title":"Spectra","text":"<p>Spectra is running as a backend service using FastAPI. </p> <pre><code># Navigate to Spectra tool directory\ncd spectra-api\n# Install Spectra dependencies\npoetry install --no-root  \n# This will set up the Python environment and install necessary packages for Spectra\n</code></pre>"},{"location":"developer-guide/existing-project/#step-4-start-development-environment","title":"\ud83d\ude80 Step 4: Start Development Environment","text":"<pre><code># From the project root, you can start both frontend and backend\n\n# Terminal 1: Start frontend\ncd frontend\nnpm run dev\n# Frontend will be available at http://localhost:5173\n\n# Terminal 2: Start backend (in a new terminal)\ncd backend  \npython app.py\n# Backend API will be available at http://localhost:8000\n</code></pre>"},{"location":"developer-guide/existing-project/#tool-specific-backend-services","title":"Tool-Specific Backend Services","text":"<p>You can start each tool's backend service in separate terminals:</p> <p>Note</p> <p>Each tool's backend service runs independently. You don't need to run all of them unless you want to test all tools simultaneously.</p> <pre><code># Terminal 3: Start Alloy backend\ncd alloy-api\n./gradlew bootRun\n# Alloy backend will be available at http://localhost:8080\n# Terminal 4: Start Limboole backend\ncd limboole-api\nuvicorn main:app --reload\n# Limboole backend will be available at http://localhost:8001\n# Terminal 5: Start nuXmv backend\ncd nuxmv-api\nuvicorn main:app --reload\n# nuXmv backend will be available at http://localhost:8002\n# Terminal 6: Start SMT/Z3 backend\ncd z3-api\nuvicorn main:app --reload\n# SMT/Z3 backend will be available at http://localhost:8003\n# Terminal 7: Start Spectra backend\ncd spectra-api\nuvicorn main:app --reload\n# Spectra backend will be available at http://localhost:8004\n</code></pre>"},{"location":"developer-guide/existing-project/#step-5-verify-your-setup","title":"\ud83e\uddea Step 5: Verify Your Setup","text":"<ol> <li>Check Frontend</li> </ol> <p>Open http://localhost:5173 in your browser. You should see:    - The FM Playground interface    - All the tools listed in the top (Alloy, Limboole, nuXmv, SMT, Spectra)</p> <ol> <li> <p>Test a Tool</p> </li> <li> <p>Select \"Limboole\" from the sidebar</p> </li> <li>Enter a simple boolean formula: <code>(a &amp; b) | c</code></li> <li>Click \"Run\" to test the tool execution</li> <li>Verify you get output</li> </ol> <p>You have successfully set up your FM Playground with all existing tools! You can now start developing new tools, modifying existing ones, or contributing back to the main project.</p>"},{"location":"developer-guide/existing-project/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>Now that you have the basic setup running, you can:</p> <ol> <li>Explore the Project Structure \u2192 - Understand the codebase organization</li> <li>Keep Your Fork Updated \u2192 - Learn to sync with upstream changes</li> <li>Add New Tools \u2192 - Extend the playground with custom tools</li> <li>Customize Your Setup \u2192 - Modify existing tools and interface</li> <li>Test and Deploy \u2192 - Test changes and build for production</li> </ol>"},{"location":"developer-guide/existing-project/#contributing-back","title":"\ud83e\udd1d Contributing Back","text":"<p>If you make improvements that could benefit others:</p> <ol> <li>Create a Pull Request following the Contributing Guide</li> <li>Follow Coding Standards as outlined in the Development Guide</li> <li>Add Tests for new features using the Testing Guide</li> </ol>"},{"location":"developer-guide/existing-project/#quick-links","title":"\ud83d\udd17 Quick Links","text":"<ul> <li>Main Repository - Source code and issues</li> <li>Development Guide - Advanced development topics</li> <li>API Reference - Backend API documentation</li> <li>Community Discussions - Ask questions and share ideas</li> </ul>"},{"location":"developer-guide/existing-project/project-structure/","title":"Project Structure Overview","text":"<p>This guide explains the organization and architecture of the FM Playground codebase to help you understand how components work together.</p>"},{"location":"developer-guide/existing-project/project-structure/#complete-project-structure","title":"\ud83d\udcc1 Complete Project Structure","text":"<p>Your forked FM Playground project contains:</p> <pre><code>fm-playground/\n\u251c\u2500\u2500 frontend/                   # React TypeScript application\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 api/                # API client functions\n\u2502   \u2502   \u251c\u2500\u2500 components/         # Reusable UI components\n\u2502   \u2502   \u251c\u2500\u2500 contexts/           # React contexts for global state\n\u2502   \u2502   \u251c\u2500\u2500 types/              # TypeScript type definitions\n\u2502   \u2502   \u251c\u2500\u2500 atoms.tsx           # Jotai state management\n\u2502   \u2502   \u251c\u2500\u2500 ToolMaps.tsx        # Tool registration and config\n\u2502   \u2502   \u2514\u2500\u2500 App.tsx             # Main application component\n\u2502   \u251c\u2500\u2500 tools/                  # Tool-specific implementations\n\u2502   \u2502   \u251c\u2500\u2500 alloy/              # Alloy tool implementation\n\u2502   \u2502   \u251c\u2500\u2500 limboole/           # Limboole tool implementation\n\u2502   \u2502   \u251c\u2500\u2500 smt/                # SMT/Z3 tool implementation\n\u2502   \u2502   \u251c\u2500\u2500 nuxmv/              # nuXmv tool implementation\n\u2502   \u2502   \u251c\u2500\u2500 spectra/            # Spectra tool implementation\n\u2502   \u2502   \u2514\u2500\u2500 common/             # Shared utilities\n\u2502   \u251c\u2500\u2500 public/                 # Static assets\n\u2502   \u251c\u2500\u2500 .env.example            # Environment variables example\n\u2502   \u251c\u2500\u2500 vite.config.ts          # Vite build configuration\n\u2502   \u251c\u2500\u2500 package.json            # Frontend dependencies\n\u2502   \u2514\u2500\u2500 tsconfig.json           # TypeScript configuration\n\u251c\u2500\u2500 backend/                    # Python Flask server\n\u2502   \u251c\u2500\u2500 db/                     # Database models and queries\n\u2502   \u2502   \u251c\u2500\u2500 models.py           # SQLAlchemy models\n\u2502   \u2502   \u2514\u2500\u2500 db_query.py         # Database query functions\n\u2502   \u251c\u2500\u2500 routes/                 # API routes\n\u2502   \u2502   \u251c\u2500\u2500 authentication.py   # OAuth and session management\n\u2502   \u2502   \u2514\u2500\u2500 playground.py       # Core API endpoints\n\u2502   \u251c\u2500\u2500 utils/                  # Utility functions\n\u2502   \u251c\u2500\u2500 migrations/             # Database migrations\n\u2502   \u251c\u2500\u2500 app.py                  # Main application entry point\n\u2502   \u251c\u2500\u2500 config.py               # Application configuration\n\u2502   \u251c\u2500\u2500 .env.example            # Environment variables example\n\u2502   \u251c\u2500\u2500 requirements.txt        # Python dependencies (pip)\n\u2502   \u2514\u2500\u2500 pyproject.toml          # Python dependencies (poetry)\n\u251c\u2500\u2500 alloy-api/                  # Alloy backend service (Java)\n\u2502   \u251c\u2500\u2500 src/                    # Java source code\n\u2502   \u251c\u2500\u2500 lib/                    # Alloy JAR files\n\u2502   \u251c\u2500\u2500 build.gradle            # Gradle build configuration\n\u2502   \u2514\u2500\u2500 Dockerfile              # Container configuration\n\u251c\u2500\u2500 limboole-api/               # Limboole backend service (Python)\n\u2502   \u251c\u2500\u2500 limboole.py             # Limboole execution logic\n\u2502   \u251c\u2500\u2500 main.py                 # FastAPI application\n\u2502   \u251c\u2500\u2500 tests/                  # Unit tests\n\u2502   \u251c\u2500\u2500 lib/                    # Limboole binaries\n\u2502   \u251c\u2500\u2500 pyproject.toml          # Poetry configuration\n\u2502   \u2514\u2500\u2500 Dockerfile              # Container configuration\n\u251c\u2500\u2500 nuxmv-api/                  # nuXmv backend service (Python)\n\u2502   \u251c\u2500\u2500 nuxmv.py                # nuXmv execution logic\n\u2502   \u251c\u2500\u2500 main.py                 # FastAPI application\n\u2502   \u251c\u2500\u2500 tests/                  # Unit tests\n\u2502   \u251c\u2500\u2500 lib/                    # nuXmv binaries\n\u2502   \u251c\u2500\u2500 pyproject.toml          # Poetry configuration\n\u2502   \u2514\u2500\u2500 Dockerfile              # Container configuration\n\u251c\u2500\u2500 z3-api/                     # SMT/Z3 backend service (Python)\n\u2502   \u251c\u2500\u2500 z3.py                   # Z3 execution logic\n\u2502   \u251c\u2500\u2500 main.py                 # FastAPI application\n\u2502   \u251c\u2500\u2500 tests/                  # Unit tests\n\u2502   \u251c\u2500\u2500 pyproject.toml          # Poetry configuration\n\u2502   \u2514\u2500\u2500 Dockerfile              # Container configuration\n\u251c\u2500\u2500 spectra-api/                # Spectra backend service (Python)\n\u2502   \u251c\u2500\u2500 spectra.py              # Spectra execution logic\n\u2502   \u251c\u2500\u2500 main.py                 # FastAPI application\n\u2502   \u251c\u2500\u2500 tests/                  # Unit tests\n\u2502   \u251c\u2500\u2500 lib/                    # Spectra binaries\n\u2502   \u251c\u2500\u2500 pyproject.toml          # Poetry configuration\n\u2502   \u2514\u2500\u2500 Dockerfile              # Container configuration\n\u251c\u2500\u2500 .github/                    # GitHub Actions workflows\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u2514\u2500\u2500 ci.yml              # Continuous integration\n\u251c\u2500\u2500 docs/                       # Documentation (this site!)\n\u251c\u2500\u2500 compose.yml                 # Docker Compose configuration\n\u251c\u2500\u2500 .env.example                # Global environment variables\n\u251c\u2500\u2500 .gitignore                  # Git ignore patterns\n\u251c\u2500\u2500 .pre-commit-config.yaml     # Pre-commit hooks configuration\n\u251c\u2500\u2500 python-setup.toml           # Python project metadata\n\u251c\u2500\u2500 update_versions.py          # Version management script\n\u251c\u2500\u2500 CHANGELOG.md                # Release notes\n\u251c\u2500\u2500 LICENSE                     # MIT License\n\u2514\u2500\u2500 README.md                   # Project documentation\n</code></pre>"},{"location":"developer-guide/existing-project/project-structure/#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":""},{"location":"developer-guide/existing-project/project-structure/#data-flow-diagram","title":"Data Flow Diagram","text":""},{"location":"developer-guide/existing-project/project-structure/#frontend-architecture","title":"Frontend Architecture","text":"<p>The frontend is a React TypeScript application built with Vite:</p> <pre><code>Frontend (React + TypeScript)\n\u251c\u2500\u2500 Monaco Editor (Code editing)\n\u251c\u2500\u2500 Material-UI (UI components)\n\u251c\u2500\u2500 Jotai (State management)\n\u251c\u2500\u2500 React Router (Navigation)\n\u2514\u2500\u2500 Tool-specific components\n</code></pre>"},{"location":"developer-guide/existing-project/project-structure/#key-files","title":"Key Files","text":"<ul> <li><code>src/api/playgroundApi.ts</code> - API client functions for interacting with the backend. This file contains functions for fetching, saving, authenticating, and managing user sessions.</li> <li><code>src/components/Editor.tsx</code> - Monaco code editor wrapper for React. </li> <li> <p><code>src/components/LspEditor.tsx</code> - This is another wrapper around the Monaco Editor by TypeFox that integrates with Language Server Protocol (LSP) for enhanced code editing features.</p> </li> <li> <p><code>src/ToolMaps.tsx</code> - Central tool configuration and registration. This file maps each tool to its configuration, including API endpoints, file extensions, and language support. <pre><code>// ToolMaps.tsx\nexport const fmpConfig: FmpConfig = {\n  title: 'FM Playground',\n  repository: 'https://github.com/fm4se/fm-playground',\n  issues: 'https://github.com/fm4se/fm-playground/issues',\n  tools: {\n    als: { name: 'Alloy', extension: 'als', shortName: 'ALS' },\n    xmv: { name: 'nuXmv', extension: '.xmv', shortName: 'XMV' },\n    ... // Other tools\n  },\n};\n</code></pre></p> </li> <li> <p><code>src/atoms.tsx</code> - Global state management with Jotai. This file defines global state atoms for managing the current tool, code content, and execution results e.g.:</p> <ul> <li><code>languageAtom</code> - Currently selected tool</li> <li><code>editorValueAtom</code> - Current code content</li> <li><code>outputAtom</code> - Execution results</li> <li>You can add more atoms as needed for additional state management.</li> </ul> </li> <li><code>tools/common/lspWrapperConfig.ts</code> - Configuration for the LSP wrapper, including language server settings and capabilities. For example, this file contains the configuration for the SMT language server, including its capabilities and supported languages.</li> </ul> <pre><code>//lspWrapperConfig.ts\n// Load the worker ports for SMT\nconst smtExtensionFilesOrContents = new Map&lt;string, string | URL&gt;();\nsmtExtensionFilesOrContents.set(`/smt-configuration.json`, smtLanguageConfig);\nsmtExtensionFilesOrContents.set(`/smt-grammar.json`, responseSmtTm);\n\n// Create message channels for each worker\nconst smtChannel = new MessageChannel();\nsmtWorkerPort.postMessage({ port: smtChannel.port2 }, [smtChannel.port2]);\n\n// Create message readers and writers for each channel\nconst smtReader = new BrowserMessageReader(smtChannel.port1);\nconst smtWriter = new BrowserMessageWriter(smtChannel.port1);\n\nreturn {\n  ...,\n  languageClientConfigs: {\n    smt: {\n        languageId: 'smt',\n        connection: {\n            options: {\n                $type: 'WorkerDirect',\n                worker: smtWorkerPort,\n                messagePort: smtChannel.port1,\n            },\n            messageTransports: { reader: smtReader, writer: smtWriter },\n        },\n    },\n  }\n}\n</code></pre> <ul> <li><code>vite.config.ts</code> - Vite build configuration for the frontend application, including plugins and optimization settings. There is a proxy configuration for API calls to the backend services, allowing you to access the tool APIs without CORS. This comes in handy when deploying the application in a containerized environment, where the frontend and backend services are running on different ports or domains.</li> </ul> <pre><code>// vite.config.ts\nproxy: {\n  '/nuxmv': {\n      target: 'http://fmp-nuxmv-api:8080',\n      changeOrigin: true,\n      secure: false,\n      rewrite: (path) =&gt; path.replace(/^\\/nuxmv/, ''),\n  },\n  '/smt': {\n      target: 'http://fmp-z3-api:8080',\n      changeOrigin: true,\n      secure: false,\n      rewrite: (path) =&gt; path.replace(/^\\/smt/, ''),\n  },\n  '/alloy': {\n      target: 'http://fmp-alloy-api:8080',\n      changeOrigin: true,\n      secure: false,\n      rewrite: (path) =&gt; path.replace(/^\\/alloy/, ''),\n  },\n  '/spectra': {\n      target: 'http://fmp-spectra-api:8080',\n      changeOrigin: true,\n      secure: false,\n      rewrite: (path) =&gt; path.replace(/^\\/spectra/, ''),\n  },\n},\n</code></pre>"},{"location":"developer-guide/existing-project/project-structure/#backend-architecture","title":"Backend Architecture","text":"<p>The backend follows a microservices architecture:</p> <pre><code>Backend Services\n\u251c\u2500\u2500 Main Backend (Flask)          # Session, auth, data management\n\u251c\u2500\u2500 Z3 API (FastAPI)              # SMT solver\n\u251c\u2500\u2500 Limboole API (FastAPI)        # SAT solver\n\u251c\u2500\u2500 nuXmv API (FastAPI)           # Model checker\n\u251c\u2500\u2500 Spectra API (FastAPI)         # Reactive synthesis\n\u2514\u2500\u2500 Alloy API (Spring Boot)       # Relational modeling\n</code></pre>"},{"location":"developer-guide/existing-project/project-structure/#key-files_1","title":"Key Files","text":"<ul> <li><code>app.py</code> - Main Flask application entry point. </li> <li><code>config.py</code> - Application configuration, including logging, rate limiting, database and OAuth settings</li> <li><code>routes/authentication.py</code> - OAuth login, session management</li> <li><code>routes/playground.py</code> - Core API endpoints for saving/loading code, user history etc. Look at the API documentation (#TODO) for more details on the available endpoints and their usage.</li> </ul>"},{"location":"developer-guide/existing-project/project-structure/#tool-specific-backend-architecture","title":"Tool-Specific Backend Architecture","text":"<p>Each tool runs as a separate microservice, allowing independent scaling and development. The backend services are implemented using FastAPI for Python-based tools and Spring Boot for the Alloy API.</p>"},{"location":"developer-guide/existing-project/project-structure/#alloy-api-java","title":"alloy-api (Java)","text":""},{"location":"developer-guide/existing-project/project-structure/#key-files_2","title":"Key Files","text":"<ul> <li><code>src/main/java/.../AlloyInstanceController.java</code> - All the API endpoints for Alloy, including model parsing, execution, and result retrieval. Additionally, a timeout mechanism is implemented to handle long-running Alloy executions.</li> </ul>"},{"location":"developer-guide/existing-project/project-structure/#python-based-apis-limboole-nuxmv-smt-spectra","title":"Python-based APIs (Limboole, nuXmv, SMT, Spectra)","text":"<p>The limboole-api, nuXmv-api, z3-api and spectra-api are implemented using FastAPI. They provide endpoints for executing the Limboole tool, managing input files, and retrieving results. These services execute the respective tool binaries in a subprocess and return the results via HTTP.</p>"},{"location":"developer-guide/existing-project/project-structure/#key-files_3","title":"Key Files","text":"<ul> <li> <p><code>main.py</code> - FastAPI application entry point, defining API routes and handling requests. Additionally, it includes a redis cache for storing results. For example the nuXmv API- <pre><code>def run_nuxmv(code: str) -&gt; str:\n  if is_redis_available():\n    @cache.cache()\n    def cached_run_nuxmv(code: str) -&gt; str:\n      return process_commands(code)\n    try:\n      return cached_run_nuxmv(code)\n    except Exception:\n      raise HTTPException(status_code=500, detail=\"Error running nuXmv cli\")\n  else:\n    try:\n      return process_commands(code)\n    except Exception:\n      raise HTTPException(status_code=500, detail=\"Error running nuXmv cli\")\n</code></pre></p> </li> <li> <p><code>{tool}.py</code> - Tool-specific logic for executing the tool and processing results. For example, the <code>nuxmv.py</code> file contains the logic for executing the nuXmv tool, parsing the output, and returning the results in a structured format. <pre><code># nuxmv.py\ndef run_nuxmv(code: str) -&gt; str:\n  tmp_file = tempfile.NamedTemporaryFile(mode='w', delete=False)\n  tmp_file.write(code.strip())  \n  tmp_file.close()\n\n  command = [NU_XMV_PATH, \"-dynamic\", tmp_file.name] \n  try:\n    result = subprocess.run(command, capture_output=True, text=True, timeout=60)\n    os.remove(tmp_file.name)\n    if result.returncode != 0:\n      return prettify_error(result.stderr)\n    return prettify_output(result.stdout)+ prettify_error(result.stderr)\n  except subprocess.TimeoutExpired:\n    os.remove(tmp_file.name)\n    return f\"&lt;i style='color: red;'&gt;Timeout: Process timed out after 60 seconds.&lt;/i&gt;\"\n</code></pre></p> </li> <li> <p><code>lib/</code> - Tool binaries and dependencies. This directory contains the tool binaries, such as the Limboole binary, nuXmv binary, and Z3 solver, which are required for executing the respective tools. These binaries are not included in the repository (except Spectra) but can be downloaded from the respective tool websites and placed in this directory.</p> </li> </ul>"},{"location":"developer-guide/existing-project/project-structure/#next-steps","title":"\ud83d\udd17 Next Steps","text":"<p>Now that you understand the project structure:</p>"},{"location":"developer-guide/start-from-scratch/","title":"Start from Scratch","text":"<p>This guide covers creating a new FM Playground project using <code>fmp-create</code>. This approach gives you a minimal, customizable setup with only the tools you need.</p>"},{"location":"developer-guide/start-from-scratch/#overview","title":"\ud83c\udfaf Overview","text":"<p>The start-from-scratch approach is ideal when you:</p> <ul> <li>Want a clean, minimal starting point</li> <li>Only need specific formal method tools</li> <li>Prefer to avoid unnecessary dependencies</li> <li>Are building a specialized or domain-specific playground</li> <li>Want to learn the platform architecture step by step</li> </ul>"},{"location":"developer-guide/start-from-scratch/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Node.js (version 16 or higher) - Download here</li> <li>Python (version 3.8 or higher) - Download here</li> <li>Docker (optional but recommended) - Download here</li> <li>Code Editor - VS Code recommended</li> </ul>"},{"location":"developer-guide/start-from-scratch/#quick-setup-verification","title":"Quick Setup Verification","text":"<pre><code># Check Node.js version\nnode --version\n# Should show v16.0.0 or higher\n\n# Check Python version\npython --version\n# Should show Python 3.8.0 or higher\n\n# Check Docker (optional)\ndocker --version\n# Should show Docker version info\n</code></pre>"},{"location":"developer-guide/start-from-scratch/#getting-started","title":"\ud83d\ude80 Getting Started","text":""},{"location":"developer-guide/start-from-scratch/#interactive-setup","title":"Interactive Setup","text":"<pre><code># Create a new FM Playground project\nnpx fmp-create\n</code></pre> <p>This starts an interactive setup process that guides you through all configuration options.</p>"},{"location":"developer-guide/start-from-scratch/#1-project-name","title":"1. Project Name","text":"<pre><code>? What is your project name? (my-fm-playground)\n</code></pre> <p>Guidelines:</p> <ul> <li>Use lowercase letters, numbers, hyphens, and underscores only</li> <li>Examples: <code>my-fm-playground</code>, <code>logic-solver</code>, <code>verification-tools</code></li> <li>This will be your project folder name</li> </ul>"},{"location":"developer-guide/start-from-scratch/#2-tool-selection","title":"2. Tool Selection","text":"<pre><code>? Which formal method tools would you like to include? \n  (Leave empty for a minimal setup)\n\u276f\u25ef Alloy - A declarative modeling language for software systems\n \u25ef Limboole - A SAT-based tool for Boolean reasoning  \n \u25ef nuXmv - A symbolic model checker for finite and infinite-state systems\n \u25ef SMT (Z3) - A SMT solver for satisfiability modulo theories\n \u25ef Spectra - A specification language for reactive systems\n</code></pre> <p>Available Tools:</p> Tool Description Use Cases Language Alloy Declarative modeling language System modeling, constraint solving Java Limboole SAT-based Boolean reasoning Propositional logic, satisfiability Python nuXmv Symbolic model checker Temporal logic, verification Python SMT (Z3) SMT solver Mathematical theories, constraint solving Python Spectra Reactive systems GR(1) synthesis, reactive systems Python <p>Selection Tips:</p> <ul> <li>Use Space to select/deselect tools</li> <li>Use Arrow keys to navigate</li> <li>Select none for minimal setup (you can add tools later)</li> <li>Select all if you want the full experience</li> </ul>"},{"location":"developer-guide/start-from-scratch/#3-dependency-installation","title":"3. Dependency Installation","text":"<pre><code>? Would you like to install dependencies? (Y/n)\n</code></pre> <ul> <li>Yes (recommended): Automatically installs all npm dependencies</li> <li>No: You'll need to run <code>npm install</code> manually later</li> </ul>"},{"location":"developer-guide/start-from-scratch/#example-sessions","title":"\ud83d\udca1 Example Sessions","text":""},{"location":"developer-guide/start-from-scratch/#minimal-setup-no-tools","title":"Minimal Setup (No Tools)","text":"<pre><code>$ npx fmp-create\n\n\ud83d\ude80 Create FM Playground\nSet up a new Formal Methods playground project\n\n? What is your project name? my-minimal-playground\n? Which formal method tools would you like to include? \n  (Leave empty for a minimal setup) (none selected)\n? Would you like to install dependencies? Yes\n\n\u2714 Creating FM Playground project...\n\u2714 Dependencies installed successfully!\n\n\u2705 FM Playground project created successfully!\n\nTo get started:\n\n  cd my-minimal-playground/frontend\n  npm run dev\n\nNo tools selected - minimal playground setup created.\nYou can add tools later using the `npx fmp-tool` command.\n\nHappy formal method modeling! \ud83c\udf89\n</code></pre>"},{"location":"developer-guide/start-from-scratch/#full-setup-all-tools","title":"Full Setup (All Tools)","text":"<pre><code>$ npx fmp-create\n\n\ud83d\ude80 Create FM Playground\nSet up a new Formal Methods playground project\n\n? What is your project name? my-full-playground\n? Which formal method tools would you like to include?\n\u276f\u25c9 Alloy - A declarative modeling language for software systems\n \u25c9 Limboole - A SAT-based tool for Boolean reasoning\n \u25c9 nuXmv - A symbolic model checker for finite and infinite-state systems\n \u25c9 SMT (Z3) - A SMT solver for satisfiability modulo theories\n \u25c9 Spectra - A specification language for reactive systems\n? Would you like to install dependencies? Yes\n\n\u2714 Creating FM Playground project...\n\u2714 Dependencies installed successfully!\n\n\u2705 FM Playground project created successfully!\n\nTo get started:\n\n  cd my-full-playground/frontend\n  npm run dev\n\nSelected tools:\n  \u2022 Alloy - A declarative modeling language for software systems\n  \u2022 Limboole - A SAT-based tool for Boolean reasoning\n  \u2022 nuXmv - A symbolic model checker for finite and infinite-state systems\n  \u2022 SMT (Z3) - A SMT solver for satisfiability modulo theories\n  \u2022 Spectra - A specification language for reactive systems\n\nHappy formal method modeling! \ud83c\udf89\n</code></pre>"},{"location":"developer-guide/start-from-scratch/#what-gets-created","title":"\ud83d\udd27 What Gets Created","text":"<p>Based on your selections, <code>fmp-create</code> will generate:</p>"},{"location":"developer-guide/start-from-scratch/#always-created","title":"Always Created","text":"<ul> <li>Frontend: React TypeScript application</li> <li>Backend: Python Flask application</li> <li>Docker Configuration: docker-compose.yml</li> <li>Documentation: README.md with setup instructions</li> </ul>"},{"location":"developer-guide/start-from-scratch/#tool-specific-based-on-selection","title":"Tool-Specific (Based on Selection)","text":"<ul> <li>alloy-api/: Java Gradle service (if Alloy selected)</li> <li>limboole-api/: Python FastAPI service (if Limboole selected)</li> <li>nuxmv-api/: Python FastAPI service (if nuXmv selected)</li> <li>z3-api/: Python FastAPI service (if SMT selected)</li> <li>spectra-api/: Python FastAPI service (if Spectra selected)</li> </ul>"},{"location":"developer-guide/start-from-scratch/#frontend-integration","title":"Frontend Integration","text":"<ul> <li>Tool Components: Only for selected tools</li> <li>ToolMaps Configuration: Customized for your selection</li> <li>Monaco Language Support: For selected tool languages</li> <li>API Client Code: For selected tool endpoints</li> </ul>"},{"location":"developer-guide/start-from-scratch/#common-issues","title":"\u26a0\ufe0f Common Issues","text":""},{"location":"developer-guide/start-from-scratch/#1-directory-already-exists","title":"1. Directory Already Exists","text":"<pre><code>Error: Directory 'my-project' already exists\n</code></pre> <p>Solution: <pre><code># Remove existing directory\nrm -rf my-project\n\n# Or choose a different name\nnpx fmp-create\n</code></pre></p>"},{"location":"developer-guide/start-from-scratch/#2-permission-errors","title":"2. Permission Errors","text":"<pre><code>Error: EACCES: permission denied\n</code></pre> <p>Solution: <pre><code># Fix npm permissions (macOS/Linux)\nsudo chown -R $(whoami) ~/.npm\n\n# Or use different cache\nnpx --cache /tmp/npx-cache fmp-create\n</code></pre></p>"},{"location":"developer-guide/start-from-scratch/#3-network-issues","title":"3. Network Issues","text":"<pre><code>Error: Failed to download templates\n</code></pre> <p>Solution: <pre><code># Check internet connection\n# Try with different registry\nnpx --registry https://registry.npmjs.org/ fmp-create\n</code></pre></p>"},{"location":"developer-guide/start-from-scratch/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>After project creation:</p> <ol> <li>Understand Project Structure \u2192</li> </ol>"},{"location":"developer-guide/start-from-scratch/project-structure/","title":"Project Structure Guide","text":"<p>This guide explains the structure of your FM Playground project created with <code>fmp-create</code>.</p>"},{"location":"developer-guide/start-from-scratch/project-structure/#overview","title":"\ud83d\udcc1 Overview","text":"<p>Your project follows a microservices architecture with separate services for frontend, backend, and each formal method tool.</p> <pre><code>my-fm-playground/\n\u251c\u2500\u2500 frontend/                    # React TypeScript application\n\u251c\u2500\u2500 backend/                     # Python Flask/FastAPI server  \n\u251c\u2500\u2500 [tool-name]-api/            # Tool-specific microservices\n\u251c\u2500\u2500 compose.yml                 # Docker Compose configuration\n\u2514\u2500\u2500 README.md                   # Project documentation\n</code></pre>"},{"location":"developer-guide/start-from-scratch/project-structure/#frontend-structure","title":"\ud83c\udfa8 Frontend Structure","text":"<p>The frontend structure is similar to </p> <pre><code>frontend/\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u251c\u2500\u2500 api/                # API client functions\n\u2502   \u2502   \u251c\u2500\u2500 components/         # Reusable UI components\n\u2502   \u2502   \u251c\u2500\u2500 contexts/           # React contexts for global state\n\u2502   \u2502   \u251c\u2500\u2500 types/              # TypeScript type definitions\n\u2502   \u2502   \u251c\u2500\u2500 atoms.tsx           # Jotai state management\n\u2502   \u2502   \u251c\u2500\u2500 ToolMaps.tsx        # Tool registration and config\n\u2502   \u2502   \u2514\u2500\u2500 App.tsx             # Main application component\n\u251c\u2500\u2500 tools/                      # Tool implementations\n\u2502   \u251c\u2500\u2500 alloy/                  # (if selected)\n\u2502   \u251c\u2500\u2500 limboole/               # (if selected)\n\u2502   \u251c\u2500\u2500 common/                 # Shared utilities\n\u2502   \u2514\u2500\u2500 [other-tools]/          # Based on selection\n\u251c\u2500\u2500 index.html                  # HTML template\n\u251c\u2500\u2500 package.json                # Dependencies\n\u2514\u2500\u2500 vite.config.ts              # Build configuration\n</code></pre>"},{"location":"developer-guide/start-from-scratch/project-structure/#key-frontend-files","title":"Key Frontend Files","text":"<ul> <li><code>src/ToolMaps.tsx</code> Central configuration for all tools. If you selected only Alloy and Limboole, it would look like this:</li> </ul> <pre><code>export const fmpConfig: FmpConfig = {\n  title: 'FM Playground',\n  repository: 'https://github.com/fm4se/fm-playground',\n  issues: 'https://github.com/fm4se/fm-playground/issues',\n  tools: {\n    als: { name: 'Alloy', extension: 'als', shortName: 'ALS' },\n    limboole: { name: 'Limboole', extension: 'limboole', shortName: 'SAT' },\n  },\n};\n</code></pre> <ul> <li><code>src/atoms.tsx</code> Global state management with Jotai:</li> </ul> <pre><code>export const editorValueAtom = atom('');\nexport const languageAtom = atom('alloy');\nexport const outputAtom = atom('');\nexport const isExecutingAtom = atom(false);\n</code></pre> <ul> <li><code>tools/[tool-name]/</code> Each tool has its own directory with:<ul> <li>Executor: Core execution logic</li> <li>TextMate Grammar: Syntax highlighting</li> <li>Components: Optional UI components</li> </ul> </li> </ul> <p>Note</p> <p>The <code>backend</code> and <code>{tool}-api</code> structures are same as described in the Existing Project Structure guide.</p>"},{"location":"developer-guide/start-from-scratch/project-structure/#docker-configuration","title":"\ud83d\udc33 Docker Configuration","text":""},{"location":"developer-guide/start-from-scratch/project-structure/#main-composeyml","title":"Main <code>compose.yml</code>","text":"<pre><code>version: '3.8'\nservices:\n  frontend:\n    build: ./frontend\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - backend\n\n  backend:\n    build: ./backend\n    ports:\n      - \"8000:8000\"\n    environment:\n      - FLASK_ENV=development\n\n  # Only selected tools appear here\n  alloy-api:\n    build: ./alloy-api\n    ports:\n      - \"8001:8001\"\n\n  limboole-api:\n    build: ./limboole-api\n    ports:\n      - \"8002:8002\"\n</code></pre>"},{"location":"developer-guide/start-from-scratch/project-structure/#individual-service-configs","title":"Individual Service Configs","text":"<p>Each tool API has its own <code>compose.yml</code> for standalone development:</p> <pre><code># limboole-api/compose.yml\nversion: '3.8'\nservices:\n  limboole-api:\n    build: .\n    ports:\n      - \"8002:8002\"\n    volumes:\n      - .:/app\n    environment:\n      - PYTHONPATH=/app\n</code></pre>"},{"location":"developer-guide/start-from-scratch/project-structure/#service-communication","title":"\ud83c\udf10 Service Communication","text":""},{"location":"developer-guide/start-from-scratch/project-structure/#frontend-backend","title":"Frontend \u2194 Backend","text":"<pre><code>// frontend/src/api/tools.ts\nexport const executetool = async (tool: string, code: string) =&gt; {\n  const response = await fetch(`${API_BASE}/api/execute/${tool}`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ code })\n  });\n  return response.json();\n};\n</code></pre>"},{"location":"developer-guide/start-from-scratch/project-structure/#backend-tool-apis","title":"Backend \u2194 Tool APIs","text":"<pre><code># backend/routes/proxy.py\nimport requests\n\ndef proxy_to_tool_api(tool, data):\n    tool_urls = {\n        'alloy': 'http://alloy-api:8001',\n        'limboole': 'http://limboole-api:8002',\n    }\n\n    url = f\"{tool_urls[tool]}/execute\"\n    response = requests.post(url, json=data)\n    return response.json()\n</code></pre>"},{"location":"developer-guide/start-from-scratch/project-structure/#architecture-benefits","title":"\ud83d\udcca Architecture Benefits","text":""},{"location":"developer-guide/start-from-scratch/project-structure/#microservices-advantages","title":"Microservices Advantages","text":"<ol> <li>Independence: Each tool can be developed/deployed separately</li> <li>Scalability: Scale individual tools based on usage</li> <li>Technology Freedom: Use best language for each tool</li> <li>Isolation: Tool failures don't affect others</li> <li>Development: Teams can work on different tools independently</li> </ol>"},{"location":"developer-guide/start-from-scratch/project-structure/#service-boundaries","title":"Service Boundaries","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Frontend  \u2502    \u2502   Backend   \u2502    \u2502  Tool APIs  \u2502\n\u2502             \u2502    \u2502             \u2502    \u2502             \u2502\n\u2502 React/Vite  \u2502\u25c4\u2500\u2500\u25ba\u2502Python/Flask \u2502\u25c4\u2500\u2500\u25ba\u2502Various Lang \u2502\n\u2502             \u2502    \u2502             \u2502    \u2502             \u2502\n\u2502   Port:3000 \u2502    \u2502   Port:8000 \u2502    \u2502 Ports:8001+ \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"developer-guide/start-from-scratch/project-structure/#understanding-your-selection","title":"\ud83d\udd0d Understanding Your Selection","text":""},{"location":"developer-guide/start-from-scratch/project-structure/#minimal-setup-no-tools","title":"Minimal Setup (No Tools)","text":"<pre><code>my-playground/\n\u251c\u2500\u2500 frontend/        # Basic UI only\n\u251c\u2500\u2500 backend/         # Coordination layer\n\u251c\u2500\u2500 compose.yml      # Frontend + Backend only\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"developer-guide/start-from-scratch/project-structure/#full-setup-all-tools","title":"Full Setup (All Tools)","text":"<pre><code>my-playground/\n\u251c\u2500\u2500 frontend/        # Full UI with all tools\n\u251c\u2500\u2500 backend/         # Full coordination layer\n\u251c\u2500\u2500 alloy-api/       # Java service\n\u251c\u2500\u2500 limboole-api/    # Python service\n\u251c\u2500\u2500 nuxmv-api/       # Python service\n\u251c\u2500\u2500 z3-api/          # Python service\n\u251c\u2500\u2500 spectra-api/     # Python service\n\u251c\u2500\u2500 compose.yml      # All services\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"developer-guide/start-from-scratch/project-structure/#custom-selection-example","title":"Custom Selection Example","text":"<p>If you selected only Alloy and Limboole:</p> <pre><code>my-playground/\n\u251c\u2500\u2500 frontend/        # UI with Alloy + Limboole\n\u251c\u2500\u2500 backend/         # Coordination layer\n\u251c\u2500\u2500 alloy-api/       # Java service\n\u251c\u2500\u2500 limboole-api/    # Python service\n\u251c\u2500\u2500 compose.yml      # 4 services total\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"developer-guide/start-from-scratch/project-structure/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>Now that you understand the structure:</p> <ol> <li>Set Up Development \u2192 - Get your playground running</li> <li>Add Tools \u2192 - Extend with more formal method tools</li> <li>Customize \u2192 - Personalize your playground</li> </ol>"},{"location":"developer-guide/start-from-scratch/project-structure/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Start Simple: Begin with one tool, understand the flow</li> <li>Use Docker: Simplifies service orchestration</li> <li>Check Logs: <code>docker-compose logs [service]</code> for debugging</li> <li>Modify Gradually: Change one service at a time</li> </ul>"},{"location":"development/adding-tools/","title":"Adding New Tools","text":"<p>FM Playground is designed to be extensible, allowing you to add new formal methods tools easily. This guide walks you through the process of integrating a new tool into the platform.</p>"},{"location":"development/adding-tools/#overview","title":"Overview","text":"<p>Each tool in FM Playground consists of:</p> <ul> <li>API Service: A containerized backend service that handles tool execution</li> <li>Frontend Integration: UI components for tool interaction</li> <li>Configuration: Tool metadata and Docker orchestration</li> </ul>"},{"location":"development/adding-tools/#architecture-pattern","title":"Architecture Pattern","text":"<p>Integrating a new tool consists of two main steps:</p> <ol> <li>Backend Service: Create a backend service that executes the tool and expose APIs for interaction. You can develop a new service or use existing APIs running anywhere that can be accessed by the frontend.</li> <li>Frontend Integration: Add the tool to the frontend, allowing users to interact with it through the UI.</li> </ol>"},{"location":"development/adding-tools/#step-1-choose-your-tool","title":"Step 1: Choose Your Tool","text":"<p>For this example, we will integrate nuXmv, since it is already supported in FM Playground and the simplest to set up. However, the same principles apply to any tool you wish to add.</p>"},{"location":"development/adding-tools/#prerequisites","title":"Prerequisites","text":"<p>Before adding a tool, ensure:</p> <ul> <li>The tool can be automated/scripted e.g. via command line or API</li> <li>You understand its input/output formats</li> <li>Licensing allows redistribution (if including binaries)</li> </ul>"},{"location":"development/adding-tools/#_1","title":"Adding Tools","text":""},{"location":"development/adding-tools/#step-2-create-the-api-service","title":"Step 2: Create the API Service","text":""},{"location":"development/adding-tools/#create-directory-structure","title":"Create Directory Structure","text":"<pre><code>cd fm-playground-main\nmkdir cbmc-api\ncd cbmc-api\n</code></pre>"},{"location":"development/adding-tools/#core-service-mainpy","title":"Core Service (<code>main.py</code>)","text":"<pre><code>from fastapi import FastAPI, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel\nimport uvicorn\nfrom cbmc import CBMCTool\n\napp = FastAPI(\n    title=\"CBMC API\",\n    description=\"Bounded Model Checker for C/C++ programs\",\n    version=\"1.0.0\"\n)\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\ncbmc_tool = CBMCTool()\n\nclass CBMCRequest(BaseModel):\n    code: str\n    options: dict = {}\n\nclass CBMCResponse(BaseModel):\n    success: bool\n    output: str\n    error: str = \"\"\n    verification_result: str = \"\"\n\n@app.post(\"/run\", response_model=CBMCResponse)\nasync def run_cbmc(request: CBMCRequest):\n    try:\n        result = cbmc_tool.run(request.code, request.options)\n        return CBMCResponse(\n            success=result['success'],\n            output=result['output'],\n            verification_result=result.get('verification_result', ''),\n            error=result.get('error', '')\n        )\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n\n@app.get(\"/health\")\nasync def health():\n    return {\"status\": \"healthy\", \"tool\": \"cbmc\"}\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"development/adding-tools/#tool-implementation-cbmcpy","title":"Tool Implementation (<code>cbmc.py</code>)","text":"<pre><code>import subprocess\nimport tempfile\nimport os\nfrom pathlib import Path\n\nclass CBMCTool:\n    def __init__(self):\n        self.cbmc_path = \"/usr/local/bin/cbmc\"\n\n    def run(self, code: str, options: dict = {}) -&gt; dict:\n        \"\"\"Execute CBMC on the provided C code.\"\"\"\n\n        # Create temporary file for C code\n        with tempfile.NamedTemporaryFile(mode='w', suffix='.c', delete=False) as f:\n            f.write(code)\n            temp_file = f.name\n\n        try:\n            # Build command\n            cmd = [self.cbmc_path]\n\n            # Add options\n            if options.get('unwind'):\n                cmd.extend(['--unwind', str(options['unwind'])])\n            if options.get('bounds_check', True):\n                cmd.append('--bounds-check')\n            if options.get('memory_leak_check'):\n                cmd.append('--memory-leak-check')\n\n            cmd.append(temp_file)\n\n            # Execute CBMC\n            result = subprocess.run(\n                cmd,\n                capture_output=True,\n                text=True,\n                timeout=30\n            )\n\n            # Parse output\n            success = result.returncode == 0\n            verification_result = self._parse_verification_result(result.stdout)\n\n            return {\n                'success': success,\n                'output': result.stdout,\n                'error': result.stderr if result.stderr else '',\n                'verification_result': verification_result\n            }\n\n        except subprocess.TimeoutExpired:\n            return {\n                'success': False,\n                'output': '',\n                'error': 'Execution timeout (30s)',\n                'verification_result': 'TIMEOUT'\n            }\n        except Exception as e:\n            return {\n                'success': False,\n                'output': '',\n                'error': str(e),\n                'verification_result': 'ERROR'\n            }\n        finally:\n            # Clean up temporary file\n            if os.path.exists(temp_file):\n                os.unlink(temp_file)\n\n    def _parse_verification_result(self, output: str) -&gt; str:\n        \"\"\"Parse CBMC output to extract verification result.\"\"\"\n        if \"VERIFICATION SUCCESSFUL\" in output:\n            return \"SUCCESSFUL\"\n        elif \"VERIFICATION FAILED\" in output:\n            return \"FAILED\"\n        elif \"PARSING ERROR\" in output:\n            return \"PARSE_ERROR\"\n        else:\n            return \"UNKNOWN\"\n</code></pre>"},{"location":"development/adding-tools/#dependencies-pyprojecttoml","title":"Dependencies (<code>pyproject.toml</code>)","text":"<pre><code>[tool.poetry]\nname = \"cbmc-api\"\nversion = \"1.0.0\"\ndescription = \"CBMC API service for FM Playground\"\nauthors = [\"Your Name &lt;your.email@example.com&gt;\"]\n\n[tool.poetry.dependencies]\npython = \"^3.11\"\nfastapi = \"^0.104.1\"\nuvicorn = \"^0.24.0\"\npydantic = \"^2.5.0\"\n\n[tool.poetry.group.dev.dependencies]\npytest = \"^7.4.3\"\npytest-asyncio = \"^0.21.1\"\nhttpx = \"^0.25.2\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n</code></pre>"},{"location":"development/adding-tools/#container-configuration-dockerfile","title":"Container Configuration (<code>Dockerfile</code>)","text":"<pre><code>FROM ubuntu:22.04\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    python3 \\\n    python3-pip \\\n    python3-venv \\\n    build-essential \\\n    wget \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install CBMC\nRUN wget -O cbmc.deb https://github.com/diffblue/cbmc/releases/download/cbmc-5.95.1/ubuntu-22.04-cbmc-5.95.1-Linux.deb \\\n    &amp;&amp; dpkg -i cbmc.deb \\\n    &amp;&amp; rm cbmc.deb\n\n# Set up Python environment\nWORKDIR /app\nCOPY pyproject.toml poetry.lock ./\n\n# Install Poetry and dependencies\nRUN pip3 install poetry\nRUN poetry config virtualenvs.create false\nRUN poetry install --no-root   --no-dev\n\n# Copy application\nCOPY . .\n\n# Expose port\nEXPOSE 8000\n\n# Run application\nCMD [\"python3\", \"main.py\"]\n</code></pre>"},{"location":"development/adding-tools/#service-orchestration-composeyml","title":"Service Orchestration (<code>compose.yml</code>)","text":"<pre><code>version: '3.8'\n\nservices:\n  cbmc-api:\n    build: .\n    ports:\n      - \"8007:8000\"\n    environment:\n      - PYTHONPATH=/app\n    volumes:\n      - /tmp:/tmp\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n</code></pre>"},{"location":"development/adding-tools/#step-3-add-tests","title":"Step 3: Add Tests","text":"<p>Create <code>tests/test_cbmc.py</code>:</p> <pre><code>import pytest\nfrom cbmc import CBMCTool\n\n@pytest.fixture\ndef cbmc_tool():\n    return CBMCTool()\n\ndef test_simple_verification(cbmc_tool):\n    code = \"\"\"\n    #include &lt;assert.h&gt;\n\n    int main() {\n        int x = 5;\n        assert(x &gt; 0);\n        return 0;\n    }\n    \"\"\"\n\n    result = cbmc_tool.run(code)\n    assert result['success'] == True\n    assert result['verification_result'] == \"SUCCESSFUL\"\n\ndef test_failing_assertion(cbmc_tool):\n    code = \"\"\"\n    #include &lt;assert.h&gt;\n\n    int main() {\n        int x = -1;\n        assert(x &gt; 0);\n        return 0;\n    }\n    \"\"\"\n\n    result = cbmc_tool.run(code)\n    assert result['success'] == False\n    assert result['verification_result'] == \"FAILED\"\n</code></pre>"},{"location":"development/adding-tools/#step-4-update-main-docker-compose","title":"Step 4: Update Main Docker Compose","text":"<p>Add your service to the main <code>compose.yml</code>:</p> <pre><code>services:\n  # ... existing services ...\n\n  cbmc-api:\n    build: ./cbmc-api\n    ports:\n      - \"8007:8000\"\n    environment:\n      - PYTHONPATH=/app\n    restart: unless-stopped\n    networks:\n      - fm-playground\n</code></pre>"},{"location":"development/adding-tools/#step-5-frontend-integration","title":"Step 5: Frontend Integration","text":""},{"location":"development/adding-tools/#add-tool-configuration","title":"Add Tool Configuration","text":"<p>In <code>frontend/src/config/tools.ts</code>:</p> <pre><code>export const tools = [\n  // ... existing tools ...\n  {\n    id: 'cbmc',\n    name: 'CBMC',\n    description: 'Bounded Model Checker for C/C++',\n    category: 'Model Checking',\n    language: 'c',\n    apiUrl: 'http://localhost:8007',\n    defaultCode: `#include &lt;assert.h&gt;\n\nint main() {\n    int x;\n    // Add your verification conditions\n    assert(x &gt;= 0);\n    return 0;\n}`,\n    options: [\n      {\n        name: 'unwind',\n        type: 'number',\n        label: 'Unwind Depth',\n        default: 10,\n        description: 'Maximum loop unwind depth'\n      },\n      {\n        name: 'bounds_check',\n        type: 'boolean',\n        label: 'Bounds Checking',\n        default: true,\n        description: 'Enable array bounds checking'\n      },\n      {\n        name: 'memory_leak_check',\n        type: 'boolean', \n        label: 'Memory Leak Check',\n        default: false,\n        description: 'Check for memory leaks'\n      }\n    ]\n  }\n];\n</code></pre>"},{"location":"development/adding-tools/#add-tool-component-optional","title":"Add Tool Component (Optional)","text":"<p>For custom UI, create <code>frontend/src/components/tools/CBMCTool.vue</code>:</p> <pre><code>&lt;template&gt;\n  &lt;div class=\"cbmc-tool\"&gt;\n    &lt;ToolEditor\n      :tool=\"tool\"\n      :code=\"code\"\n      :options=\"options\"\n      @run=\"executeCode\"\n      @code-change=\"updateCode\"\n      @options-change=\"updateOptions\"\n    /&gt;\n\n    &lt;div class=\"cbmc-results\" v-if=\"result\"&gt;\n      &lt;div class=\"result-status\" :class=\"resultClass\"&gt;\n        {{ result.verification_result }}\n      &lt;/div&gt;\n\n      &lt;pre class=\"output\"&gt;{{ result.output }}&lt;/pre&gt;\n\n      &lt;div v-if=\"result.error\" class=\"error\"&gt;\n        {{ result.error }}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'CBMCTool',\n  // ... component logic\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"development/adding-tools/#step-6-test-integration","title":"Step 6: Test Integration","text":""},{"location":"development/adding-tools/#start-services","title":"Start Services","text":"<pre><code># Build and start your new service\ncd cbmc-api\ndocker compose up -d\n\n# Start main application\ncd ..\ndocker compose up -d\n</code></pre>"},{"location":"development/adding-tools/#test-the-integration","title":"Test the Integration","text":"<ol> <li> <p>API Test: <pre><code>curl -X POST http://localhost:8007/run \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"code\": \"#include &lt;assert.h&gt;\\nint main() { assert(1 &gt; 0); return 0; }\"}'\n</code></pre></p> </li> <li> <p>Frontend Test:</p> </li> <li>Navigate to <code>http://localhost:3000</code></li> <li>Select \"CBMC\" from the tools sidebar</li> <li>Enter test code and verify execution</li> </ol>"},{"location":"development/adding-tools/#step-7-documentation","title":"Step 7: Documentation","text":"<p>Create tool-specific documentation in <code>docs/tools/cbmc.md</code>:</p> <pre><code># CBMC Tool\n\nCBMC (Bounded Model Checker) is a verification tool for C/C++ programs...\n\n## Usage Examples\n\n### Basic Assertion Checking\n...\n\n### Options Reference\n...\n</code></pre>"},{"location":"development/adding-tools/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"development/adding-tools/#custom-input-formats","title":"Custom Input Formats","text":"<p>For tools requiring special input formats:</p> <pre><code>class ToolWithCustomInput:\n    def prepare_input(self, user_input: str) -&gt; str:\n        \"\"\"Convert user input to tool-specific format.\"\"\"\n        # Parse and transform input\n        return transformed_input\n\n    def parse_output(self, raw_output: str) -&gt; dict:\n        \"\"\"Parse tool output into structured format.\"\"\"\n        # Extract relevant information\n        return structured_output\n</code></pre>"},{"location":"development/adding-tools/#binary-tool-integration","title":"Binary Tool Integration","text":"<p>For tools distributed as binaries:</p> <pre><code># Download and install binary\nRUN wget https://example.com/tool.tar.gz \\\n    &amp;&amp; tar -xzf tool.tar.gz \\\n    &amp;&amp; mv tool /usr/local/bin/ \\\n    &amp;&amp; chmod +x /usr/local/bin/tool\n</code></pre>"},{"location":"development/adding-tools/#multi-file-projects","title":"Multi-file Projects","text":"<p>For tools requiring multiple files:</p> <pre><code>def handle_project(self, files: dict) -&gt; dict:\n    \"\"\"Handle multi-file input.\"\"\"\n    temp_dir = tempfile.mkdtemp()\n\n    try:\n        # Write all files\n        for filename, content in files.items():\n            filepath = Path(temp_dir) / filename\n            filepath.parent.mkdir(parents=True, exist_ok=True)\n            filepath.write_text(content)\n\n        # Execute tool on project\n        result = self.run_on_directory(temp_dir)\n        return result\n\n    finally:\n        shutil.rmtree(temp_dir)\n</code></pre>"},{"location":"development/adding-tools/#best-practices","title":"Best Practices","text":""},{"location":"development/adding-tools/#security","title":"Security","text":"<ul> <li>Timeout Execution: Always set timeouts for tool execution</li> <li>Resource Limits: Use Docker resource constraints</li> <li>Input Validation: Sanitize user inputs</li> <li>Sandboxing: Run tools in isolated containers</li> </ul>"},{"location":"development/adding-tools/#performance","title":"Performance","text":"<ul> <li>Caching: Cache tool binaries and dependencies</li> <li>Parallel Execution: Design for concurrent requests</li> <li>Resource Management: Clean up temporary files</li> </ul>"},{"location":"development/adding-tools/#maintenance","title":"Maintenance","text":"<ul> <li>Version Pinning: Pin tool versions in Dockerfile</li> <li>Health Checks: Implement service health endpoints</li> <li>Logging: Add structured logging for debugging</li> <li>Monitoring: Include metrics and monitoring hooks</li> </ul>"},{"location":"development/adding-tools/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/adding-tools/#common-issues","title":"Common Issues","text":"<ol> <li>Tool Installation Fails</li> <li>Check tool dependencies</li> <li>Verify download URLs</li> <li> <p>Review container logs</p> </li> <li> <p>Execution Timeouts</p> </li> <li>Increase timeout values</li> <li>Optimize tool parameters</li> <li> <p>Check resource constraints</p> </li> <li> <p>Frontend Integration Issues</p> </li> <li>Verify API endpoints</li> <li>Check CORS configuration</li> <li>Review network connectivity</li> </ol>"},{"location":"development/adding-tools/#next-steps","title":"Next Steps","text":"<ul> <li>Customize Your Setup \u2192 - Modify existing tools and interface</li> <li>Testing and Deployment \u2192 - Test your new tool thoroughly</li> <li>Project Structure \u2192 - Understand how tools fit in the architecture</li> </ul>"},{"location":"development/adding-tools/#related-documentation","title":"Related Documentation","text":"<ul> <li>Development Guide - Advanced development patterns</li> <li>API Reference - Backend API documentation</li> <li>Contributing Guide - Contributing your tool back to the project</li> </ul>"},{"location":"development/api-reference/","title":"API Reference","text":"<p>This document provides detailed information about the FM Playground API endpoints, request/response formats, and usage examples based on the actual implementation.</p>"},{"location":"development/api-reference/#base-urls","title":"Base URLs","text":"<pre><code>Backend API (Production): https://play.formal-methods.net/api\nBackend API (Development): http://localhost:8000/api\n\nTool APIs (Development):\n- Z3 API: http://localhost:8001\n- Limboole API: http://localhost:8002  \n- nuXmv API: http://localhost:8003\n- Spectra API: http://localhost:8004\n- Alloy API: http://localhost:8005\n</code></pre>"},{"location":"development/api-reference/#authentication","title":"Authentication","text":"<p>The FM Playground uses session-based authentication with OAuth2 providers.</p>"},{"location":"development/api-reference/#oauth2-authentication","title":"OAuth2 Authentication","text":""},{"location":"development/api-reference/#login-endpoints","title":"Login Endpoints","text":"<p><pre><code>GET /api/login/google\nGET /api/login/github\n</code></pre> Redirects to OAuth provider for authentication.</p>"},{"location":"development/api-reference/#oauth-callback","title":"OAuth Callback","text":"<p><pre><code>GET /api/auth/google\nGET /api/auth/github\n</code></pre> OAuth callback endpoints that process the authentication response.</p>"},{"location":"development/api-reference/#session-management","title":"Session Management","text":""},{"location":"development/api-reference/#check-session-status","title":"Check Session Status","text":"<pre><code>GET /api/check_session\n</code></pre> <p>Response (200 OK): <pre><code>{\n  \"message\": \"Found user\",\n  \"id\": \"google_123456789\",\n  \"email\": \"user@example.com\"\n}\n</code></pre></p> <p>Response (401 Unauthorized): <pre><code>{\n  \"error\": \"401 Unauthorized\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#get-current-user-profile","title":"Get Current User Profile","text":"<pre><code>GET /api/@me\n</code></pre> <p>Response (200 OK): <pre><code>{\n  \"message\": \"Found user\",\n  \"id\": \"github_987654321\",\n  \"email\": \"user@example.com\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#logout","title":"Logout","text":"<pre><code>GET /api/logout\n</code></pre> <p>Response (200 OK): <pre><code>{\n  \"message\": \"Logged out successfully\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#core-backend-api-endpoints","title":"Core Backend API Endpoints","text":""},{"location":"development/api-reference/#code-management","title":"Code Management","text":""},{"location":"development/api-reference/#save-code","title":"Save Code","text":"<pre><code>POST /api/save\nContent-Type: application/json\n\n{\n  \"code\": \"string\",           // The source code\n  \"check\": \"string\",          // Tool type (SAT, SMT, XMV, SPECTRA, ALS)\n  \"parent\": \"string|null\",    // Parent permalink for versioning\n  \"meta\": \"object|null\"       // Additional metadata\n}\n</code></pre> <p>Rate Limit: 2 requests per second</p>"},{"location":"development/api-reference/#get-code-by-permalink","title":"Get Code by Permalink","text":"<pre><code>GET /api/permalink/?p={permalink}\n</code></pre> <p>Parameters: - <code>p</code> (required): The permalink identifier</p> <p>Response (200 OK): <pre><code>{\n  \"code\": \"(assert (&gt; x 0))\\n(check-sat)\"\n}\n</code></pre></p> <p>Response (404 Not Found): Returns 404 if permalink doesn't exist.</p>"},{"location":"development/api-reference/#user-history-management","title":"User History Management","text":""},{"location":"development/api-reference/#get-user-history","title":"Get User History","text":"<pre><code>GET /api/histories?page={page}\n</code></pre> <p>Parameters: - <code>page</code> (optional): Page number (default: 1)</p> <p>Authentication: Required</p> <p>Response (200 OK): <pre><code>{\n  \"history\": [\n    {\n      \"id\": 123,\n      \"permalink\": \"happy-bright-dog-moon\",\n      \"check_type\": \"SMT\",\n      \"time\": \"2024-01-15T10:30:00Z\",\n      \"meta\": null\n    }\n  ],\n  \"has_more_data\": true\n}\n</code></pre></p> <p>Response (401 Unauthorized): <pre><code>{\n  \"result\": \"fail\",\n  \"message\": \"You are not logged in.\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#unlink-history-item","title":"Unlink History Item","text":"<pre><code>PUT /api/unlink-history\nContent-Type: application/json\n\n{\n  \"id\": 123\n}\n</code></pre> <p>Authentication: Required</p> <p>Response (200 OK): <pre><code>{\n  \"result\": \"success\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#get-code-by-data-id","title":"Get Code by Data ID","text":"<pre><code>GET /api/code/{data_id}\n</code></pre> <p>Authentication: Required</p> <p>Response (200 OK): <pre><code>{\n  \"result\": \"success\",\n  \"code\": \"(assert (&gt; x 0))\",\n  \"check\": \"SMT\",\n  \"permalink\": \"happy-bright-dog-moon\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#search-user-history","title":"Search User History","text":"<pre><code>GET /api/search?q={query}\n</code></pre> <p>Parameters: - <code>q</code> (required): Search query</p> <p>Authentication: Required</p> <p>Response (200 OK): <pre><code>{\n  \"history\": [\n    {\n      \"id\": 123,\n      \"permalink\": \"happy-bright-dog-moon\",\n      \"check_type\": \"SMT\",\n      \"time\": \"2024-01-15T10:30:00Z\"\n    }\n  ],\n  \"has_more_data\": false\n}\n</code></pre></p>"},{"location":"development/api-reference/#get-history-by-permalink","title":"Get History by Permalink","text":"<pre><code>GET /api/history/{permalink}\n</code></pre> <p>Authentication: Required</p> <p>Response (200 OK): <pre><code>{\n  \"history\": {\n    \"id\": 123,\n    \"permalink\": \"happy-bright-dog-moon\",\n    \"check_type\": \"SMT\",\n    \"time\": \"2024-01-15T10:30:00Z\",\n    \"meta\": null\n  }\n}\n</code></pre></p>"},{"location":"development/api-reference/#user-data-management","title":"User Data Management","text":""},{"location":"development/api-reference/#download-user-data","title":"Download User Data","text":"<pre><code>GET /api/download-user-data\n</code></pre> <p>Authentication: Required</p> <p>Response (200 OK): <pre><code>{\n  \"email\": \"user@example.com\",\n  \"data\": [\n    {\n      \"id\": 123,\n      \"permalink\": \"happy-bright-dog-moon\",\n      \"code\": \"(assert (&gt; x 0))\",\n      \"check_type\": \"SMT\",\n      \"time\": \"2024-01-15T10:30:00Z\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"development/api-reference/#delete-user-profile","title":"Delete User Profile","text":"<pre><code>DELETE /api/delete-profile\n</code></pre> <p>Authentication: Required</p> <p>Response (200 OK): <pre><code>{\n  \"result\": \"success\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#metadata-and-feedback","title":"Metadata and Feedback","text":""},{"location":"development/api-reference/#get-metadata","title":"Get Metadata","text":"<pre><code>GET /api/metadata?check={check_type}&amp;p={permalink}\n</code></pre> <p>Parameters: - <code>check</code> (required): Tool type (SAT, SMT, XMV, SPECTRA, ALS) - <code>p</code> (required): Permalink identifier</p> <p>Response (200 OK): <pre><code>{\n  \"permalink\": \"happy-bright-dog-moon\",\n  \"check_type\": \"SMT\",\n  \"created_at\": \"2024-01-15T10:30:00Z\",\n  \"meta\": null\n}\n</code></pre></p>"},{"location":"development/api-reference/#submit-feedback","title":"Submit Feedback","text":"<pre><code>POST /api/feedback\nContent-Type: application/json\n\n{\n  \"rating\": 5,\n  \"comment\": \"Great tool!\"\n}\n</code></pre> <p>Response (200 OK): <pre><code>{\n  \"result\": \"success\"\n}\n</code></pre></p> <p>Response (413 Payload Too Large): <pre><code>{\n  \"result\": \"The comment is too large.\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#tool-apis","title":"Tool APIs","text":"<p>Each formal methods tool has its own dedicated API service.</p>"},{"location":"development/api-reference/#z3-api-smt-solver","title":"Z3 API (SMT Solver)","text":""},{"location":"development/api-reference/#execute-z3-code","title":"Execute Z3 Code","text":"<pre><code>GET /smt/run/?check={check_type}&amp;p={permalink}\n</code></pre> <p>Parameters: - <code>check</code> (required): Must be \"SMT\" - <code>p</code> (required): Permalink identifier</p> <p>Response (200 OK): <pre><code>sat\n(model \n  (define-fun x () Int\n    1)\n)\n</code></pre></p> <p>Response (404 Not Found): <pre><code>{\n  \"detail\": \"Permalink not found\"\n}\n</code></pre></p> <p>Response (500 Internal Server Error): <pre><code>{\n  \"detail\": \"Error running z3\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#limboole-api-sat-solver","title":"Limboole API (SAT Solver)","text":""},{"location":"development/api-reference/#execute-limboole-code","title":"Execute Limboole Code","text":"<pre><code>GET /sat/run/?check={check_type}&amp;p={permalink}&amp;check_sat={boolean}\n</code></pre> <p>Parameters: - <code>check</code> (required): Must be \"SAT\" - <code>p</code> (required): Permalink identifier - <code>check_sat</code> (required): Boolean flag for satisfiability checking</p> <p>Response (200 OK): <pre><code>% SATISFIABLE\n</code></pre></p> <p>Response (400 Bad Request): <pre><code>{\n  \"detail\": \"Invalid query parameters\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#nuxmv-api-model-checker","title":"nuXmv API (Model Checker)","text":""},{"location":"development/api-reference/#execute-nuxmv-code","title":"Execute nuXmv Code","text":"<pre><code>GET /xmv/run/?check={check_type}&amp;p={permalink}\n</code></pre> <p>Parameters: - <code>check</code> (required): Must be \"XMV\" - <code>p</code> (required): Permalink identifier</p> <p>Response (200 OK): <pre><code>-- specification AG p  is true\n</code></pre></p> <p>Response (500 Internal Server Error): <pre><code>{\n  \"detail\": \"Error running nuXmv cli\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#spectra-api-reactive-synthesis","title":"Spectra API (Reactive Synthesis)","text":""},{"location":"development/api-reference/#execute-spectra-code","title":"Execute Spectra Code","text":"<pre><code>GET /spectra/run/?check={check_type}&amp;p={permalink}&amp;command={command}\n</code></pre> <p>Parameters: - <code>check</code> (required): Must be \"SPECTRA\" - <code>p</code> (required): Permalink identifier - <code>command</code> (required): One of the supported commands</p> <p>Supported Commands: - <code>check-realizability</code> - <code>concrete-controller</code> - <code>concrete-counter-strategy</code> - <code>unrealizable-core</code> - <code>check-well-sep</code> - <code>non-well-sep-core</code></p> <p>Response (200 OK): <pre><code>REALIZABLE\n</code></pre></p> <p>Response (422 Unprocessable Entity): <pre><code>{\n  \"detail\": \"Invalid command\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#alloy-api-relational-logic","title":"Alloy API (Relational Logic)","text":"<p>The Alloy API is implemented in Java using Spring Boot.</p>"},{"location":"development/api-reference/#execute-alloy-code","title":"Execute Alloy Code","text":"<pre><code>POST /alloy/run\nContent-Type: application/json\n\n{\n  \"check\": \"ALS\",\n  \"p\": \"permalink-id\",\n  \"cmd\": 1\n}\n</code></pre> <p>Parameters: - <code>check</code> (required): Must be \"ALS\" - <code>p</code> (required): Permalink identifier - <code>cmd</code> (required): Command index to execute (1-based)</p> <p>Response (200 OK): <pre><code>{\n  \"result\": \"satisfiable\",\n  \"instance\": {\n    \"atoms\": [\n      {\"relation\": \"Person\", \"tuples\": [[\"Person0\"]]}\n    ]\n  }\n}\n</code></pre></p>"},{"location":"development/api-reference/#get-alloy-instance","title":"Get Alloy Instance","text":"<pre><code>GET /alloy/instance/{instance_id}\n</code></pre> <p>Response (200 OK): <pre><code>{\n  \"instance_id\": \"abc123\",\n  \"xml\": \"&lt;alloy&gt;...&lt;/alloy&gt;\",\n  \"json\": {\n    \"atoms\": []\n  }\n}\n</code></pre></p>"},{"location":"development/api-reference/#data-models","title":"Data Models","text":""},{"location":"development/api-reference/#database-schema","title":"Database Schema","text":""},{"location":"development/api-reference/#user-model","title":"User Model","text":"<pre><code>class User:\n    id: str              # OAuth provider ID (e.g., \"google_123456\")\n    email: str           # User email address\n    data: List[Data]     # Related data entries\n</code></pre>"},{"location":"development/api-reference/#data-model","title":"Data Model","text":"<pre><code>class Data:\n    id: int              # Primary key\n    time: datetime       # Creation timestamp\n    session_id: str      # Session identifier\n    parent: int          # Parent data ID for versioning\n    check_type: str      # Tool type (SAT, SMT, XMV, SPECTRA, ALS)\n    permalink: str       # Permalink identifier\n    meta: str            # JSON metadata\n    code_id: int         # Foreign key to Code table\n    user_id: str         # Foreign key to User table (nullable)\n</code></pre>"},{"location":"development/api-reference/#code-model","title":"Code Model","text":"<pre><code>class Code:\n    id: int              # Primary key\n    code: str            # Source code content\n    data: List[Data]     # Related data entries\n</code></pre>"},{"location":"development/api-reference/#error-handling","title":"Error Handling","text":""},{"location":"development/api-reference/#common-error-responses","title":"Common Error Responses","text":""},{"location":"development/api-reference/#400-bad-request","title":"400 Bad Request","text":"<pre><code>{\n  \"detail\": \"Invalid query parameters\"\n}\n</code></pre>"},{"location":"development/api-reference/#401-unauthorized","title":"401 Unauthorized","text":"<pre><code>{\n  \"error\": \"401 Unauthorized\"\n}\n</code></pre>"},{"location":"development/api-reference/#404-not-found","title":"404 Not Found","text":"<pre><code>{\n  \"detail\": \"Permalink not found\"\n}\n</code></pre>"},{"location":"development/api-reference/#413-payload-too-large","title":"413 Payload Too Large","text":"<pre><code>{\n  \"result\": \"The code is too large.\"\n}\n</code></pre>"},{"location":"development/api-reference/#422-unprocessable-entity","title":"422 Unprocessable Entity","text":"<pre><code>{\n  \"detail\": \"Invalid command\"\n}\n</code></pre>"},{"location":"development/api-reference/#429-too-many-requests","title":"429 Too Many Requests","text":"<pre><code>{\n  \"result\": \"You have already made a request recently.\"\n}\n</code></pre>"},{"location":"development/api-reference/#500-internal-server-error","title":"500 Internal Server Error","text":"<pre><code>{\n  \"detail\": \"Error running code\"\n}\n</code></pre>"},{"location":"development/api-reference/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Save endpoint: 2 requests per second per user</li> <li>Tool APIs: No explicit rate limiting, but timeout protection</li> <li>Authentication: No rate limiting on OAuth flows</li> </ul>"},{"location":"development/api-reference/#caching","title":"Caching","text":""},{"location":"development/api-reference/#redis-caching","title":"Redis Caching","text":"<ul> <li>Tool execution results: Cached based on code content</li> <li>Code retrieval: Cached by permalink</li> <li>Session data: Stored in Redis for session management</li> </ul>"},{"location":"development/api-reference/#cache-behavior","title":"Cache Behavior","text":"<ul> <li>TTL: Varies by tool and result size</li> <li>Invalidation: Automatic expiration</li> <li>Fallback: Direct execution if Redis unavailable</li> </ul>"},{"location":"development/api-reference/#security-features","title":"Security Features","text":""},{"location":"development/api-reference/#input-validation","title":"Input Validation","text":"<ul> <li>Code size limits: Maximum 1MB per code submission</li> <li>Comment size limits: Maximum 1MB per feedback comment</li> <li>Parameter validation: All API parameters validated</li> </ul>"},{"location":"development/api-reference/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>OAuth2 integration: Google and GitHub providers</li> <li>Session management: Secure session handling</li> <li>User isolation: Users can only access their own data</li> </ul>"},{"location":"development/api-reference/#cors-configuration","title":"CORS Configuration","text":"<ul> <li>Cross-origin requests: Enabled for frontend integration</li> <li>Credentials: Supports credentials for authenticated requests</li> </ul>"},{"location":"development/api-reference/#environment-variables","title":"Environment Variables","text":""},{"location":"development/api-reference/#backend-configuration","title":"Backend Configuration","text":"<pre><code># Database\nDATABASE_URL=postgresql://user:pass@localhost/db_name\n\n# Redis\nREDIS_URL=redis://localhost:6379\n\n# OAuth\nGOOGLE_CLIENT_ID=your_google_client_id\nGOOGLE_CLIENT_SECRET=your_google_client_secret\nGITHUB_CLIENT_ID=your_github_client_id\nGITHUB_CLIENT_SECRET=your_github_client_secret\n\n# Frontend\nFRONTEND_URL=http://localhost:5173\n</code></pre>"},{"location":"development/api-reference/#tool-api-configuration","title":"Tool API Configuration","text":"<pre><code># Backend API URL\nAPI_URL=http://localhost:8000/\n\n# Redis\nREDIS_URL=redis://localhost:6379\n</code></pre>"},{"location":"development/api-reference/#development-and-testing","title":"Development and Testing","text":""},{"location":"development/api-reference/#running-apis-locally","title":"Running APIs Locally","text":""},{"location":"development/api-reference/#backend-api","title":"Backend API","text":"<pre><code>cd backend\npython app.py\n# Runs on http://localhost:8000\n</code></pre>"},{"location":"development/api-reference/#tool-apis_1","title":"Tool APIs","text":"<pre><code># Z3 API\ncd z3-api\nuvicorn main:app --port 8001\n\n# Limboole API\ncd limboole-api\nuvicorn main:app --port 8002\n\n# nuXmv API\ncd nuxmv-api\nuvicorn main:app --port 8003\n\n# Spectra API\ncd spectra-api\nuvicorn main:app --port 8004\n</code></pre>"},{"location":"development/api-reference/#alloy-api","title":"Alloy API","text":"<pre><code>cd alloy-api\n./gradlew bootRun\n# Runs on http://localhost:8005\n</code></pre>"},{"location":"development/api-reference/#testing-endpoints","title":"Testing Endpoints","text":""},{"location":"development/api-reference/#health-check","title":"Health Check","text":"<pre><code>curl http://localhost:8000/api/check_session\n</code></pre>"},{"location":"development/api-reference/#save-code_1","title":"Save Code","text":"<pre><code>curl -X POST http://localhost:8000/api/save \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"code\": \"(assert (&gt; x 0))\\n(check-sat)\",\n    \"check\": \"SMT\",\n    \"parent\": null,\n    \"meta\": null\n  }'\n</code></pre>"},{"location":"development/api-reference/#execute-tool","title":"Execute Tool","text":"<pre><code>curl \"http://localhost:8001/smt/run/?check=SMT&amp;p=your-permalink\"\n</code></pre>"},{"location":"development/api-reference/#migration-and-versioning","title":"Migration and Versioning","text":""},{"location":"development/api-reference/#database-migrations","title":"Database Migrations","text":"<p>The backend uses Flask-Migrate for database schema management:</p> <pre><code># Create new migration\nflask db migrate -m \"Description of changes\"\n\n# Apply migrations\nflask db upgrade\n\n# Rollback migration\nflask db downgrade\n</code></pre>"},{"location":"development/api-reference/#api-versioning","title":"API Versioning","text":"<ul> <li>Current version: v2.6.9</li> <li>Backward compatibility: Maintained for existing endpoints</li> <li>Breaking changes: Introduced with major version updates</li> </ul>"},{"location":"development/api-reference/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"development/api-reference/#request-logging","title":"Request Logging","text":"<p>All API requests are logged with: - Request method and path - Response status code - Execution time - User session information</p>"},{"location":"development/api-reference/#error-logging","title":"Error Logging","text":"<p>Errors are logged with: - Error message and stack trace - Request context - User information (if available)</p>"},{"location":"development/api-reference/#performance-monitoring","title":"Performance Monitoring","text":"<ul> <li>Response times: Tracked for all endpoints</li> <li>Cache hit rates: Monitored for Redis operations</li> <li>Tool execution times: Logged for performance analysis</li> </ul>"},{"location":"development/api-reference/#next-steps","title":"Next Steps","text":"<ul> <li>Review the Development Guide for implementation details</li> <li>Check the Testing Guide for API testing strategies</li> <li>See the Debugging Guide for troubleshooting API issues</li> </ul> <p>Response: <pre><code>{\n  \"check\": \"SAT\",\n  \"permalink\": \"example-permalink-123\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#get-code-by-permalink_1","title":"Get Code by Permalink","text":"<pre><code>GET /api/permalink/?check={check}&amp;p={permalink}\n</code></pre> <p>Response: <pre><code>{\n  \"code\": \"x &amp; y | z\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#get-code-by-id","title":"Get Code by ID","text":"<pre><code>GET /api/code/{data_id}\nAuthorization: Required\n</code></pre> <p>Response: <pre><code>{\n  \"result\": \"success\",\n  \"code\": \"x &amp; y | z\",\n  \"check\": \"SAT\",\n  \"permalink\": \"example-permalink-123\"\n}\n</code></pre></p>"},{"location":"development/api-reference/#user-history","title":"User History","text":""},{"location":"development/api-reference/#get-user-history_1","title":"Get User History","text":"<pre><code>GET /api/histories?page={page}\nAuthorization: Required\n</code></pre> <p>Response: <pre><code>{\n  \"history\": [\n    {\n      \"id\": 1,\n      \"code\": \"x &amp; y\",\n      \"check_type\": \"SAT\",\n      \"permalink\": \"example-123\",\n      \"time\": \"2024-01-01T00:00:00Z\"\n    }\n  ],\n  \"has_more_data\": true\n}\n</code></pre></p>"},{"location":"development/api-reference/#search-history","title":"Search History","text":"<pre><code>GET /api/search?q={query}\nAuthorization: Required\n</code></pre>"},{"location":"development/api-reference/#download-user-data_1","title":"Download User Data","text":"<pre><code>GET /api/download-user-data\nAuthorization: Required\n</code></pre> <p>Response: <pre><code>{\n  \"email\": \"user@example.com\",\n  \"data\": [/* user history data */]\n}\n</code></pre></p>"},{"location":"development/api-reference/#tool-execution-apis","title":"Tool Execution APIs","text":"<p>Each tool has its own API service with consistent endpoints:</p>"},{"location":"development/api-reference/#limboole-sat-solver","title":"Limboole (SAT Solver)","text":"<pre><code>GET /sat/run/?check=SAT&amp;p={permalink}&amp;check_sat={boolean}\n</code></pre>"},{"location":"development/api-reference/#z3-smt-solver","title":"Z3 (SMT Solver)","text":"<pre><code>GET /smt/run/?check=SMT&amp;p={permalink}\n</code></pre>"},{"location":"development/api-reference/#nuxmv-model-checker","title":"nuXmv (Model Checker)","text":"<pre><code>GET /xmv/run/?check=XMV&amp;p={permalink}\n</code></pre>"},{"location":"development/api-reference/#alloy-analyzer","title":"Alloy (Analyzer)","text":"<pre><code>GET /alloy/run/?check=ALS&amp;p={permalink}&amp;cmd={command_number}\n</code></pre>"},{"location":"development/api-reference/#spectra-reactive-synthesis","title":"Spectra (Reactive Synthesis)","text":"<pre><code>GET /spectra/run/?check=SPECTRA&amp;p={permalink}&amp;command={command}\n</code></pre>"},{"location":"development/api-reference/#rate-limiting_1","title":"Rate Limiting","text":"<ul> <li>Save endpoint: 2 requests per second</li> <li>Other endpoints: Standard rate limiting applies</li> </ul>"},{"location":"development/api-reference/#error-handling_1","title":"Error Handling","text":""},{"location":"development/api-reference/#http-status-codes","title":"HTTP Status Codes","text":"<ul> <li><code>200</code> - Success</li> <li><code>400</code> - Bad Request</li> <li><code>401</code> - Unauthorized</li> <li><code>404</code> - Not Found</li> <li><code>413</code> - Payload Too Large</li> <li><code>422</code> - Unprocessable Entity</li> <li><code>429</code> - Too Many Requests</li> <li><code>500</code> - Internal Server Error</li> </ul>"},{"location":"development/api-reference/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n  \"error\": \"Error message\",\n  \"code\": \"ERROR_CODE\"\n}\n</code></pre>"},{"location":"development/api-reference/#code-examples","title":"Code Examples","text":""},{"location":"development/api-reference/#javascripttypescript","title":"JavaScript/TypeScript","text":"<pre><code>// Save code example\nconst saveCode = async (code: string, tool: string) =&gt; {\n  const response = await fetch('/api/save', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    credentials: 'include',\n    body: JSON.stringify({\n      code,\n      check: tool,\n      parent: null,\n      meta: { version: '2.6.9' }\n    })\n  });\n\n  return await response.json();\n};\n\n// Get code by permalink\nconst getCode = async (check: string, permalink: string) =&gt; {\n  const response = await fetch(\n    `/api/permalink/?check=${check}&amp;p=${permalink}`\n  );\n  return await response.json();\n};\n</code></pre>"},{"location":"development/api-reference/#python","title":"Python","text":"<pre><code>import requests\n\n# Save code\ndef save_code(code: str, tool: str):\n    response = requests.post(\n        'http://localhost:8000/api/save',\n        json={\n            'code': code,\n            'check': tool,\n            'parent': None,\n            'meta': {'version': '2.6.9'}\n        },\n        cookies=session_cookies\n    )\n    return response.json()\n\n# Execute tool\ndef run_tool(tool: str, permalink: str, **kwargs):\n    params = {'check': tool, 'p': permalink, **kwargs}\n    response = requests.get(f'/{tool.lower()}/run/', params=params)\n    return response.text\n</code></pre>"},{"location":"development/api-reference/#curl","title":"curl","text":"<pre><code># Save code\ncurl -X POST http://localhost:8000/api/save \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"code\": \"x &amp; y | z\",\n    \"check\": \"SAT\",\n    \"parent\": null,\n    \"meta\": {\"version\": \"2.6.9\"}\n  }' \\\n  --cookie-jar cookies.txt\n\n# Get code\ncurl \"http://localhost:8000/api/permalink/?check=SAT&amp;p=example-123\"\n\n# Execute SAT solver\ncurl \"http://localhost:8000/sat/run/?check=SAT&amp;p=example-123&amp;check_sat=true\"\n</code></pre>"},{"location":"development/api-reference/#data-models_1","title":"Data Models","text":""},{"location":"development/api-reference/#code-object","title":"Code Object","text":"<pre><code>interface Code {\n  id: number;\n  code: string;\n  created_at: string;\n}\n</code></pre>"},{"location":"development/api-reference/#data-object","title":"Data Object","text":"<pre><code>interface Data {\n  id: number;\n  time: string;\n  session_id: string;\n  parent?: number;\n  check_type: string;\n  permalink: string;\n  meta?: object;\n  code_id: number;\n  user_id?: string;\n}\n</code></pre>"},{"location":"development/api-reference/#user-object","title":"User Object","text":"<pre><code>interface User {\n  id: string;           // OAuth provider ID\n  email: string;\n  created_at: string;\n}\n</code></pre>"},{"location":"development/api-reference/#tool-specific-parameters","title":"Tool-Specific Parameters","text":""},{"location":"development/api-reference/#limboole-parameters","title":"Limboole Parameters","text":"<ul> <li><code>check_sat</code>: boolean - Whether to check satisfiability</li> </ul>"},{"location":"development/api-reference/#alloy-parameters","title":"Alloy Parameters","text":"<ul> <li><code>cmd</code>: number - Command index to execute (1-based)</li> </ul>"},{"location":"development/api-reference/#spectra-parameters","title":"Spectra Parameters","text":"<ul> <li><code>command</code>: string - Command to execute (e.g., \"check-realizability\")</li> </ul>"},{"location":"development/api-reference/#webhooks-and-real-time-features","title":"Webhooks and Real-time Features","text":"<p>The API supports WebSocket connections for real-time updates:</p> <pre><code>const ws = new WebSocket('ws://localhost:8000/ws');\nws.onmessage = (event) =&gt; {\n  const data = JSON.parse(event.data);\n  // Handle real-time updates\n};\n</code></pre>"},{"location":"development/api-reference/#caching_1","title":"Caching","text":"<ul> <li>Redis caching is implemented for frequently accessed permalinks</li> <li>Tool execution results are cached to improve performance</li> <li>Cache TTL varies by tool and result size</li> </ul>"},{"location":"development/api-reference/#security-considerations","title":"Security Considerations","text":"<ul> <li>All user input is validated and sanitized</li> <li>Rate limiting prevents abuse</li> <li>Session tokens expire automatically</li> <li>CORS is configured for cross-origin requests</li> <li>File size limits prevent large uploads</li> </ul>"},{"location":"development/api-reference/#migration-and-versioning_1","title":"Migration and Versioning","text":"<p>The API uses database migrations for schema changes:</p> <pre><code># Run migrations\nflask db upgrade\n\n# Create new migration\nflask db migrate -m \"Description\"\n</code></pre> <p>API versioning follows semantic versioning principles with backward compatibility maintained.</p>"},{"location":"development/deployment/","title":"Development Setup Guide","text":"<p>This guide shows you how to get your FM Playground running locally for development.</p>"},{"location":"development/deployment/#prerequisites","title":"\ud83c\udfaf Prerequisites","text":"<p>Ensure you have completed: - Project Creation - Your project is created - Project Structure - You understand the layout</p>"},{"location":"development/deployment/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"development/deployment/#option-1-docker-compose-recommended","title":"Option 1: Docker Compose (Recommended)","text":"<pre><code># Navigate to your project\ncd your-project-name\n\n# Start all services\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f\n</code></pre> <p>Your playground will be available at: http://localhost:3000</p>"},{"location":"development/deployment/#option-2-manual-setup","title":"Option 2: Manual Setup","text":"<p>If you prefer to run services individually:</p> <pre><code># Terminal 1: Frontend\ncd frontend\nnpm install\nnpm run dev\n\n# Terminal 2: Backend  \ncd backend\npython -m venv venv\nsource venv/bin/activate  # Windows: venv\\Scripts\\activate\npip install -r requirements.txt\npython app.py\n\n# Terminal 3+: Tool APIs (for each selected tool)\ncd [tool-name]-api\n# Follow tool-specific setup below\n</code></pre>"},{"location":"development/deployment/#docker-setup-details","title":"\ud83d\udc33 Docker Setup Details","text":""},{"location":"development/deployment/#starting-services","title":"Starting Services","text":"<pre><code># Start in detached mode\ndocker-compose up -d\n\n# Start with logs visible\ndocker-compose up\n\n# Start specific service\ndocker-compose up frontend\n\n# Rebuild and start\ndocker-compose up --build\n</code></pre>"},{"location":"development/deployment/#managing-services","title":"Managing Services","text":"<pre><code># Check running containers\ndocker-compose ps\n\n# View logs\ndocker-compose logs                    # All services\ndocker-compose logs frontend           # Specific service\ndocker-compose logs -f --tail=50 backend  # Follow with tail\n\n# Restart services\ndocker-compose restart                 # All services\ndocker-compose restart backend         # Specific service\n\n# Stop services\ndocker-compose down                    # Stop all\ndocker-compose stop frontend          # Stop specific\n</code></pre>"},{"location":"development/deployment/#expected-services","title":"Expected Services","text":"<p>Based on your tool selection, you should see:</p> <pre><code>$ docker-compose ps\n\nName                 Command               State           Ports\n----------------------------------------------------------------\nfrontend            npm run dev              Up      0.0.0.0:3000-&gt;3000/tcp\nbackend             python app.py            Up      0.0.0.0:8000-&gt;8000/tcp\nalloy-api           java -jar app.jar        Up      0.0.0.0:8001-&gt;8001/tcp\nlimboole-api        python main.py           Up      0.0.0.0:8002-&gt;8002/tcp\n</code></pre>"},{"location":"development/deployment/#manual-setup-details","title":"\ud83d\udd27 Manual Setup Details","text":""},{"location":"development/deployment/#frontend-setup","title":"Frontend Setup","text":"<pre><code>cd frontend\n\n# Install dependencies\nnpm install\n\n# Start development server\nnpm run dev\n\n# Alternative: with specific port\nnpm run dev -- --port 3001\n</code></pre> <p>Frontend Environment Variables: <pre><code># frontend/.env\nVITE_API_BASE_URL=http://localhost:8000\nVITE_ALLOY_API_URL=http://localhost:8001\nVITE_LIMBOOLE_API_URL=http://localhost:8002\nVITE_NUXMV_API_URL=http://localhost:8003\nVITE_SMT_API_URL=http://localhost:8004\nVITE_SPECTRA_API_URL=http://localhost:8005\n</code></pre></p>"},{"location":"development/deployment/#backend-setup","title":"Backend Setup","text":"<pre><code>cd backend\n\n# Create virtual environment\npython -m venv venv\n\n# Activate virtual environment\n# On macOS/Linux:\nsource venv/bin/activate\n# On Windows:\nvenv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n\n# Start Flask server\npython app.py\n\n# Alternative: with Flask CLI\nflask run --port 8000 --debug\n</code></pre> <p>Backend Environment Variables: <pre><code># backend/.env\nFLASK_ENV=development\nFLASK_DEBUG=True\nDATABASE_URL=sqlite:///playground.db\nALLOY_API_URL=http://localhost:8001\nLIMBOOLE_API_URL=http://localhost:8002\n</code></pre></p>"},{"location":"development/deployment/#tool-api-setup","title":"Tool API Setup","text":""},{"location":"development/deployment/#python-based-tools-limboole-nuxmv-smt-spectra","title":"Python-based Tools (Limboole, nuXmv, SMT, Spectra)","text":"<pre><code>cd limboole-api\n\n# Create virtual environment\npython -m venv venv\nsource venv/bin/activate  # Windows: venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n\n# Start FastAPI server\npython main.py\n\n# Alternative: with uvicorn\nuvicorn main:app --reload --port 8002\n</code></pre>"},{"location":"development/deployment/#java-based-tools-alloy","title":"Java-based Tools (Alloy)","text":"<pre><code>cd alloy-api\n\n# Build with Gradle\n./gradlew build\n\n# Run the application\n./gradlew run\n\n# Alternative: run JAR directly\njava -jar build/libs/alloy-api.jar\n</code></pre>"},{"location":"development/deployment/#testing-your-setup","title":"\ud83e\uddea Testing Your Setup","text":""},{"location":"development/deployment/#1-service-health-checks","title":"1. Service Health Checks","text":"<pre><code># Test frontend\ncurl http://localhost:3000\n\n# Test backend\ncurl http://localhost:8000/health\n\n# Test tool APIs\ncurl http://localhost:8001/health  # Alloy\ncurl http://localhost:8002/health  # Limboole\ncurl http://localhost:8003/health  # nuXmv\ncurl http://localhost:8004/health  # SMT\ncurl http://localhost:8005/health  # Spectra\n</code></pre>"},{"location":"development/deployment/#2-frontend-interface","title":"2. Frontend Interface","text":"<p>Visit http://localhost:3000 and verify:</p> <ul> <li>\u2705 FM Playground interface loads</li> <li>\u2705 Selected tools appear in sidebar</li> <li>\u2705 Code editor is functional</li> <li>\u2705 No console errors</li> </ul>"},{"location":"development/deployment/#3-tool-execution-tests","title":"3. Tool Execution Tests","text":""},{"location":"development/deployment/#test-limboole","title":"Test Limboole","text":"<ol> <li>Select \"Limboole\" from sidebar</li> <li>Enter: <code>(a &amp; b) | (!a &amp; c)</code></li> <li>Click \"Run\"</li> <li>Expect: Satisfiability results</li> </ol>"},{"location":"development/deployment/#test-alloy","title":"Test Alloy","text":"<ol> <li>Select \"Alloy\" from sidebar  </li> <li>Enter:    <pre><code>sig Person {\n  age: Int\n}\n\npred canVote[p: Person] {\n  p.age &gt;= 18\n}\n\nrun canVote for 3\n</code></pre></li> <li>Click \"Run\"</li> <li>Expect: Model instances</li> </ol>"},{"location":"development/deployment/#test-smtz3","title":"Test SMT/Z3","text":"<ol> <li>Select \"SMT\" from sidebar</li> <li>Enter:    <pre><code>(declare-const x Int)\n(declare-const y Int)\n(assert (&gt; x 0))\n(assert (&lt; y 10))\n(assert (= (+ x y) 15))\n(check-sat)\n(get-model)\n</code></pre></li> <li>Click \"Run\"</li> <li>Expect: SAT with model</li> </ol>"},{"location":"development/deployment/#4-api-integration-tests","title":"4. API Integration Tests","text":"<pre><code># Test backend \u2192 tool API communication\ncurl -X POST http://localhost:8000/api/execute/limboole \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"code\": \"(a &amp; b)\"}'\n\n# Test tool API directly\ncurl -X POST http://localhost:8002/solve \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"formula\": \"(a &amp; b)\"}'\n</code></pre>"},{"location":"development/deployment/#common-development-tasks","title":"\ud83d\udd27 Common Development Tasks","text":""},{"location":"development/deployment/#code-changes","title":"Code Changes","text":"<p>Frontend Changes: - Files auto-reload with Vite dev server - No restart needed for React components</p> <p>Backend Changes: <pre><code># With Flask debug mode (auto-reload)\nexport FLASK_DEBUG=1\npython app.py\n\n# Manual restart\ndocker-compose restart backend\n</code></pre></p> <p>Tool API Changes: <pre><code># Python APIs with uvicorn (auto-reload)\nuvicorn main:app --reload\n\n# Manual restart\ndocker-compose restart limboole-api\n</code></pre></p>"},{"location":"development/deployment/#database-operations","title":"Database Operations","text":"<pre><code># Initialize database\ncd backend\npython -c \"from app import create_tables; create_tables()\"\n\n# Reset database\nrm -f playground.db\npython -c \"from app import create_tables; create_tables()\"\n</code></pre>"},{"location":"development/deployment/#adding-dependencies","title":"Adding Dependencies","text":"<p>Frontend: <pre><code>cd frontend\nnpm install new-package\n# Restart if using Docker\ndocker-compose restart frontend\n</code></pre></p> <p>Backend: <pre><code>cd backend\npip install new-package\npip freeze &gt; requirements.txt\n# Rebuild Docker image\ndocker-compose build backend\n</code></pre></p>"},{"location":"development/deployment/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"development/deployment/#port-conflicts","title":"Port Conflicts","text":"<pre><code># Find processes using ports\nlsof -ti:3000 | xargs kill -9  # macOS/Linux\nnetstat -ano | findstr :3000   # Windows\n\n# Use different ports\n# In docker-compose.yml:\nports:\n  - \"3001:3000\"  # host:container\n</code></pre>"},{"location":"development/deployment/#container-issues","title":"Container Issues","text":"<pre><code># Check container status\ndocker-compose ps\n\n# View container logs\ndocker-compose logs [service-name]\n\n# Restart containers\ndocker-compose restart\n\n# Rebuild containers\ndocker-compose build --no-cache\ndocker-compose up -d\n</code></pre>"},{"location":"development/deployment/#python-environment-issues","title":"Python Environment Issues","text":"<pre><code># Clear Python cache\nfind . -name \"*.pyc\" -delete\nfind . -name \"__pycache__\" -delete\n\n# Recreate virtual environment\nrm -rf venv\npython -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n</code></pre>"},{"location":"development/deployment/#nodejs-issues","title":"Node.js Issues","text":"<pre><code># Clear npm cache\nnpm cache clean --force\n\n# Delete and reinstall node_modules\nrm -rf node_modules package-lock.json\nnpm install\n</code></pre>"},{"location":"development/deployment/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>With your development environment running:</p> <ol> <li>Add Tools \u2192 - Extend with more formal method tools</li> <li>Customize \u2192 - Personalize your playground</li> <li>Deploy \u2192 - Share your playground with others</li> </ol>"},{"location":"development/deployment/#development-tips","title":"\ud83d\udca1 Development Tips","text":"<ul> <li>Use Docker: Simplifies dependency management</li> <li>Check Logs: First step in debugging</li> <li>Hot Reload: Frontend changes reflect immediately</li> <li>API Testing: Use curl or Postman for API testing</li> <li>Version Control: Commit working states frequently</li> </ul>"}]}