/******************************************************************************
 * This file was generated by langium-cli 3.2.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import type { AstNode, Reference, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';

export const SmtTerminals = {
    PSEUDO_BOOL_KEYWORD: /((pbeq|pbge)|pble)/,
    CARDINALITY_KEYWORD: /(at-least|at-most)/,
    BV_LITERAL: /(#b[01]+|#x[0-9a-fA-F]+)/,
    PAR_OPEN: /\(/,
    PAR_CLOSE: /\)/,
    BValue: /(true|false)/,
    DECIMAL: /((0|[0-9][0-9]*)\.(0|[0-9][0-9]*))/,
    NUMERAL: /0|[0-9][0-9]*/,
    HEXADECIMAL: /#x[0-9a-fA-F]+/,
    BINARY: /#b[01]+/,
    STRING: /"([^"\\]|\\.|(WS|PRINTABLE_CHAR))+"/,
    SEPERATOR: /,/,
    WS: /\s+/,
    ARITHMETIC_OPERATOR: /(((((((((div|mod)|abs)|<=)|<)|>=)|>)|to_real)|to_int)|is_int)/,
    BOOLEAN_OPERATOR: /((((((not|=>)|and)|or)|xor)|ite)|distinct)/,
    SIMPLE_SYMBOL: /(((((((((((((((((((([a-zA-Z])|\+)|-)|\/)|\*)|,)|=)|%)|\?)|!)|\.)|\$)|_)|~)|&)|\^)|<)|>)|@)((((((((((((((((((([a-zA-Z])|([0-9]))|\+)|-)|\/)|\*)|=)|%)|\?)|!)|\.)|\$)|_)|~)|&)|\^)|<)|>)|@)*)/,
    SL_COMMENT: /;[^\n\r]*/,
};

export type SmtTerminalNames = keyof typeof SmtTerminals;

export type SmtKeywordNames = 
    | "!"
    | "*"
    | "+"
    | "-"
    | "/"
    | ":"
    | ":diagnostic-output-channel"
    | ":global-declarations"
    | ":interactive-mode"
    | ":model.compact"
    | ":named"
    | ":opt.priority"
    | ":pattern"
    | ":pp.bv-literals"
    | ":print-success"
    | ":produce-assertions"
    | ":produce-assignments"
    | ":produce-models"
    | ":produce-proofs"
    | ":produce-unsat-assumptions"
    | ":produce-unsat-cores"
    | ":random-seed"
    | ":regular-output-channel"
    | ":reproducible-resource-limit"
    | ":smt-auto-config"
    | ":smt.macro-finder"
    | ":smt.mbqi"
    | ":verbosity"
    | "="
    | "Array"
    | "BitVec"
    | "Bool"
    | "Int"
    | "List"
    | "Real"
    | "RegLan"
    | "RoundingMode"
    | "String"
    | "_"
    | "all-statistics"
    | "as"
    | "assert"
    | "assertion-stack-levels"
    | "authors"
    | "bv2nat"
    | "bvadd"
    | "bvand"
    | "bvashr"
    | "bvcomp"
    | "bvlshr"
    | "bvmul"
    | "bvnand"
    | "bvneg"
    | "bvnor"
    | "bvnot"
    | "bvor"
    | "bvsdiv"
    | "bvsge"
    | "bvsgt"
    | "bvshl"
    | "bvsle"
    | "bvslt"
    | "bvsmod"
    | "bvsrem"
    | "bvsub"
    | "bvudiv"
    | "bvuge"
    | "bvugt"
    | "bvule"
    | "bvult"
    | "bvurem"
    | "bvxnor"
    | "bvxor"
    | "check-sat"
    | "check-sat-assuming"
    | "concat"
    | "declare-const"
    | "declare-datatype"
    | "declare-datatypes"
    | "declare-fun"
    | "declare-sort"
    | "define-fun"
    | "define-fun-rec"
    | "define-funs-rec"
    | "define-sort"
    | "echo"
    | "error-behavior"
    | "eval"
    | "exists"
    | "exit"
    | "forall"
    | "get-assertions"
    | "get-assignment"
    | "get-info"
    | "get-model"
    | "get-option"
    | "get-proof"
    | "get-unsat-assumptions"
    | "get-unsat-core"
    | "get-value"
    | "head"
    | "if"
    | "incremental"
    | "is"
    | "let"
    | "maximize"
    | "minimize"
    | "name"
    | "nat2bv"
    | "nil"
    | "par"
    | "pop"
    | "push"
    | "reason-unknown"
    | "reset"
    | "reset-assertions"
    | "select"
    | "set-info"
    | "set-logic"
    | "set-option"
    | "status"
    | "store"
    | "str.++"
    | "str.at"
    | "str.contains"
    | "str.from_int"
    | "str.indexof"
    | "str.len"
    | "str.prefixof"
    | "str.replace"
    | "str.substr"
    | "str.suffixof"
    | "str.to_int"
    | "tail"
    | "version";

export type SmtTokenNames = SmtTerminalNames | SmtKeywordNames;

export type BasicCommand = 'check-sat' | 'exit' | 'get-assertions' | 'get-assignment' | 'get-model' | 'get-proof' | 'get-unsat-assumptions' | 'get-unsat-core' | 'reset' | 'reset-assertions';

export function isBasicCommand(item: unknown): item is BasicCommand {
    return item === 'check-sat' || item === 'reset' || item === 'reset-assertions' || item === 'get-model' || item === 'exit' || item === 'get-assertions' || item === 'get-assignment' || item === 'get-proof' || item === 'get-unsat-assumptions' || item === 'get-unsat-core';
}

export type BvOperation = 'bv2nat' | 'bvadd' | 'bvand' | 'bvashr' | 'bvcomp' | 'bvlshr' | 'bvmul' | 'bvnand' | 'bvneg' | 'bvnor' | 'bvnot' | 'bvor' | 'bvsdiv' | 'bvsge' | 'bvsgt' | 'bvshl' | 'bvsle' | 'bvslt' | 'bvsmod' | 'bvsrem' | 'bvsub' | 'bvudiv' | 'bvuge' | 'bvugt' | 'bvule' | 'bvult' | 'bvurem' | 'bvxnor' | 'bvxor' | 'concat' | 'nat2bv';

export function isBvOperation(item: unknown): item is BvOperation {
    return item === 'concat' || item === 'bvnot' || item === 'bvand' || item === 'bvor' || item === 'bvneg' || item === 'bvadd' || item === 'bvmul' || item === 'bvudiv' || item === 'bvurem' || item === 'bvshl' || item === 'bvlshr' || item === 'bvult' || item === 'bvnand' || item === 'bvnor' || item === 'bvxor' || item === 'bvxnor' || item === 'bvcomp' || item === 'bvsub' || item === 'bvsdiv' || item === 'bvsrem' || item === 'bvsmod' || item === 'bvashr' || item === 'bvule' || item === 'bvugt' || item === 'bvuge' || item === 'bvslt' || item === 'bvsle' || item === 'bvsgt' || item === 'bvsge' || item === 'bv2nat' || item === 'nat2bv';
}

export type CommonDataTypeDec = DataTypeDec | DataTypeDecZ3 | NamedDataTypeDec;

export const CommonDataTypeDec = 'CommonDataTypeDec';

export function isCommonDataTypeDec(item: unknown): item is CommonDataTypeDec {
    return reflection.isInstance(item, CommonDataTypeDec);
}

export type DefFunCommandName = 'define-fun' | 'define-fun-rec';

export function isDefFunCommandName(item: unknown): item is DefFunCommandName {
    return item === 'define-fun-rec' || item === 'define-fun';
}

export type InfoFlag = Keyword;

export const InfoFlag = 'InfoFlag';

export function isInfoFlag(item: unknown): item is InfoFlag {
    return reflection.isInstance(item, InfoFlag);
}

export type NamedElement = CmdConstDecl | CmdFunDecl | ConstructorDec | FunctionDec | FunctionDef | NamedAttribute | SimpleConstructor | SortedVar;

export const NamedElement = 'NamedElement';

export function isNamedElement(item: unknown): item is NamedElement {
    return reflection.isInstance(item, NamedElement);
}

export type NamedSort = CmdDecDataType | CmdDefSort | CmdSortDeclZ3 | DataTypeDec | DataTypeDecZ3 | NamedDataTypeDec | SortDec | SortDecZ3 | SortedParameter;

export const NamedSort = 'NamedSort';

export function isNamedSort(item: unknown): item is NamedSort {
    return reflection.isInstance(item, NamedSort);
}

export type Operator = '*' | '+' | '-' | '/' | '=' | BvOperation | StringOperation | string;

export function isOperator(item: unknown): item is Operator {
    return isBvOperation(item) || isStringOperation(item) || item === '+' || item === '-' || item === '*' || item === '/' || item === '=' || (typeof item === 'string' && (/(((((((((div|mod)|abs)|<=)|<)|>=)|>)|to_real)|to_int)|is_int)/.test(item) || /((((((not|=>)|and)|or)|xor)|ite)|distinct)/.test(item)));
}

export type Option = Attribute | OptionKeyword;

export const Option = 'Option';

export function isOption(item: unknown): item is Option {
    return reflection.isInstance(item, Option);
}

export type SmtSymbol = string;

export function isSmtSymbol(item: unknown): item is SmtSymbol {
    return (typeof item === 'string' && (/(((((((((((((((((((([a-zA-Z])|\+)|-)|\/)|\*)|,)|=)|%)|\?)|!)|\.)|\$)|_)|~)|&)|\^)|<)|>)|@)((((((((((((((((((([a-zA-Z])|([0-9]))|\+)|-)|\/)|\*)|=)|%)|\?)|!)|\.)|\$)|_)|~)|&)|\^)|<)|>)|@)*)/.test(item)));
}

export type SpecConstant = number | string;


export type StringOperation = 'str.++' | 'str.at' | 'str.contains' | 'str.from_int' | 'str.indexof' | 'str.len' | 'str.prefixof' | 'str.replace' | 'str.substr' | 'str.suffixof' | 'str.to_int';

export function isStringOperation(item: unknown): item is StringOperation {
    return item === 'str.len' || item === 'str.substr' || item === 'str.indexof' || item === 'str.replace' || item === 'str.++' || item === 'str.at' || item === 'str.contains' || item === 'str.prefixof' || item === 'str.suffixof' || item === 'str.from_int' || item === 'str.to_int';
}

export interface Attribute extends AstNode {
    readonly $type: 'Attribute' | 'NamedAttribute';
    keyWord?: Keyword;
    value?: AttributeValue;
}

export const Attribute = 'Attribute';

export function isAttribute(item: unknown): item is Attribute {
    return reflection.isInstance(item, Attribute);
}

export interface AttributeValue extends AstNode {
    readonly $container: Attribute;
    readonly $type: 'AttributeValue';
    const?: SpecConstant;
    exprs: Array<SExpr>;
    string: Array<string>;
    symbol?: SmtSymbol;
}

export const AttributeValue = 'AttributeValue';

export function isAttributeValue(item: unknown): item is AttributeValue {
    return reflection.isInstance(item, AttributeValue);
}

export interface Command extends AstNode {
    readonly $type: 'CmdAssert' | 'CmdCheckSat' | 'CmdConstDecl' | 'CmdDecDataType' | 'CmdDecDataTypes' | 'CmdDefFun' | 'CmdDefFunsRec' | 'CmdDefSort' | 'CmdFunDecl' | 'CmdSortDeclZ3' | 'Command' | 'FunctionDef';
    arity?: number;
    attribute?: Attribute;
    basicCommand?: BasicCommand;
    infoFlag?: InfoFlag;
    name?: SmtSymbol;
    option?: Option;
    options?: Keyword | OptionKeyword;
    symbol?: SmtSymbol;
    term?: Array<Term> | Term;
}

export const Command = 'Command';

export function isCommand(item: unknown): item is Command {
    return reflection.isInstance(item, Command);
}

export interface ConditionalTerm extends AstNode {
    readonly $container: Term;
    readonly $type: 'ConditionalTerm' | 'SpecConstant';
    term: Array<Term>;
}

export const ConditionalTerm = 'ConditionalTerm';

export function isConditionalTerm(item: unknown): item is ConditionalTerm {
    return reflection.isInstance(item, ConditionalTerm);
}

export interface ConstDecVar extends AstNode {
    readonly $container: ConstructorDecZ3;
    readonly $type: 'ConstDecVar';
    name: SmtSymbol;
}

export const ConstDecVar = 'ConstDecVar';

export function isConstDecVar(item: unknown): item is ConstDecVar {
    return reflection.isInstance(item, ConstDecVar);
}

export interface ConstructorDec extends AstNode {
    readonly $container: DataTypeDec;
    readonly $type: 'ConstructorDec';
    name: SmtSymbol;
    selectorDec: Array<SelectorDec>;
}

export const ConstructorDec = 'ConstructorDec';

export function isConstructorDec(item: unknown): item is ConstructorDec {
    return reflection.isInstance(item, ConstructorDec);
}

export interface ConstructorDecZ3 extends AstNode {
    readonly $container: DataTypeDecZ3;
    readonly $type: 'ConstructorDecZ3';
    name: ConstDecVar;
    right: Array<ConstDecVar>;
    selector: Array<SelectorDecZ3>;
}

export const ConstructorDecZ3 = 'ConstructorDecZ3';

export function isConstructorDecZ3(item: unknown): item is ConstructorDecZ3 {
    return reflection.isInstance(item, ConstructorDecZ3);
}

export interface DataTypeDec extends AstNode {
    readonly $container: CmdDecDataType | CmdDecDataTypes;
    readonly $type: 'DataTypeDec';
    constructorDecs: Array<ConstructorDec>;
    parameters: Array<SmtSymbol>;
    simpleConstructors: Array<SimpleConstructor>;
}

export const DataTypeDec = 'DataTypeDec';

export function isDataTypeDec(item: unknown): item is DataTypeDec {
    return reflection.isInstance(item, DataTypeDec);
}

export interface DataTypeDecZ3 extends AstNode {
    readonly $container: CmdDecDataType | CmdDecDataTypes;
    readonly $type: 'DataTypeDecZ3';
    constructorDecs: ConstructorDecZ3;
    name: SmtSymbol;
}

export const DataTypeDecZ3 = 'DataTypeDecZ3';

export function isDataTypeDecZ3(item: unknown): item is DataTypeDecZ3 {
    return reflection.isInstance(item, DataTypeDecZ3);
}

export interface FunctionDec extends AstNode {
    readonly $container: CmdDefFunsRec;
    readonly $type: 'FunctionDec';
    name: SmtSymbol;
    returnSort: Sort;
    vars: Array<SortedVar>;
}

export const FunctionDec = 'FunctionDec';

export function isFunctionDec(item: unknown): item is FunctionDec {
    return reflection.isInstance(item, FunctionDec);
}

export interface FunctionDefRec extends AstNode {
    readonly $type: 'FunctionDefRec';
    body: Term;
    name: SmtSymbol;
    returnSort: Sort;
    sortedVars: Array<SortedVar>;
}

export const FunctionDefRec = 'FunctionDefRec';

export function isFunctionDefRec(item: unknown): item is FunctionDefRec {
    return reflection.isInstance(item, FunctionDefRec);
}

export interface Index extends AstNode {
    readonly $container: SortIdentifier;
    readonly $type: 'Index';
    num?: number;
    symbol?: SmtSymbol;
}

export const Index = 'Index';

export function isIndex(item: unknown): item is Index {
    return reflection.isInstance(item, Index);
}

export interface Keyword extends AstNode {
    readonly $container: Attribute | Command | SExpr;
    readonly $type: 'Keyword';
    symbol: SmtSymbol;
}

export const Keyword = 'Keyword';

export function isKeyword(item: unknown): item is Keyword {
    return reflection.isInstance(item, Keyword);
}

export interface Model extends AstNode {
    readonly $type: 'Model';
    commands: Array<Command>;
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface NamedDataTypeDec extends AstNode {
    readonly $container: CmdDecDataTypes;
    readonly $type: 'NamedDataTypeDec';
    name: SmtSymbol;
    simpleConstructors: Array<SimpleConstructor>;
}

export const NamedDataTypeDec = 'NamedDataTypeDec';

export function isNamedDataTypeDec(item: unknown): item is NamedDataTypeDec {
    return reflection.isInstance(item, NamedDataTypeDec);
}

export interface OptionKeyword extends AstNode {
    readonly $container: Command;
    readonly $type: 'OptionKeyword';
    option: ':diagnostic-output-channel' | ':global-declarations' | ':interactive-mode' | ':model.compact' | ':opt.priority' | ':pp.bv-literals' | ':print-success' | ':produce-assertions' | ':produce-assignments' | ':produce-models' | ':produce-proofs' | ':produce-unsat-assumptions' | ':produce-unsat-cores' | ':random-seed' | ':regular-output-channel' | ':reproducible-resource-limit' | ':smt-auto-config' | ':smt.macro-finder' | ':smt.mbqi' | ':verbosity';
    value?: number | string;
}

export const OptionKeyword = 'OptionKeyword';

export function isOptionKeyword(item: unknown): item is OptionKeyword {
    return reflection.isInstance(item, OptionKeyword);
}

export interface Pattern extends AstNode {
    readonly $type: 'Pattern';
    symbol: SmtSymbol;
    symbols: Array<SmtSymbol>;
}

export const Pattern = 'Pattern';

export function isPattern(item: unknown): item is Pattern {
    return reflection.isInstance(item, Pattern);
}

export interface PatternAttribute extends AstNode {
    readonly $container: PatternedTerm;
    readonly $type: 'PatternAttribute';
    term: Array<Term>;
}

export const PatternAttribute = 'PatternAttribute';

export function isPatternAttribute(item: unknown): item is PatternAttribute {
    return reflection.isInstance(item, PatternAttribute);
}

export interface PatternedTerm extends AstNode {
    readonly $container: QuantifiedTerm;
    readonly $type: 'PatternedTerm';
    bodyterm: Term;
    patternAttribute: Array<PatternAttribute>;
}

export const PatternedTerm = 'PatternedTerm';

export function isPatternedTerm(item: unknown): item is PatternedTerm {
    return reflection.isInstance(item, PatternedTerm);
}

export interface PreDefinedSort extends AstNode {
    readonly $container: SortIdentifier | SortedParameter;
    readonly $type: 'PreDefinedSort';
    ID: 'Bool' | 'Int' | 'List' | 'Real' | 'RegLan' | 'RoundingMode' | 'String';
}

export const PreDefinedSort = 'PreDefinedSort';

export function isPreDefinedSort(item: unknown): item is PreDefinedSort {
    return reflection.isInstance(item, PreDefinedSort);
}

export interface SelectorDec extends AstNode {
    readonly $container: ConstructorDec;
    readonly $type: 'SelectorDec';
    listKey?: 'head' | 'tail';
    name?: SmtSymbol;
    sort: Sort;
}

export const SelectorDec = 'SelectorDec';

export function isSelectorDec(item: unknown): item is SelectorDec {
    return reflection.isInstance(item, SelectorDec);
}

export interface SelectorDecZ3 extends AstNode {
    readonly $container: ConstructorDecZ3;
    readonly $type: 'SelectorDecZ3';
    name: SmtSymbol;
    sort: Array<Sort>;
}

export const SelectorDecZ3 = 'SelectorDecZ3';

export function isSelectorDecZ3(item: unknown): item is SelectorDecZ3 {
    return reflection.isInstance(item, SelectorDecZ3);
}

export interface SExpr extends AstNode {
    readonly $container: AttributeValue | SExpr;
    readonly $type: 'SExpr';
    const?: SpecConstant;
    exprs: Array<SExpr>;
    keyWord?: Keyword;
    symbol?: SmtSymbol;
}

export const SExpr = 'SExpr';

export function isSExpr(item: unknown): item is SExpr {
    return reflection.isInstance(item, SExpr);
}

export interface SimpleConstructor extends AstNode {
    readonly $container: DataTypeDec | NamedDataTypeDec;
    readonly $type: 'SimpleConstructor';
    name: SmtSymbol;
}

export const SimpleConstructor = 'SimpleConstructor';

export function isSimpleConstructor(item: unknown): item is SimpleConstructor {
    return reflection.isInstance(item, SimpleConstructor);
}

export interface Sort extends AstNode {
    readonly $container: CmdConstDecl | CmdDefSort | CmdFunDecl | FunctionDec | FunctionDef | FunctionDefRec | SelectorDec | SelectorDecZ3 | Sort | SortedVar | Term;
    readonly $type: 'Sort';
    identifier: SortIdentifier;
    sorts: Array<Sort>;
}

export const Sort = 'Sort';

export function isSort(item: unknown): item is Sort {
    return reflection.isInstance(item, Sort);
}

export interface SortDec extends AstNode {
    readonly $container: CmdDecDataTypes;
    readonly $type: 'SortDec';
    name: SmtSymbol;
    num?: number;
}

export const SortDec = 'SortDec';

export function isSortDec(item: unknown): item is SortDec {
    return reflection.isInstance(item, SortDec);
}

export interface SortDecZ3 extends AstNode {
    readonly $type: 'SortDecZ3';
    symbols: Array<SmtSymbol>;
}

export const SortDecZ3 = 'SortDecZ3';

export function isSortDecZ3(item: unknown): item is SortDecZ3 {
    return reflection.isInstance(item, SortDecZ3);
}

export interface SortedParameter extends AstNode {
    readonly $container: CmdDefSort;
    readonly $type: 'SortedParameter';
    name: PreDefinedSort | SmtSymbol;
}

export const SortedParameter = 'SortedParameter';

export function isSortedParameter(item: unknown): item is SortedParameter {
    return reflection.isInstance(item, SortedParameter);
}

export interface SortedVar extends AstNode {
    readonly $container: FunctionDec | FunctionDef | FunctionDefRec | QuantifiedTerm;
    readonly $type: 'SortedVar';
    name: SmtSymbol;
    sort: Sort;
}

export const SortedVar = 'SortedVar';

export function isSortedVar(item: unknown): item is SortedVar {
    return reflection.isInstance(item, SortedVar);
}

export interface SortIdentifier extends AstNode {
    readonly $container: Sort;
    readonly $type: 'SortIdentifier';
    ID?: Reference<NamedSort>;
    indices: Array<Index>;
    name?: SmtSymbol;
    size?: number;
    sort?: PreDefinedSort;
}

export const SortIdentifier = 'SortIdentifier';

export function isSortIdentifier(item: unknown): item is SortIdentifier {
    return reflection.isInstance(item, SortIdentifier);
}

export interface Term extends AstNode {
    readonly $type: 'BvOperation' | 'Operator' | 'QualIdentifier' | 'QuantifiedTerm' | 'SmtSymbol' | 'SpecConstant' | 'StringOperation' | 'Term';
    args: Array<Term>;
    array?: Term;
    attribute: Array<Attribute>;
    body: Array<Term>;
    boolean?: string;
    condition: Array<Term>;
    index?: Term;
    listKey?: 'head' | 'tail';
    operands: Array<Term>;
    qualId?: QualIdentifier;
    sort?: Sort;
    statement: Array<ConditionalTerm>;
    term?: Term;
    terms: Array<Term>;
    value?: Term;
    varBinding: Array<VarBinding>;
}

export const Term = 'Term';

export function isTerm(item: unknown): item is Term {
    return reflection.isInstance(item, Term);
}

export interface VarBinding extends AstNode {
    readonly $container: Term;
    readonly $type: 'VarBinding';
    symbol: SmtSymbol;
    term: Term;
}

export const VarBinding = 'VarBinding';

export function isVarBinding(item: unknown): item is VarBinding {
    return reflection.isInstance(item, VarBinding);
}

export interface NamedAttribute extends Attribute {
    readonly $type: 'NamedAttribute';
    name: SmtSymbol;
}

export const NamedAttribute = 'NamedAttribute';

export function isNamedAttribute(item: unknown): item is NamedAttribute {
    return reflection.isInstance(item, NamedAttribute);
}

export interface CmdAssert extends Command {
    readonly $type: 'CmdAssert';
    term: Term;
}

export const CmdAssert = 'CmdAssert';

export function isCmdAssert(item: unknown): item is CmdAssert {
    return reflection.isInstance(item, CmdAssert);
}

export interface CmdCheckSat extends Command {
    readonly $type: 'CmdCheckSat';
    propLiteral: Array<Reference<NamedElement>>;
}

export const CmdCheckSat = 'CmdCheckSat';

export function isCmdCheckSat(item: unknown): item is CmdCheckSat {
    return reflection.isInstance(item, CmdCheckSat);
}

export interface CmdConstDecl extends Command {
    readonly $type: 'CmdConstDecl';
    commandType: 'declare-const';
    name: SmtSymbol;
    sorts: Array<Sort>;
}

export const CmdConstDecl = 'CmdConstDecl';

export function isCmdConstDecl(item: unknown): item is CmdConstDecl {
    return reflection.isInstance(item, CmdConstDecl);
}

export interface CmdDecDataType extends Command {
    readonly $type: 'CmdDecDataType';
    commandType: 'declare-datatype';
    dataTypeDec: DataTypeDec | DataTypeDecZ3;
    name: SmtSymbol;
}

export const CmdDecDataType = 'CmdDecDataType';

export function isCmdDecDataType(item: unknown): item is CmdDecDataType {
    return reflection.isInstance(item, CmdDecDataType);
}

export interface CmdDecDataTypes extends Command {
    readonly $type: 'CmdDecDataTypes';
    commandType: 'declare-datatypes';
    dataTypeDecs: Array<CommonDataTypeDec>;
    sortDec: Array<SortDec>;
}

export const CmdDecDataTypes = 'CmdDecDataTypes';

export function isCmdDecDataTypes(item: unknown): item is CmdDecDataTypes {
    return reflection.isInstance(item, CmdDecDataTypes);
}

export interface CmdDefFun extends Command {
    readonly $type: 'CmdDefFun' | 'FunctionDef';
    commandType: DefFunCommandName;
}

export const CmdDefFun = 'CmdDefFun';

export function isCmdDefFun(item: unknown): item is CmdDefFun {
    return reflection.isInstance(item, CmdDefFun);
}

export interface CmdDefFunsRec extends Command {
    readonly $type: 'CmdDefFunsRec';
    commandType: 'define-funs-rec';
    functionDec: Array<FunctionDec>;
    term: Array<Term>;
}

export const CmdDefFunsRec = 'CmdDefFunsRec';

export function isCmdDefFunsRec(item: unknown): item is CmdDefFunsRec {
    return reflection.isInstance(item, CmdDefFunsRec);
}

export interface CmdDefSort extends Command {
    readonly $type: 'CmdDefSort';
    commandType: 'define-sort';
    name: SmtSymbol;
    parameters: Array<SortedParameter>;
    resultSort: Sort;
}

export const CmdDefSort = 'CmdDefSort';

export function isCmdDefSort(item: unknown): item is CmdDefSort {
    return reflection.isInstance(item, CmdDefSort);
}

export interface CmdFunDecl extends Command {
    readonly $type: 'CmdFunDecl';
    commandType: 'declare-fun';
    name: SmtSymbol;
    paramSorts: Array<Sort>;
    returnSort: Sort;
}

export const CmdFunDecl = 'CmdFunDecl';

export function isCmdFunDecl(item: unknown): item is CmdFunDecl {
    return reflection.isInstance(item, CmdFunDecl);
}

export interface CmdSortDeclZ3 extends Command {
    readonly $type: 'CmdSortDeclZ3';
    commandType: 'declare-sort';
    name: SmtSymbol;
    number: Array<number>;
}

export const CmdSortDeclZ3 = 'CmdSortDeclZ3';

export function isCmdSortDeclZ3(item: unknown): item is CmdSortDeclZ3 {
    return reflection.isInstance(item, CmdSortDeclZ3);
}

export interface QualIdentifier extends Term {
    readonly $container: Term;
    readonly $type: 'QualIdentifier';
    ID: Reference<NamedElement>;
}

export const QualIdentifier = 'QualIdentifier';

export function isQualIdentifier(item: unknown): item is QualIdentifier {
    return reflection.isInstance(item, QualIdentifier);
}

export interface QuantifiedTerm extends Term {
    readonly $type: 'QuantifiedTerm';
    innerTerm: PatternedTerm | Term;
    sortedVar: Array<SortedVar>;
}

export const QuantifiedTerm = 'QuantifiedTerm';

export function isQuantifiedTerm(item: unknown): item is QuantifiedTerm {
    return reflection.isInstance(item, QuantifiedTerm);
}

export interface FunctionDef extends CmdDefFun {
    readonly $type: 'FunctionDef';
    body: Term;
    name: SmtSymbol;
    returnSort: Sort;
    sortedVars: Array<SortedVar>;
}

export const FunctionDef = 'FunctionDef';

export function isFunctionDef(item: unknown): item is FunctionDef {
    return reflection.isInstance(item, FunctionDef);
}

export type SmtAstType = {
    Attribute: Attribute
    AttributeValue: AttributeValue
    CmdAssert: CmdAssert
    CmdCheckSat: CmdCheckSat
    CmdConstDecl: CmdConstDecl
    CmdDecDataType: CmdDecDataType
    CmdDecDataTypes: CmdDecDataTypes
    CmdDefFun: CmdDefFun
    CmdDefFunsRec: CmdDefFunsRec
    CmdDefSort: CmdDefSort
    CmdFunDecl: CmdFunDecl
    CmdSortDeclZ3: CmdSortDeclZ3
    Command: Command
    CommonDataTypeDec: CommonDataTypeDec
    ConditionalTerm: ConditionalTerm
    ConstDecVar: ConstDecVar
    ConstructorDec: ConstructorDec
    ConstructorDecZ3: ConstructorDecZ3
    DataTypeDec: DataTypeDec
    DataTypeDecZ3: DataTypeDecZ3
    FunctionDec: FunctionDec
    FunctionDef: FunctionDef
    FunctionDefRec: FunctionDefRec
    Index: Index
    InfoFlag: InfoFlag
    Keyword: Keyword
    Model: Model
    NamedAttribute: NamedAttribute
    NamedDataTypeDec: NamedDataTypeDec
    NamedElement: NamedElement
    NamedSort: NamedSort
    Option: Option
    OptionKeyword: OptionKeyword
    Pattern: Pattern
    PatternAttribute: PatternAttribute
    PatternedTerm: PatternedTerm
    PreDefinedSort: PreDefinedSort
    QualIdentifier: QualIdentifier
    QuantifiedTerm: QuantifiedTerm
    SExpr: SExpr
    SelectorDec: SelectorDec
    SelectorDecZ3: SelectorDecZ3
    SimpleConstructor: SimpleConstructor
    Sort: Sort
    SortDec: SortDec
    SortDecZ3: SortDecZ3
    SortIdentifier: SortIdentifier
    SortedParameter: SortedParameter
    SortedVar: SortedVar
    Term: Term
    VarBinding: VarBinding
}

export class SmtAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return [Attribute, AttributeValue, CmdAssert, CmdCheckSat, CmdConstDecl, CmdDecDataType, CmdDecDataTypes, CmdDefFun, CmdDefFunsRec, CmdDefSort, CmdFunDecl, CmdSortDeclZ3, Command, CommonDataTypeDec, ConditionalTerm, ConstDecVar, ConstructorDec, ConstructorDecZ3, DataTypeDec, DataTypeDecZ3, FunctionDec, FunctionDef, FunctionDefRec, Index, InfoFlag, Keyword, Model, NamedAttribute, NamedDataTypeDec, NamedElement, NamedSort, Option, OptionKeyword, Pattern, PatternAttribute, PatternedTerm, PreDefinedSort, QualIdentifier, QuantifiedTerm, SExpr, SelectorDec, SelectorDecZ3, SimpleConstructor, Sort, SortDec, SortDecZ3, SortIdentifier, SortedParameter, SortedVar, Term, VarBinding];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case Attribute:
            case OptionKeyword: {
                return this.isSubtype(Option, supertype);
            }
            case CmdAssert:
            case CmdCheckSat:
            case CmdDecDataTypes:
            case CmdDefFun:
            case CmdDefFunsRec: {
                return this.isSubtype(Command, supertype);
            }
            case CmdConstDecl:
            case CmdFunDecl: {
                return this.isSubtype(Command, supertype) || this.isSubtype(NamedElement, supertype);
            }
            case CmdDecDataType:
            case CmdDefSort:
            case CmdSortDeclZ3: {
                return this.isSubtype(Command, supertype) || this.isSubtype(NamedSort, supertype);
            }
            case ConstructorDec:
            case FunctionDec:
            case SimpleConstructor:
            case SortedVar: {
                return this.isSubtype(NamedElement, supertype);
            }
            case DataTypeDec:
            case DataTypeDecZ3:
            case NamedDataTypeDec: {
                return this.isSubtype(CommonDataTypeDec, supertype) || this.isSubtype(NamedSort, supertype);
            }
            case FunctionDef: {
                return this.isSubtype(CmdDefFun, supertype) || this.isSubtype(NamedElement, supertype);
            }
            case Keyword: {
                return this.isSubtype(InfoFlag, supertype);
            }
            case NamedAttribute: {
                return this.isSubtype(Attribute, supertype) || this.isSubtype(NamedElement, supertype);
            }
            case QualIdentifier:
            case QuantifiedTerm: {
                return this.isSubtype(Term, supertype);
            }
            case SortDec:
            case SortDecZ3:
            case SortedParameter: {
                return this.isSubtype(NamedSort, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'CmdCheckSat:propLiteral':
            case 'QualIdentifier:ID': {
                return NamedElement;
            }
            case 'SortIdentifier:ID': {
                return NamedSort;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case Attribute: {
                return {
                    name: Attribute,
                    properties: [
                        { name: 'keyWord' },
                        { name: 'value' }
                    ]
                };
            }
            case AttributeValue: {
                return {
                    name: AttributeValue,
                    properties: [
                        { name: 'const' },
                        { name: 'exprs', defaultValue: [] },
                        { name: 'string', defaultValue: [] },
                        { name: 'symbol' }
                    ]
                };
            }
            case Command: {
                return {
                    name: Command,
                    properties: [
                        { name: 'arity' },
                        { name: 'attribute' },
                        { name: 'basicCommand' },
                        { name: 'infoFlag' },
                        { name: 'name' },
                        { name: 'option' },
                        { name: 'options' },
                        { name: 'symbol' },
                        { name: 'term' }
                    ]
                };
            }
            case ConditionalTerm: {
                return {
                    name: ConditionalTerm,
                    properties: [
                        { name: 'term', defaultValue: [] }
                    ]
                };
            }
            case ConstDecVar: {
                return {
                    name: ConstDecVar,
                    properties: [
                        { name: 'name' }
                    ]
                };
            }
            case ConstructorDec: {
                return {
                    name: ConstructorDec,
                    properties: [
                        { name: 'name' },
                        { name: 'selectorDec', defaultValue: [] }
                    ]
                };
            }
            case ConstructorDecZ3: {
                return {
                    name: ConstructorDecZ3,
                    properties: [
                        { name: 'name' },
                        { name: 'right', defaultValue: [] },
                        { name: 'selector', defaultValue: [] }
                    ]
                };
            }
            case DataTypeDec: {
                return {
                    name: DataTypeDec,
                    properties: [
                        { name: 'constructorDecs', defaultValue: [] },
                        { name: 'parameters', defaultValue: [] },
                        { name: 'simpleConstructors', defaultValue: [] }
                    ]
                };
            }
            case DataTypeDecZ3: {
                return {
                    name: DataTypeDecZ3,
                    properties: [
                        { name: 'constructorDecs' },
                        { name: 'name' }
                    ]
                };
            }
            case FunctionDec: {
                return {
                    name: FunctionDec,
                    properties: [
                        { name: 'name' },
                        { name: 'returnSort' },
                        { name: 'vars', defaultValue: [] }
                    ]
                };
            }
            case FunctionDefRec: {
                return {
                    name: FunctionDefRec,
                    properties: [
                        { name: 'body' },
                        { name: 'name' },
                        { name: 'returnSort' },
                        { name: 'sortedVars', defaultValue: [] }
                    ]
                };
            }
            case Index: {
                return {
                    name: Index,
                    properties: [
                        { name: 'num' },
                        { name: 'symbol' }
                    ]
                };
            }
            case Keyword: {
                return {
                    name: Keyword,
                    properties: [
                        { name: 'symbol' }
                    ]
                };
            }
            case Model: {
                return {
                    name: Model,
                    properties: [
                        { name: 'commands', defaultValue: [] }
                    ]
                };
            }
            case NamedDataTypeDec: {
                return {
                    name: NamedDataTypeDec,
                    properties: [
                        { name: 'name' },
                        { name: 'simpleConstructors', defaultValue: [] }
                    ]
                };
            }
            case OptionKeyword: {
                return {
                    name: OptionKeyword,
                    properties: [
                        { name: 'option' },
                        { name: 'value' }
                    ]
                };
            }
            case Pattern: {
                return {
                    name: Pattern,
                    properties: [
                        { name: 'symbol' },
                        { name: 'symbols', defaultValue: [] }
                    ]
                };
            }
            case PatternAttribute: {
                return {
                    name: PatternAttribute,
                    properties: [
                        { name: 'term', defaultValue: [] }
                    ]
                };
            }
            case PatternedTerm: {
                return {
                    name: PatternedTerm,
                    properties: [
                        { name: 'bodyterm' },
                        { name: 'patternAttribute', defaultValue: [] }
                    ]
                };
            }
            case PreDefinedSort: {
                return {
                    name: PreDefinedSort,
                    properties: [
                        { name: 'ID' }
                    ]
                };
            }
            case SelectorDec: {
                return {
                    name: SelectorDec,
                    properties: [
                        { name: 'listKey' },
                        { name: 'name' },
                        { name: 'sort' }
                    ]
                };
            }
            case SelectorDecZ3: {
                return {
                    name: SelectorDecZ3,
                    properties: [
                        { name: 'name' },
                        { name: 'sort', defaultValue: [] }
                    ]
                };
            }
            case SExpr: {
                return {
                    name: SExpr,
                    properties: [
                        { name: 'const' },
                        { name: 'exprs', defaultValue: [] },
                        { name: 'keyWord' },
                        { name: 'symbol' }
                    ]
                };
            }
            case SimpleConstructor: {
                return {
                    name: SimpleConstructor,
                    properties: [
                        { name: 'name' }
                    ]
                };
            }
            case Sort: {
                return {
                    name: Sort,
                    properties: [
                        { name: 'identifier' },
                        { name: 'sorts', defaultValue: [] }
                    ]
                };
            }
            case SortDec: {
                return {
                    name: SortDec,
                    properties: [
                        { name: 'name' },
                        { name: 'num' }
                    ]
                };
            }
            case SortDecZ3: {
                return {
                    name: SortDecZ3,
                    properties: [
                        { name: 'symbols', defaultValue: [] }
                    ]
                };
            }
            case SortedParameter: {
                return {
                    name: SortedParameter,
                    properties: [
                        { name: 'name' }
                    ]
                };
            }
            case SortedVar: {
                return {
                    name: SortedVar,
                    properties: [
                        { name: 'name' },
                        { name: 'sort' }
                    ]
                };
            }
            case SortIdentifier: {
                return {
                    name: SortIdentifier,
                    properties: [
                        { name: 'ID' },
                        { name: 'indices', defaultValue: [] },
                        { name: 'name' },
                        { name: 'size' },
                        { name: 'sort' }
                    ]
                };
            }
            case Term: {
                return {
                    name: Term,
                    properties: [
                        { name: 'args', defaultValue: [] },
                        { name: 'array' },
                        { name: 'attribute', defaultValue: [] },
                        { name: 'body', defaultValue: [] },
                        { name: 'boolean' },
                        { name: 'condition', defaultValue: [] },
                        { name: 'index' },
                        { name: 'listKey' },
                        { name: 'operands', defaultValue: [] },
                        { name: 'qualId' },
                        { name: 'sort' },
                        { name: 'statement', defaultValue: [] },
                        { name: 'term' },
                        { name: 'terms', defaultValue: [] },
                        { name: 'value' },
                        { name: 'varBinding', defaultValue: [] }
                    ]
                };
            }
            case VarBinding: {
                return {
                    name: VarBinding,
                    properties: [
                        { name: 'symbol' },
                        { name: 'term' }
                    ]
                };
            }
            case NamedAttribute: {
                return {
                    name: NamedAttribute,
                    properties: [
                        { name: 'keyWord' },
                        { name: 'name' },
                        { name: 'value' }
                    ]
                };
            }
            case CmdAssert: {
                return {
                    name: CmdAssert,
                    properties: [
                        { name: 'arity' },
                        { name: 'attribute' },
                        { name: 'basicCommand' },
                        { name: 'infoFlag' },
                        { name: 'name' },
                        { name: 'option' },
                        { name: 'options' },
                        { name: 'symbol' },
                        { name: 'term' }
                    ]
                };
            }
            case CmdCheckSat: {
                return {
                    name: CmdCheckSat,
                    properties: [
                        { name: 'arity' },
                        { name: 'attribute' },
                        { name: 'basicCommand' },
                        { name: 'infoFlag' },
                        { name: 'name' },
                        { name: 'option' },
                        { name: 'options' },
                        { name: 'propLiteral', defaultValue: [] },
                        { name: 'symbol' },
                        { name: 'term' }
                    ]
                };
            }
            case CmdConstDecl: {
                return {
                    name: CmdConstDecl,
                    properties: [
                        { name: 'arity' },
                        { name: 'attribute' },
                        { name: 'basicCommand' },
                        { name: 'commandType' },
                        { name: 'infoFlag' },
                        { name: 'name' },
                        { name: 'option' },
                        { name: 'options' },
                        { name: 'sorts', defaultValue: [] },
                        { name: 'symbol' },
                        { name: 'term' }
                    ]
                };
            }
            case CmdDecDataType: {
                return {
                    name: CmdDecDataType,
                    properties: [
                        { name: 'arity' },
                        { name: 'attribute' },
                        { name: 'basicCommand' },
                        { name: 'commandType' },
                        { name: 'dataTypeDec' },
                        { name: 'infoFlag' },
                        { name: 'name' },
                        { name: 'option' },
                        { name: 'options' },
                        { name: 'symbol' },
                        { name: 'term' }
                    ]
                };
            }
            case CmdDecDataTypes: {
                return {
                    name: CmdDecDataTypes,
                    properties: [
                        { name: 'arity' },
                        { name: 'attribute' },
                        { name: 'basicCommand' },
                        { name: 'commandType' },
                        { name: 'dataTypeDecs', defaultValue: [] },
                        { name: 'infoFlag' },
                        { name: 'name' },
                        { name: 'option' },
                        { name: 'options' },
                        { name: 'sortDec', defaultValue: [] },
                        { name: 'symbol' },
                        { name: 'term' }
                    ]
                };
            }
            case CmdDefFun: {
                return {
                    name: CmdDefFun,
                    properties: [
                        { name: 'arity' },
                        { name: 'attribute' },
                        { name: 'basicCommand' },
                        { name: 'commandType' },
                        { name: 'infoFlag' },
                        { name: 'name' },
                        { name: 'option' },
                        { name: 'options' },
                        { name: 'symbol' },
                        { name: 'term' }
                    ]
                };
            }
            case CmdDefFunsRec: {
                return {
                    name: CmdDefFunsRec,
                    properties: [
                        { name: 'arity' },
                        { name: 'attribute' },
                        { name: 'basicCommand' },
                        { name: 'commandType' },
                        { name: 'functionDec', defaultValue: [] },
                        { name: 'infoFlag' },
                        { name: 'name' },
                        { name: 'option' },
                        { name: 'options' },
                        { name: 'symbol' },
                        { name: 'term', defaultValue: [] }
                    ]
                };
            }
            case CmdDefSort: {
                return {
                    name: CmdDefSort,
                    properties: [
                        { name: 'arity' },
                        { name: 'attribute' },
                        { name: 'basicCommand' },
                        { name: 'commandType' },
                        { name: 'infoFlag' },
                        { name: 'name' },
                        { name: 'option' },
                        { name: 'options' },
                        { name: 'parameters', defaultValue: [] },
                        { name: 'resultSort' },
                        { name: 'symbol' },
                        { name: 'term' }
                    ]
                };
            }
            case CmdFunDecl: {
                return {
                    name: CmdFunDecl,
                    properties: [
                        { name: 'arity' },
                        { name: 'attribute' },
                        { name: 'basicCommand' },
                        { name: 'commandType' },
                        { name: 'infoFlag' },
                        { name: 'name' },
                        { name: 'option' },
                        { name: 'options' },
                        { name: 'paramSorts', defaultValue: [] },
                        { name: 'returnSort' },
                        { name: 'symbol' },
                        { name: 'term' }
                    ]
                };
            }
            case CmdSortDeclZ3: {
                return {
                    name: CmdSortDeclZ3,
                    properties: [
                        { name: 'arity' },
                        { name: 'attribute' },
                        { name: 'basicCommand' },
                        { name: 'commandType' },
                        { name: 'infoFlag' },
                        { name: 'name' },
                        { name: 'number', defaultValue: [] },
                        { name: 'option' },
                        { name: 'options' },
                        { name: 'symbol' },
                        { name: 'term' }
                    ]
                };
            }
            case QualIdentifier: {
                return {
                    name: QualIdentifier,
                    properties: [
                        { name: 'args', defaultValue: [] },
                        { name: 'array' },
                        { name: 'attribute', defaultValue: [] },
                        { name: 'body', defaultValue: [] },
                        { name: 'boolean' },
                        { name: 'condition', defaultValue: [] },
                        { name: 'ID' },
                        { name: 'index' },
                        { name: 'listKey' },
                        { name: 'operands', defaultValue: [] },
                        { name: 'qualId' },
                        { name: 'sort' },
                        { name: 'statement', defaultValue: [] },
                        { name: 'term' },
                        { name: 'terms', defaultValue: [] },
                        { name: 'value' },
                        { name: 'varBinding', defaultValue: [] }
                    ]
                };
            }
            case QuantifiedTerm: {
                return {
                    name: QuantifiedTerm,
                    properties: [
                        { name: 'args', defaultValue: [] },
                        { name: 'array' },
                        { name: 'attribute', defaultValue: [] },
                        { name: 'body', defaultValue: [] },
                        { name: 'boolean' },
                        { name: 'condition', defaultValue: [] },
                        { name: 'index' },
                        { name: 'innerTerm' },
                        { name: 'listKey' },
                        { name: 'operands', defaultValue: [] },
                        { name: 'qualId' },
                        { name: 'sort' },
                        { name: 'sortedVar', defaultValue: [] },
                        { name: 'statement', defaultValue: [] },
                        { name: 'term' },
                        { name: 'terms', defaultValue: [] },
                        { name: 'value' },
                        { name: 'varBinding', defaultValue: [] }
                    ]
                };
            }
            case FunctionDef: {
                return {
                    name: FunctionDef,
                    properties: [
                        { name: 'arity' },
                        { name: 'attribute' },
                        { name: 'basicCommand' },
                        { name: 'body' },
                        { name: 'commandType' },
                        { name: 'infoFlag' },
                        { name: 'name' },
                        { name: 'option' },
                        { name: 'options' },
                        { name: 'returnSort' },
                        { name: 'sortedVars', defaultValue: [] },
                        { name: 'symbol' },
                        { name: 'term' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}

export const reflection = new SmtAstReflection();
