import { DeepPartial, type Module, inject } from 'langium';
import { createDefaultModule, createDefaultSharedModule, type DefaultSharedModuleContext, type LangiumServices, type LangiumSharedServices, type PartialLangiumServices } from 'langium/lsp';
import { SpectraGeneratedModule, SpectraGeneratedSharedModule } from './generated/module.js';
import { SpectraValidator, registerValidationChecks } from './spectra-validator.js';
import { SpectraScopeComputation } from './spectra-scope.js';
import { SpectraWorkspaceManager } from './SpectraWorkspaceManager.js';
import { SpectraCodeActionProvider } from './spectra-code-actions.js';


/**
 * Declaration of custom services - add your own service classes here.
 */
export type SpectraAddedServices = {
    validation: {
        SpectraValidator: SpectraValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type SpectraServices = LangiumServices & SpectraAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const SpectraModule: Module<SpectraServices, PartialLangiumServices & SpectraAddedServices> = {
    validation: {
        SpectraValidator: () => new SpectraValidator()
    },
    references: {
        ScopeComputation: (services) => new SpectraScopeComputation(services)
    },
    lsp: {
        CodeActionProvider: (services) => new SpectraCodeActionProvider(services),
    },
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createSpectraServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    Spectra: SpectraServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        SpectraGeneratedSharedModule,
        SpectraSharedModule
    );
    const Spectra = inject(
        createDefaultModule({ shared }),
        SpectraGeneratedModule,
        SpectraModule
    );
    shared.ServiceRegistry.register(Spectra);
    registerValidationChecks(Spectra);
    if (!context.connection) {
        // We don't run inside a language server
        // Therefore, initialize the configuration provider instantly
        shared.workspace.ConfigurationProvider.initialized({});
    }
    return { shared, Spectra };
}

export type SpectraSharedServices = LangiumSharedServices;

export const SpectraSharedModule:  Module<SpectraSharedServices, DeepPartial<SpectraSharedServices>> = {
    workspace: {
        WorkspaceManager: (services) => new SpectraWorkspaceManager(services)
    }
}
